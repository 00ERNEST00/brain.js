{"version":3,"sources":["../../src/recurrent/lstm.js"],"names":["LSTM","hiddenSize","prevSize","inputMatrix","inputHidden","inputBias","forgetMatrix","forgetHidden","forgetBias","outputMatrix","outputHidden","outputBias","cellActivationMatrix","cellActivationHidden","cellActivationBias","equation","size","hiddenLayer","sigmoid","bind","add","multiply","multiplyElement","previousResult","tanh","result","inputGate","forgetGate","outputGate","cellWrite","retainCell","writeCell","cell"],"mappings":"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","file":"lstm.js","sourcesContent":["import Matrix from './matrix';\nimport RandomMatrix from './matrix/random-matrix';\nimport RNN from './rnn';\n\nexport default class LSTM extends RNN {\n  getModel(hiddenSize, prevSize) {\n    return {\n      // gates parameters\n      //wix\n      inputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wih\n      inputHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bi\n      inputBias: new Matrix(hiddenSize, 1),\n\n      //wfx\n      forgetMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wfh\n      forgetHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bf\n      forgetBias: new Matrix(hiddenSize, 1),\n\n      //wox\n      outputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //woh\n      outputHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bo\n      outputBias: new Matrix(hiddenSize, 1),\n\n      // cell write params\n      //wcx\n      cellActivationMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wch\n      cellActivationHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bc\n      cellActivationBias: new Matrix(hiddenSize, 1)\n    };\n  }\n\n  /**\n   *\n   * @param {Equation} equation\n   * @param {Matrix} inputMatrix\n   * @param {Number} size\n   * @param {Object} hiddenLayer\n   * @returns {Matrix}\n   */\n  getEquation(equation, inputMatrix, size, hiddenLayer) {\n    let sigmoid = equation.sigmoid.bind(equation);\n    let add = equation.add.bind(equation);\n    let multiply = equation.multiply.bind(equation);\n    let multiplyElement = equation.multiplyElement.bind(equation);\n    let previousResult = equation.previousResult.bind(equation);\n    let tanh = equation.tanh.bind(equation);\n    let result = equation.result.bind(equation);\n\n    let inputGate = result(\n      sigmoid(\n        add(\n          add(\n            multiply(\n              hiddenLayer.inputMatrix,\n              inputMatrix\n            ),\n            multiply(\n              hiddenLayer.inputHidden,\n              previousResult(size)\n            )\n          ),\n          hiddenLayer.inputBias\n        )\n      )\n    );\n\n    let forgetGate = result(\n      sigmoid(\n        add(\n          add(\n            multiply(\n              hiddenLayer.forgetMatrix,\n              inputMatrix\n            ),\n            multiply(\n              hiddenLayer.forgetHidden,\n              previousResult(size)\n            )\n          ),\n          hiddenLayer.forgetBias\n        )\n      )\n    );\n\n    // output gate\n    let outputGate = result(\n      sigmoid(\n        add(\n          add(\n            multiply(\n              hiddenLayer.outputMatrix,\n              inputMatrix\n            ),\n            multiply(\n              hiddenLayer.outputHidden,\n              previousResult(size)\n            )\n          ),\n          hiddenLayer.outputBias\n        )\n      )\n    );\n\n    // write operation on cells\n    let cellWrite = result(\n      tanh(\n        add(\n          add(\n            multiply(\n              hiddenLayer.cellActivationMatrix,\n              inputMatrix\n            ),\n            multiply(\n              hiddenLayer.cellActivationHidden,\n              previousResult(size)\n            )\n          ),\n          hiddenLayer.cellActivationBias\n        )\n      )\n    );\n\n    // compute new cell activation\n    let retainCell = multiplyElement(forgetGate, previousResult(size)); // what do we keep from cell\n    let writeCell = multiplyElement(inputGate, cellWrite); // what do we write to cell\n    let cell = add(retainCell, writeCell); // new cell contents\n\n    // compute hidden state as gated, saturated cell activations\n    return result(\n      multiplyElement(\n        outputGate,\n        tanh(cell)\n      )\n    );\n  }\n}\n"]}
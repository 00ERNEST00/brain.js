{"version":3,"sources":["../../src/recurrent/gru.js"],"names":["GRU","hiddenSize","prevSize","resetGateInputMatrix","resetGateHiddenMatrix","resetGateBias","updateGateInputMatrix","updateGateHiddenMatrix","updateGateBias","cellWriteInputMatrix","cellWriteHiddenMatrix","cellWriteBias","equation","inputMatrix","size","hiddenLayer","sigmoid","bind","add","multiply","multiplyElement","previousResult","tanh","resetGate","updateGate","cell","allOnes","rows","columns","negUpdateGate"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,G;;;;;;;;;;;6BACVC,U,EAAYC,Q,EAAU;AAC7B,aAAO;AACL;AACA;AACAC,8BAAsB,2BAAiBF,UAAjB,EAA6BC,QAA7B,EAAuC,IAAvC,CAHjB;AAIL;AACAE,+BAAuB,2BAAiBH,UAAjB,EAA6BA,UAA7B,EAAyC,IAAzC,CALlB;AAML;AACAI,uBAAe,qBAAWJ,UAAX,EAAuB,CAAvB,CAPV;;AASL;AACA;AACAK,+BAAuB,2BAAiBL,UAAjB,EAA6BC,QAA7B,EAAuC,IAAvC,CAXlB;AAYL;AACAK,gCAAwB,2BAAiBN,UAAjB,EAA6BA,UAA7B,EAAyC,IAAzC,CAbnB;AAcL;AACAO,wBAAgB,qBAAWP,UAAX,EAAuB,CAAvB,CAfX;;AAiBL;AACA;AACAQ,8BAAsB,2BAAiBR,UAAjB,EAA6BC,QAA7B,EAAuC,IAAvC,CAnBjB;AAoBL;AACAQ,+BAAuB,2BAAiBT,UAAjB,EAA6BA,UAA7B,EAAyC,IAAzC,CArBlB;AAsBL;AACAU,uBAAe,qBAAWV,UAAX,EAAuB,CAAvB;AAvBV,OAAP;AAyBD;;AAED;;;;;;;;;;;gCAQYW,Q,EAAUC,W,EAAaC,I,EAAMC,W,EAAa;AACpD,UAAIC,UAAUJ,SAASI,OAAT,CAAiBC,IAAjB,CAAsBL,QAAtB,CAAd;AACA,UAAIM,MAAMN,SAASM,GAAT,CAAaD,IAAb,CAAkBL,QAAlB,CAAV;AACA,UAAIO,WAAWP,SAASO,QAAT,CAAkBF,IAAlB,CAAuBL,QAAvB,CAAf;AACA,UAAIQ,kBAAkBR,SAASQ,eAAT,CAAyBH,IAAzB,CAA8BL,QAA9B,CAAtB;AACA,UAAIS,iBAAiBT,SAASS,cAAT,CAAwBJ,IAAxB,CAA6BL,QAA7B,CAArB;AACA,UAAIU,OAAOV,SAASU,IAAT,CAAcL,IAAd,CAAmBL,QAAnB,CAAX;;AAEA;AACA,UAAIW,YAAYP,QACdE,IACEA,IACEC,SACEJ,YAAYZ,oBADd,EAEEU,WAFF,CADF,EAKEM,SACEJ,YAAYX,qBADd,EAEEiB,eAAeP,IAAf,CAFF,CALF,CADF,EAWEC,YAAYV,aAXd,CADc,CAAhB;;AAgBA;AACA,UAAImB,aAAaR,QACfE,IACEA,IACEC,SACEJ,YAAYT,qBADd,EAEEO,WAFF,CADF,EAKEM,SACEJ,YAAYR,sBADd,EAEEc,eAAeP,IAAf,CAFF,CALF,CADF,EAWEC,YAAYP,cAXd,CADe,CAAjB;;AAgBA;AACA,UAAIiB,OAAOH,KACTJ,IACEA,IACEC,SACEJ,YAAYN,oBADd,EAEEI,WAFF,CADF,EAKEM,SACEJ,YAAYL,qBADd,EAEEU,gBACEG,SADF,EAEEF,eAAeP,IAAf,CAFF,CAFF,CALF,CADF,EAcEC,YAAYJ,aAdd,CADS,CAAX;;AAmBA;AACA,UAAIe,UAAU,yBAAeF,WAAWG,IAA1B,EAAgCH,WAAWI,OAA3C,CAAd;AACA;AACA,UAAIC,gBAAgB,6BAAcL,UAAd,CAApB;AACA,aAAON,IACLE,gBACEF,IACEQ,OADF,EAEEG,aAFF,CADF,EAKEJ,IALF,CADK,EAQLL,gBACEC,eAAeP,IAAf,CADF,EAEEU,UAFF,CARK,CAAP;AAaD;;;;;;kBApHkBxB,G","file":"gru.js","sourcesContent":["import Matrix from './matrix';\nimport RNN from './rnn';\nimport RandomMatrix from './matrix/random-matrix';\nimport OnesMatrix from './matrix/ones-matrix';\nimport cloneNegative from './matrix/clone-negative';\n\nexport default class GRU extends RNN {\n  getModel(hiddenSize, prevSize) {\n    return {\n      // reset Gate\n      //wrxh\n      resetGateInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wrhh\n      resetGateHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //br\n      resetGateBias: new Matrix(hiddenSize, 1),\n\n      // update Gate\n      //wzxh\n      updateGateInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wzhh\n      updateGateHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bz\n      updateGateBias: new Matrix(hiddenSize, 1),\n\n      // cell write parameters\n      //wcxh\n      cellWriteInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wchh\n      cellWriteHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bc\n      cellWriteBias: new Matrix(hiddenSize, 1)\n    };\n  }\n\n  /**\n   *\n   * @param {Equation} equation\n   * @param {Matrix} inputMatrix\n   * @param {Number} size\n   * @param {Object} hiddenLayer\n   * @returns {Matrix}\n   */\n  getEquation(equation, inputMatrix, size, hiddenLayer) {\n    let sigmoid = equation.sigmoid.bind(equation);\n    let add = equation.add.bind(equation);\n    let multiply = equation.multiply.bind(equation);\n    let multiplyElement = equation.multiplyElement.bind(equation);\n    let previousResult = equation.previousResult.bind(equation);\n    let tanh = equation.tanh.bind(equation);\n\n    // reset gate\n    let resetGate = sigmoid(\n      add(\n        add(\n          multiply(\n            hiddenLayer.resetGateInputMatrix,\n            inputMatrix\n          ),\n          multiply(\n            hiddenLayer.resetGateHiddenMatrix,\n            previousResult(size)\n          )\n        ),\n        hiddenLayer.resetGateBias\n      )\n    );\n\n    // update gate\n    let updateGate = sigmoid(\n      add(\n        add(\n          multiply(\n            hiddenLayer.updateGateInputMatrix,\n            inputMatrix\n          ),\n          multiply(\n            hiddenLayer.updateGateHiddenMatrix,\n            previousResult(size)\n          )\n        ),\n        hiddenLayer.updateGateBias\n      )\n    );\n\n    // cell\n    let cell = tanh(\n      add(\n        add(\n          multiply(\n            hiddenLayer.cellWriteInputMatrix,\n            inputMatrix\n          ),\n          multiply(\n            hiddenLayer.cellWriteHiddenMatrix,\n            multiplyElement(\n              resetGate,\n              previousResult(size)\n            )\n          )\n        ),\n        hiddenLayer.cellWriteBias\n      )\n    );\n\n    // compute hidden state as gated, saturated cell activations\n    let allOnes = new OnesMatrix(updateGate.rows, updateGate.columns);\n    // negate updateGate\n    let negUpdateGate = cloneNegative(updateGate);\n    return add(\n      multiplyElement(\n        add(\n          allOnes,\n          negUpdateGate\n        ),\n        cell\n      ),\n      multiplyElement(\n        previousResult(size),\n        updateGate\n      )\n    );\n  }\n}\n"]}
{"version":3,"sources":["../../src/recurrent/gru.js"],"names":["GRU","hiddenSize","prevSize","updateGateInputMatrix","updateGateHiddenMatrix","updateGateBias","resetGateInputMatrix","resetGateHiddenMatrix","resetGateBias","cellWriteInputMatrix","cellWriteHiddenMatrix","cellWriteBias","equation","inputMatrix","size","hiddenLayer","sigmoid","bind","add","multiply","multiplyElement","previousResult","tanh","allOnes","cloneNegative","updateGate","resetGate","cell","rows","columns"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,G;;;;;;;;;;;6BACVC,U,EAAYC,Q,EAAU;AAC7B,aAAO;AACL;AACA;AACAC,+BAAuB,2BAAiBF,UAAjB,EAA6BC,QAA7B,EAAuC,IAAvC,CAHlB;AAIL;AACAE,gCAAwB,2BAAiBH,UAAjB,EAA6BA,UAA7B,EAAyC,IAAzC,CALnB;AAML;AACAI,wBAAgB,qBAAWJ,UAAX,EAAuB,CAAvB,CAPX;;AASL;AACA;AACAK,8BAAsB,2BAAiBL,UAAjB,EAA6BC,QAA7B,EAAuC,IAAvC,CAXjB;AAYL;AACAK,+BAAuB,2BAAiBN,UAAjB,EAA6BA,UAA7B,EAAyC,IAAzC,CAblB;AAcL;AACAO,uBAAe,qBAAWP,UAAX,EAAuB,CAAvB,CAfV;;AAiBL;AACA;AACAQ,8BAAsB,2BAAiBR,UAAjB,EAA6BC,QAA7B,EAAuC,IAAvC,CAnBjB;AAoBL;AACAQ,+BAAuB,2BAAiBT,UAAjB,EAA6BA,UAA7B,EAAyC,IAAzC,CArBlB;AAsBL;AACAU,uBAAe,qBAAWV,UAAX,EAAuB,CAAvB;AAvBV,OAAP;AAyBD;;AAED;;;;;;;;;;;gCAQYW,Q,EAAUC,W,EAAaC,I,EAAMC,W,EAAa;AACpD,UAAIC,UAAUJ,SAASI,OAAT,CAAiBC,IAAjB,CAAsBL,QAAtB,CAAd;AACA,UAAIM,MAAMN,SAASM,GAAT,CAAaD,IAAb,CAAkBL,QAAlB,CAAV;AACA,UAAIO,WAAWP,SAASO,QAAT,CAAkBF,IAAlB,CAAuBL,QAAvB,CAAf;AACA,UAAIQ,kBAAkBR,SAASQ,eAAT,CAAyBH,IAAzB,CAA8BL,QAA9B,CAAtB;AACA,UAAIS,iBAAiBT,SAASS,cAAT,CAAwBJ,IAAxB,CAA6BL,QAA7B,CAArB;AACA,UAAIU,OAAOV,SAASU,IAAT,CAAcL,IAAd,CAAmBL,QAAnB,CAAX;AACA,UAAIW,UAAUX,SAASW,OAAT,CAAiBN,IAAjB,CAAsBL,QAAtB,CAAd;AACA,UAAIY,gBAAgBZ,SAASY,aAAT,CAAuBP,IAAvB,CAA4BL,QAA5B,CAApB;;AAEA;AACA,UAAIa,aAAaT,QACfE,IACEA,IACEC,SACEJ,YAAYZ,qBADd,EAEEU,WAFF,CADF,EAKEM,SACEJ,YAAYX,sBADd,EAEEiB,eAAeP,IAAf,CAFF,CALF,CADF,EAWEC,YAAYV,cAXd,CADe,CAAjB;;AAgBA;AACA,UAAIqB,YAAYV,QACdE,IACEA,IACEC,SACEJ,YAAYT,oBADd,EAEEO,WAFF,CADF,EAKEM,SACEJ,YAAYR,qBADd,EAEEc,eAAeP,IAAf,CAFF,CALF,CADF,EAWEC,YAAYP,aAXd,CADc,CAAhB;;AAgBA;AACA,UAAImB,OAAOL,KACTJ,IACEA,IACEC,SACEJ,YAAYN,oBADd,EAEEI,WAFF,CADF,EAKEM,SACEJ,YAAYL,qBADd,EAEEU,gBACEM,SADF,EAEEL,eAAeP,IAAf,CAFF,CAFF,CALF,CADF,EAcEC,YAAYJ,aAdd,CADS,CAAX;;AAmBA;AACA;AACA,aAAOO,IACLE,gBACEF,IACEK,QAAQE,WAAWG,IAAnB,EAAyBH,WAAWI,OAApC,CADF,EAEEL,cAAcC,UAAd,CAFF,CADF,EAKEE,IALF,CADK,EAQLP,gBACEC,eAAeP,IAAf,CADF,EAEEW,UAFF,CARK,CAAP;AAaD;;;;;;kBApHkBzB,G","file":"gru.js","sourcesContent":["import Matrix from './matrix';\nimport RNN from './rnn';\nimport RandomMatrix from './matrix/random-matrix';\n\nexport default class GRU extends RNN {\n  getModel(hiddenSize, prevSize) {\n    return {\n      // update Gate\n      //wzxh\n      updateGateInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wzhh\n      updateGateHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bz\n      updateGateBias: new Matrix(hiddenSize, 1),\n\n      // reset Gate\n      //wrxh\n      resetGateInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wrhh\n      resetGateHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //br\n      resetGateBias: new Matrix(hiddenSize, 1),\n\n      // cell write parameters\n      //wcxh\n      cellWriteInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wchh\n      cellWriteHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bc\n      cellWriteBias: new Matrix(hiddenSize, 1)\n    };\n  }\n\n  /**\n   *\n   * @param {Equation} equation\n   * @param {Matrix} inputMatrix\n   * @param {Number} size\n   * @param {Object} hiddenLayer\n   * @returns {Matrix}\n   */\n  getEquation(equation, inputMatrix, size, hiddenLayer) {\n    let sigmoid = equation.sigmoid.bind(equation);\n    let add = equation.add.bind(equation);\n    let multiply = equation.multiply.bind(equation);\n    let multiplyElement = equation.multiplyElement.bind(equation);\n    let previousResult = equation.previousResult.bind(equation);\n    let tanh = equation.tanh.bind(equation);\n    let allOnes = equation.allOnes.bind(equation);\n    let cloneNegative = equation.cloneNegative.bind(equation);\n\n    // update gate\n    let updateGate = sigmoid(\n      add(\n        add(\n          multiply(\n            hiddenLayer.updateGateInputMatrix,\n            inputMatrix\n          ),\n          multiply(\n            hiddenLayer.updateGateHiddenMatrix,\n            previousResult(size)\n          )\n        ),\n        hiddenLayer.updateGateBias\n      )\n    );\n\n    // reset gate\n    let resetGate = sigmoid(\n      add(\n        add(\n          multiply(\n            hiddenLayer.resetGateInputMatrix,\n            inputMatrix\n          ),\n          multiply(\n            hiddenLayer.resetGateHiddenMatrix,\n            previousResult(size)\n          )\n        ),\n        hiddenLayer.resetGateBias\n      )\n    );\n\n    // cell\n    let cell = tanh(\n      add(\n        add(\n          multiply(\n            hiddenLayer.cellWriteInputMatrix,\n            inputMatrix\n          ),\n          multiply(\n            hiddenLayer.cellWriteHiddenMatrix,\n            multiplyElement(\n              resetGate,\n              previousResult(size)\n            )\n          )\n        ),\n        hiddenLayer.cellWriteBias\n      )\n    );\n\n    // compute hidden state as gated, saturated cell activations\n    // negate updateGate\n    return add(\n      multiplyElement(\n        add(\n          allOnes(updateGate.rows, updateGate.columns),\n          cloneNegative(updateGate)\n        ),\n        cell\n      ),\n      multiplyElement(\n        previousResult(size),\n        updateGate\n      )\n    );\n  }\n}\n"]}
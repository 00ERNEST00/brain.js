{"version":3,"sources":["../../../src/recurrent/matrix/multiply-b.js"],"names":["multiplyB","product","left","right","leftRows","rows","leftColumns","columns","rightColumns","leftRow","leftRowBase","rightRowBase","rightColumn","leftColumn","rightColumnBase","rightRow","backPropagateValue","recurrence","weights"],"mappings":";;;;;kBAMwBA,S;AANxB;;;;;;AAMe,SAASA,SAAT,CAAmBC,OAAnB,EAA4BC,IAA5B,EAAkCC,KAAlC,EAAyC;AACtD,MAAIC,WAAWF,KAAKG,IAApB;AACA,MAAIC,cAAcJ,KAAKK,OAAvB;AACA,MAAIC,eAAeL,MAAMI,OAAzB;;AAEA;AACA,OAAI,IAAIE,UAAU,CAAlB,EAAqBA,UAAUL,QAA/B,EAAyCK,SAAzC,EAAoD;AAClD,QAAMC,cAAcJ,cAAcG,OAAlC;AACA,QAAME,eAAeH,eAAeC,OAApC;AACA;AACA,SAAI,IAAIG,cAAc,CAAtB,EAAyBA,cAAcJ,YAAvC,EAAqDI,aAArD,EAAoE;;AAElE;AACA,WAAI,IAAIC,aAAa,CAArB,EAAwBA,aAAaP,WAArC,EAAkDO,YAAlD,EAAgE;AAC9D,YAAMC,kBAAkBN,eAAeK,UAAvC;AACA,YAAMJ,WAAUC,cAAcG,UAA9B;AACA,YAAME,WAAWD,kBAAkBF,WAAnC;AACA,YAAMI,qBAAqBf,QAAQgB,UAAR,CAAmBN,eAAeC,WAAlC,CAA3B;AACAV,aAAKe,UAAL,CAAgBR,QAAhB,KAA4BN,MAAMe,OAAN,CAAcH,QAAd,IAA0BC,kBAAtD;AACAb,cAAMc,UAAN,CAAiBF,QAAjB,KAA8Bb,KAAKgB,OAAL,CAAaT,QAAb,IAAwBO,kBAAtD;AACD;AACF;AACF;AACF","file":"multiply-b.js","sourcesContent":["/**\n * multiplies {from} recurrence to {left} and {right}\n * @param {Matrix} product\n * @param {Matrix} left\n * @param {Matrix} right\n */\nexport default function multiplyB(product, left, right) {\n  let leftRows = left.rows;\n  let leftColumns = left.columns;\n  let rightColumns = right.columns;\n\n  // loop over rows of left\n  for(let leftRow = 0; leftRow < leftRows; leftRow++) {\n    const leftRowBase = leftColumns * leftRow;\n    const rightRowBase = rightColumns * leftRow;\n    // loop over cols of right\n    for(let rightColumn = 0; rightColumn < rightColumns; rightColumn++) {\n\n      //loop over columns of left\n      for(let leftColumn = 0; leftColumn < leftColumns; leftColumn++) {\n        const rightColumnBase = rightColumns * leftColumn;\n        const leftRow = leftRowBase + leftColumn;\n        const rightRow = rightColumnBase + rightColumn;\n        const backPropagateValue = product.recurrence[rightRowBase + rightColumn];\n        left.recurrence[leftRow] += right.weights[rightRow] * backPropagateValue;\n        right.recurrence[rightRow] += left.weights[leftRow] * backPropagateValue;\n      }\n    }\n  }\n}\n"]}
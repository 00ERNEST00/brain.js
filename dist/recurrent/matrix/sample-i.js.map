{"version":3,"sources":["../../../src/recurrent/matrix/sample-i.js"],"names":["sampleI","m","r","x","i","w","weights","isNaN","Error"],"mappings":";;;;;kBAOwBA,O;;AAPxB;;AAEA;;;;;AAKe,SAASA,OAAT,CAAiBC,CAAjB,EAAoB;AACjC;AACA;AACA,MAAIC,IAAI,qBAAQ,CAAR,EAAW,CAAX,CAAR;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,IAAIJ,EAAEK,OAAV;;AAEA,MAAIC,MAAMF,EAAE,CAAF,CAAN,CAAJ,EAAiB;AACf,UAAM,IAAIG,KAAJ,CAAU,KAAV,CAAN;AACD;;AAED,SAAO,IAAP,EAAa;AACXL,SAAKE,EAAED,CAAF,CAAL;AACA,QAAGD,IAAID,CAAP,EAAU;AACR,aAAOE,CAAP;AACD;AACDA;AACD;AACF","file":"sample-i.js","sourcesContent":["import { randomF } from '../../utilities/random';\n\n/**\n *\n * @param {Matrix} m\n * @returns {number}\n */\nexport default function sampleI(m) {\n  // sample argmax from w, assuming w are\n  // probabilities that sum to one\n  let r = randomF(0, 1);\n  let x = 0;\n  let i = 0;\n  let w = m.weights;\n\n  if (isNaN(w[0])) {\n    throw new Error('NaN');\n  }\n\n  while (true) {\n    x += w[i];\n    if(x > r) {\n      return i;\n    }\n    i++;\n  }\n}"]}
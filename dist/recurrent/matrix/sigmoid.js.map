{"version":3,"sources":["../../../src/recurrent/matrix/sigmoid.js"],"names":["sigmoid","into","m","i","max","weights","length","Math","exp","recurrence","sig","x"],"mappings":";;;;;kBAIwBA,O;AAJxB;;;;AAIe,SAASA,OAAT,CAAiBC,IAAjB,EAAuBC,CAAvB,EAA0B;AACvC;AACA,OAAI,IAAIC,IAAE,CAAN,EAASC,MAAMF,EAAEG,OAAF,CAAUC,MAA7B,EAAqCH,IAAIC,GAAzC,EAA8CD,GAA9C,EAAmD;AACjDF,SAAKI,OAAL,CAAaF,CAAb,IAAkB,KAAM,IAAII,KAAKC,GAAL,CAAS,CAACN,EAAEG,OAAF,CAAUF,CAAV,CAAV,CAAV,CAAlB;AACAF,SAAKQ,UAAL,CAAgBN,CAAhB,IAAqB,CAArB;AACD;AACF;;AAGD,SAASO,GAAT,CAAaC,CAAb,EAAgB;AACd;AACA,SAAO,KAAK,IAAIJ,KAAKC,GAAL,CAAS,CAACG,CAAV,CAAT,CAAP;AACD","file":"sigmoid.js","sourcesContent":["/**\n * @param {Matrix} into\n * @param {Matrix} m\n */\nexport default function sigmoid(into, m) {\n  // sigmoid nonlinearity\n  for(let i=0, max = m.weights.length; i < max; i++) {\n    into.weights[i] = 1 / ( 1 + Math.exp(-m.weights[i]));\n    into.recurrence[i] = 0;\n  }\n}\n\n\nfunction sig(x) {\n  // helper function for computing sigmoid\n  return 1 / (1 + Math.exp(-x));\n}"]}
{"version":3,"sources":["../../../src/recurrent/matrix/index.js"],"names":["Matrix","rows","columns","weights","recurrence","fill","row","col","ix","length","Error","v","slice","json","matrix","i","max"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA;;;;;;IAMqBA,M;AACnB,kBAAYC,IAAZ,EAAkBC,OAAlB,EAA2B;AAAA;;AACzB,QAAI,OAAOD,IAAP,KAAgB,WAApB,EAAiC;AACjC,QAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoC;;AAEpC,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,UAAL,GAAkB,IAAlB;AACA,SAAKC,IAAL;AACD;;;;2BAEM;AACL,WAAKF,OAAL,GAAe,qBAAM,KAAKF,IAAL,GAAY,KAAKC,OAAvB,CAAf;AACA,WAAKE,UAAL,GAAkB,qBAAM,KAAKH,IAAL,GAAY,KAAKC,OAAvB,CAAlB;AACD;;AAED;;;;;;;;;+BAMWI,G,EAAKC,G,EAAK;AACnB;AACA;AACA,UAAIC,KAAM,KAAKN,OAAL,GAAeI,GAAhB,GAAuBC,GAAhC;AACA,UAAIC,KAAK,CAAL,IAAUA,MAAM,KAAKL,OAAL,CAAaM,MAAjC,EAAyC,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACzC,aAAO,KAAKP,OAAL,CAAaK,EAAb,CAAP;AACD;;AAED;;;;;;;;;;+BAOWF,G,EAAKC,G,EAAKI,C,EAAG;AACtB;AACA,UAAIH,KAAM,KAAKN,OAAL,GAAeI,GAAhB,GAAuBC,GAAhC;AACA,UAAIC,KAAK,CAAL,IAAUA,MAAM,KAAKL,OAAL,CAAaM,MAAjC,EAAyC,MAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACzC,WAAKP,OAAL,CAAaK,EAAb,IAAmBG,CAAnB;AACA,aAAO,IAAP;AACD;;AAED;;;;;;;6BAIS;AACP,aAAO;AACLV,cAAM,KAAKA,IADN;AAELC,iBAAS,KAAKA,OAFT;AAGLC,iBAAS,KAAKA,OAAL,CAAaS,KAAb,CAAmB,CAAnB;AAHJ,OAAP;AAKD;;;6BAEeC,I,EAAM;AACpB,UAAIC,SAAS,IAAId,MAAJ,CAAWa,KAAKZ,IAAhB,EAAsBY,KAAKX,OAA3B,CAAb;AACA,WAAK,IAAIa,IAAI,CAAR,EAAWC,MAAMH,KAAKZ,IAAL,GAAYY,KAAKX,OAAvC,EAAgDa,IAAIC,GAApD,EAAyDD,GAAzD,EAA8D;AAC5DD,eAAOX,OAAP,CAAeY,CAAf,IAAoBF,KAAKV,OAAL,CAAaY,CAAb,CAApB,CAD4D,CACvB;AACtC;AACD,aAAOD,MAAP;AACD;;;;;;kBAhEkBd,M","file":"index.js","sourcesContent":["import zeros from '../../utilities/zeros';\nimport random from '../random';\n\n/**\n * A matrix\n * @param {Number} [rows]\n * @param {Number} [columns]\n * @constructor\n */\nexport default class Matrix {\n  constructor(rows, columns) {\n    if (typeof rows === 'undefined') return;\n    if (typeof columns === 'undefined') return;\n\n    this.rows = rows;\n    this.columns = columns;\n    this.weights = null;\n    this.recurrence = null;\n    this.fill();\n  }\n\n  fill() {\n    this.weights = zeros(this.rows * this.columns);\n    this.recurrence = zeros(this.rows * this.columns);\n  }\n\n  /**\n   *\n   * @param {Number} row\n   * @param {Number} col\n   * @returns {Float64Array|Array}\n   */\n  getWeights(row, col) {\n    // slow but careful accessor function\n    // we want row-major order\n    let ix = (this.columns * row) + col;\n    if (ix < 0 && ix >= this.weights.length) throw new Error('get accessor is skewed');\n    return this.weights[ix];\n  }\n\n  /**\n   *\n   * @param {Number} row\n   * @param {Number} col\n   * @param v\n   * @returns {Matrix}\n   */\n  setWeights(row, col, v) {\n    // slow but careful accessor function\n    let ix = (this.columns * row) + col;\n    if (ix < 0 && ix >= this.weights.length) throw new Error('set accessor is skewed');\n    this.weights[ix] = v;\n    return this;\n  }\n\n  /**\n   *\n   * @returns {{rows: *, columns: *, weights: Array}}\n   */\n  toJSON() {\n    return {\n      rows: this.rows,\n      columns: this.columns,\n      weights: this.weights.slice(0)\n    };\n  }\n\n  static fromJSON(json) {\n    let matrix = new Matrix(json.rows, json.columns);\n    for (let i = 0, max = json.rows * json.columns; i < max; i++) {\n      matrix.weights[i] = json.weights[i]; // copy over weights\n    }\n    return matrix;\n  }\n}\n"]}
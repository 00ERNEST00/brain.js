{"version":3,"sources":["../../../src/recurrent/matrix/equation.js"],"names":["Equation","inputRow","states","previousResults","previousResultInputs","size","product","self","i","parseInt","length","push","left","previousResultsIndex","previousResult","backpropagationFn","m","Error","weights","right","rows","columns","forwardFn","add","allOnes","cloneNegative","iForward","iBackpropagate","rowIndex","state","max","hasOwnProperty"],"mappings":"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","file":"equation.js","sourcesContent":["import Matrix from './';\nimport OnesMatrix from './ones-matrix';\nimport copy from './copy';\nimport cloneNegative from './clone-negative';\nimport add from './add';\nimport addB from './add-b';\nimport allOnes from './all-ones';\nimport multiply from './multiply';\nimport multiplyB from './multiply-b';\nimport multiplyElement from './multiply-element';\nimport multiplyElementB from './multiply-element-b';\nimport relu from './relu';\nimport reluB from './relu-b';\nimport rowPluck from './row-pluck';\nimport rowPluckB from './row-pluck-b';\nimport sigmoid from './sigmoid';\nimport sigmoidB from './sigmoid-b';\nimport tanh from './tanh';\nimport tanhB from './tanh-b';\n\nexport default class Equation {\n  constructor() {\n    this.inputRow = 0;\n    this.states = [];\n    this.previousResults = [];\n    this.previousResultInputs = [];\n  }\n\n  /**\n   *\n   * @param {Number} size\n   * @returns {Matrix}\n   */\n  previousResult(size) {\n    let product = new Matrix(size, 1);\n    let self = this;\n    let i = parseInt(this.previousResults.length);\n    this.previousResultInputs.push(product);\n\n    this.states.push({\n      product: product,\n      get left() {\n        product.previousResultsIndex = i;\n        product.previousResult = true;\n        return self.previousResults[i];\n      },\n      backpropagationFn: copy\n    });\n\n    return product;\n  }\n\n  result(m) {\n    this.previousResults.push(m);\n    if (this.previousResults.length !== this.previousResultInputs.length) {\n      throw new Error('previousResults does not match size of previousResultInputs');\n    }\n    if (m.weights.length !== this.previousResultInputs[this.previousResultInputs.length - 1].weights.length) {\n      throw new Error('misaligned matrices');\n    }\n    return m;\n  }\n\n  /**\n   * connects two matrices together by add\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  add(left, right) {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n    let product = new Matrix(left.rows, left.columns);\n    this.states.push({\n      left: left,\n      right: right,\n      product: product,\n      forwardFn: add,\n      backpropagationFn: addB\n    });\n    return product;\n  }\n\n  /**\n   *\n   * @param {Number} rows\n   * @param {Number} columns\n   * @returns {Matrix}\n   */\n  allOnes(rows, columns) {\n    let product = new Matrix(rows, columns);\n    this.states.push({\n      left: product,\n      product: product,\n      forwardFn: allOnes\n    });\n    return product;\n  }\n\n  /**\n   *\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  cloneNegative(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: cloneNegative\n    });\n    return product;\n  }\n\n  /**\n   * connects two matrices together by subtract\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  subtract(left, right) {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n    return this.add(this.add(this.allOnes(left.rows, left.columns), this.cloneNegative(left)), right);\n  }\n\n  /**\n   * connects two matrices together by multiply\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  multiply(left, right) {\n    if (left.columns !== right.rows) {\n      throw new Error('misaligned matrices');\n    }\n    let product = new Matrix(left.rows, right.columns);\n    this.states.push({\n      left: left,\n      right: right,\n      product: product,\n      forwardFn: multiply,\n      backpropagationFn: multiplyB\n    });\n    return product;\n  }\n\n  /**\n   * connects two matrices together by multiplyElement\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  multiplyElement(left, right) {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n    let product = new Matrix(left.rows, left.columns);\n    this.states.push({\n      left: left,\n      right: right,\n      product: product,\n      forwardFn: multiplyElement,\n      backpropagationFn: multiplyElementB\n    });\n    return product;\n  }\n\n  /**\n   * connects a matrix to relu\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  relu(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: relu,\n      backpropagationFn: reluB\n    });\n    return product;\n  }\n\n  /**\n   * connects a matrix via a row\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  inputMatrixToRow(m) {\n    let self = this;\n    let product = new Matrix(m.columns, 1);\n    this.states.push({\n      left: m,\n      get right () {\n        return self.inputRow;\n      },\n      product: product,\n      forwardFn: rowPluck,\n      backpropagationFn: rowPluckB\n    });\n    return product;\n  }\n\n  /**\n   * connects a matrix to sigmoid\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  sigmoid(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: sigmoid,\n      backpropagationFn: sigmoidB\n    });\n    return product;\n  }\n\n  /**\n   * connects a matrix to tanh\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  tanh(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: tanh,\n      backpropagationFn: tanhB\n    });\n    return product;\n  }\n\n  /**\n   *\n   * @param m\n   * @returns {Matrix}\n   */\n  observe(m) {\n    let iForward = 0;\n    let iBackpropagate = 0;\n    this.states.push({\n      forwardFn: function() {\n        iForward++;\n      },\n      backpropagationFn: function() {\n        iBackpropagate++;\n      }\n    });\n    return m;\n  }\n\n  /**\n   * @patam {Number} [rowIndex]\n   * @output {Matrix}\n   */\n  run(rowIndex) {\n    this.inputRow = rowIndex || 0;\n\n    let state;\n    for (let i = 0, max = this.states.length; i < max; i++) {\n      state = this.states[i];\n      if (!state.hasOwnProperty('forwardFn')) {\n        continue;\n      }\n      state.forwardFn(state.product, state.left, state.right);\n    }\n\n    return state.product;\n  }\n\n  /**\n   * @patam {Number} [rowIndex]\n   * @output {Matrix}\n   */\n  runBackpropagate(rowIndex) {\n    this.inputRow = rowIndex || 0;\n\n    let i = this.states.length;\n    let state;\n    while (i-- > 0) {\n      state = this.states[i];\n      if (!state.hasOwnProperty('backpropagationFn')) {\n        continue;\n      }\n      state.backpropagationFn(state.product, state.left, state.right);\n    }\n\n    return state.product;\n  }\n}\n"]}
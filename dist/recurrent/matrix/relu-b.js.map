{"version":3,"sources":["../../../src/recurrent/matrix/relu-b.js"],"names":["reluB","from","m","i","max","weights","length","recurrence"],"mappings":";;;;;kBAKwBA,K;AALxB;;;;;AAKe,SAASA,KAAT,CAAeC,IAAf,EAAqBC,CAArB,EAAwB;AACrC,OAAI,IAAIC,IAAI,CAAR,EAAWC,MAAMF,EAAEG,OAAF,CAAUC,MAA/B,EAAuCH,IAAIC,GAA3C,EAAgDD,GAAhD,EAAqD;AACnDD,MAAEK,UAAF,CAAaJ,CAAb,KAAmBD,EAAEG,OAAF,CAAUF,CAAV,IAAe,CAAf,GAAmBF,KAAKM,UAAL,CAAgBJ,CAAhB,CAAnB,GAAwC,CAA3D;AACD;AACF","file":"relu-b.js","sourcesContent":["/**\n * adds {from} recurrence to {m} recurrence when {m} weights are above other a threshold of 0\n * @param {Matrix} from\n * @param {Matrix} m\n */\nexport default function reluB(from, m) {\n  for(let i = 0, max = m.weights.length; i < max; i++) {\n    m.recurrence[i] += m.weights[i] > 0 ? from.recurrence[i] : 0;\n  }\n}\n"]}
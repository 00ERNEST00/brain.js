{"version":3,"sources":["../../src/utilities/convolution.js"],"names":["Convolution","width","height","inWidth","inHeight","depth","stride","padding","settings","Object","assign","defaults","runKernel","runBackpropagateKernel","filters","filterDeltas","biasDeltas","biases","inputDeltas","outputs","outWidth","Math","floor","outHeight","i","push","Float32Array3D","build","buildRunKernel","buildRunBackpropagateKernel","fnBody","iterateStructure","eachFilter","beforeConvolve","vIndex","ax","ay","d","eachConvolve","filterIndex","inputIndex","afterConvolve","Function","join","inputs","options","filter","y","outerY","x","outerX","filterY","innerY","filterX","innerX","filterDepth","Float32Array","c","console","log","toString"],"mappings":"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","file":"convolution.js","sourcesContent":["export default class Convolution {\n  static get defaults() {\n    return {\n      width: 9,\n      height: null,\n      inWidth: 9,\n      inHeight: 9,\n      depth: 3,\n      stride: 3,\n      padding: 0\n    };\n  }\n\n  constructor(settings) {\n    Object.assign(this, Convolution.defaults, settings);\n    this.runKernel = null;\n    this.runBackpropagateKernel = null;\n    this.filters = [];\n    this.filterDeltas = [];\n    this.biasDeltas = [];\n    this.biases = [];\n    this.inputDeltas = [];\n    this.outputs = [];\n\n    if (this.height === null) {\n      this.height = this.width;\n    }\n    this.outWidth = Math.floor((this.width + this.padding * 2 - this.width) / this.stride + 1);\n    this.outHeight = Math.floor((this.height + this.padding * 2 - this.height) / this.stride + 1);\n\n    for(let i = 0; i < this.depth; i++) {\n      this.filters.push(new Float32Array3D(this.width, this.height, this.depth));\n      this.filterDeltas.push(new Float32Array3D(this.width, this.height, this.depth));\n    }\n\n    this.build();\n  }\n\n  build() {\n    this.buildRunKernel();\n    this.buildRunBackpropagateKernel();\n  }\n\n  buildRunKernel() {\n    let fnBody = ['var weights, filterWeights'];\n    this.iterateStructure({\n      eachFilter: (i) => {\n        fnBody.push(`filterWeights = filters[${ i }]`);\n      },\n      beforeConvolve: (vIndex, ax, ay, d) => {\n        fnBody.push('weight = 0');\n      },\n      eachConvolve: (filterIndex, inputIndex) => {\n        this.inputDeltas[inputIndex] = 0;\n        fnBody.push(\n          `weight += filterWeights[${ filterIndex }] * inputs[${ inputIndex }]`,\n          `inputDeltas[${ inputIndex }] = 0`\n        );\n      },\n      afterConvolve: (vIndex, ax, ay, d) => {\n        this.biases[d] = 0;\n        this.outputs[vIndex] = 0;\n        fnBody.push(\n          `weight += biases[${ d }]`,\n          `outputs[${ vIndex }] = weight`\n        );\n      }\n    });\n\n    this.runKernel = new Function(\n      'filters',\n      'inputs',\n      'outputs',\n      'biases', fnBody.join(';\\n  ') + ';');\n  }\n\n  run(inputs) {\n    this.runKernel(this.filters, inputs, this.outputs, this.biases);\n    return this.outputs;\n  }\n\n  buildRunBackpropagateKernel() {\n    let fnBody = ['var chainGrad, filterWeights'];\n    this.iterateStructure({\n      eachFilter: (d) => {\n        fnBody.push(`filterWeights = filters[${ d }]`);\n      },\n      beforeConvolve: (vIndex, ax, ay, d) => {\n        fnBody.push(`chainGrad = chainGrads[${ vIndex }]`);\n      },\n      eachConvolve: (filterIndex, inputIndex) => {\n        fnBody.push(\n          `filterDeltas[${ filterIndex }] += inputs[${ inputIndex }] * chainGrad`,\n          `inputDeltas[${ inputIndex }] += filterWeights[${ filterIndex }] * chainGrad`\n        );\n      },\n      afterConvolve: (vIndex, ax, ay, d) => {\n        this.biasDeltas[d] = 0;\n        fnBody.push(`biasDeltas[${ d }] += chainGrad`);\n      }\n    });\n\n    this.runBackpropagateKernel = new Function(\n      'filters',\n      'filterDeltas',\n      'inputs',\n      'inputDeltas',\n      'biasDeltas',\n      'chainGrads', fnBody.join(';\\n  ') + ';');\n  }\n\n  runBackpropagate(inputs) {\n    this.runBackpropagateKernel(this.filters, this.filterDeltas, inputs, this.inputDeltas, this.biasDeltas);\n  }\n\n  iterateStructure(options) {\n    const {\n      width,\n      height,\n      outWidth,\n      outHeight,\n      depth,\n      stride,\n      padding } = this;\n\n    const {\n      eachFilter,\n      beforeConvolve,\n      eachConvolve,\n      afterConvolve } = options;\n\n    for (let d = 0; d < depth; d++) {\n      eachFilter(d);\n      const filter = this.filters[d];\n      let y = -padding;\n      for (let outerY = 0; outerY < outHeight; y += stride, outerY++) {\n        let x = -padding;\n        for (let outerX = 0; outerX < outWidth; x += stride, outerX++) {\n          // convolve centered at this particular location\n          const vIndex = (width * outerY) + x * depth + d;\n          beforeConvolve(vIndex, outerY, outerX, d);\n          for (let filterY = 0; filterY < filter.height; filterY++) {\n            // coordinates in the original input array coordinates\n            let innerY = y + filterY;\n            for (let filterX = 0; filterX < filter.width; filterX++) {\n              let innerX = x + filterX;\n              if (innerY >= 0 && innerY < filter.height && innerX >= 0 && innerX < width) {\n                for (let filterDepth = 0; filterDepth < filter.depth; filterDepth++) {\n                  eachConvolve(\n                    ((filter.width * filterY) + filterX) * filter.depth + filterDepth,\n                    ((width * innerY) + innerX) * filter.depth + filterDepth\n                  );\n                }\n              }\n            }\n          }\n          afterConvolve(vIndex, outerX, outerY, d);\n        }\n      }\n    }\n  }\n}\n\nclass Float32Array3D extends Float32Array {\n  constructor(width, height, depth) {\n    super(width * height * depth);\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n  }\n}\n\n\nvar c = new Convolution();\nc.build();\nconsole.log(c.runKernel.toString());"]}
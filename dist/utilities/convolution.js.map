{"version":3,"sources":["../../src/utilities/convolution.js"],"names":["Convolution","settings","Object","assign","defaults","runKernel","runBackpropagateKernel","filters","filterDeltas","biasDeltas","biases","inputDeltas","outputs","height","width","outWidth","Math","floor","padding","stride","outHeight","i","depth","push","Float32Array3D","build","buildRunKernel","buildRunBackpropagateKernel","Function","runBody","inputs","runBackPropagateBody","options","eachFilter","beforeConvolve","eachConvolve","afterConvolve","d","filter","y","outerY","x","outerX","outputIndex","filterY","innerY","filterX","innerX","filterDepth","fnBody","iterate","ax","ay","filterIndex","inputIndex","join","vIndex","inWidth","inHeight","Float32Array"],"mappings":"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","file":"convolution.js","sourcesContent":["export default class Convolution {\n  constructor(settings) {\n    Object.assign(this, Convolution.defaults, settings);\n    this.runKernel = null;\n    this.runBackpropagateKernel = null;\n    this.filters = [];\n    this.filterDeltas = [];\n    this.biasDeltas = [];\n    this.biases = [];\n    this.inputDeltas = [];\n    this.outputs = [];\n\n    if (this.height === null) {\n      this.height = this.width;\n    }\n    this.outWidth = Math.floor((this.width + this.padding * 2 - this.width) / this.stride + 1);\n    this.outHeight = Math.floor((this.height + this.padding * 2 - this.height) / this.stride + 1);\n\n    for(let i = 0; i < this.depth; i++) {\n      this.filters.push(new Float32Array3D(this.width, this.height, this.depth));\n      this.filterDeltas.push(new Float32Array3D(this.width, this.height, this.depth));\n    }\n\n    this.build();\n  }\n\n  build() {\n    this.buildRunKernel();\n    this.buildRunBackpropagateKernel();\n  }\n\n  get runBody() {\n    let fnBody = [\n      'var weights',\n      'var filterWeights'\n    ];\n    this.iterate({\n      eachFilter: (i) => {\n        fnBody.push(`filterWeights = filters[${ i }]`);\n      },\n      beforeConvolve: (outputIndex, ax, ay, d) => {\n        fnBody.push('weight = 0');\n      },\n      eachConvolve: (filterIndex, inputIndex) => {\n        this.inputDeltas[inputIndex] = 0;\n        fnBody.push(\n          `weight += filterWeights[${ filterIndex }] * inputs[${ inputIndex }]`,\n          `inputDeltas[${ inputIndex }] = 0`\n        );\n      },\n      afterConvolve: (outputIndex, ax, ay, d) => {\n        this.biases[d] = 0;\n        this.outputs[outputIndex] = 0;\n        fnBody.push(\n          `weight += biases[${ d }]`,\n          `outputs[${ outputIndex }] = weight`\n            `outputDeltas[${ outputIndex }] = 0`\n        );\n      }\n    });\n    return fnBody.join(';\\n  ') + ';';\n  }\n\n  buildRunKernel() {\n    this.runKernel = new Function(\n      'convolutionFilters',\n      'convolutionInputs',\n      'convolutionOutputs',\n      'convolutionBiases', this.runBody);\n  }\n\n  run(inputs) {\n    this.runKernel(this.filters, inputs, this.outputs, this.biases);\n    return this.outputs;\n  }\n\n  get runBackPropagateBody() {\n    let fnBody = [\n      'var convolutionChainGradient',\n      'var convolutionFilterWeights'\n    ];\n    this.iterate({\n      eachFilter: (d) => {\n        fnBody.push(`convolutionFilterWeights = convolutionFilters[${ d }]`);\n      },\n      beforeConvolve: (vIndex, ax, ay, d) => {\n        fnBody.push(`convolutionChainGradient = convolutionChainGradients[${ vIndex }]`);\n      },\n      eachConvolve: (filterIndex, inputIndex) => {\n        fnBody.push(\n          `convolutionFilterDeltas[${ filterIndex }] += convolutionInputs[${ inputIndex }] * convolutionChainGradient`,\n          `convolutionInputDeltas[${ inputIndex }] += convolutionFilterWeights[${ filterIndex }] * convolutionChainGradient`\n        );\n      },\n      afterConvolve: (vIndex, ax, ay, d) => {\n        this.biasDeltas[d] = 0;\n        fnBody.push(`convolutionBiasDeltas[${ d }] += convolutionChainGradient`);\n      }\n    });\n    return fnBody.join(';\\n  ') + ';';\n  }\n\n  buildRunBackpropagateKernel() {\n    this.runBackpropagateKernel = new Function(\n      'convolutionFilters',\n      'convolutionFilterDeltas',\n      'convolutionInputs',\n      'convolutionInputDeltas',\n      'convolutionBiasDeltas',\n      'convolutionChainGradients', this.runBackPropagateBody);\n  }\n\n  runBackpropagate(inputs) {\n    this.runBackpropagateKernel(this.filters, this.filterDeltas, inputs, this.inputDeltas, this.biasDeltas);\n  }\n\n  iterate(options) {\n    const {\n      width,\n      height,\n      outWidth,\n      outHeight,\n      depth,\n      stride,\n      padding } = this;\n\n    const {\n      eachFilter,\n      beforeConvolve,\n      eachConvolve,\n      afterConvolve } = options;\n\n    for (let d = 0; d < depth; d++) {\n      eachFilter(d);\n      const filter = this.filters[d];\n      let y = -padding;\n      for (let outerY = 0; outerY < outHeight; y += stride, outerY++) {\n        let x = -padding;\n        for (let outerX = 0; outerX < outWidth; x += stride, outerX++) {\n          // convolve centered at this particular location\n          const outputIndex = (width * outerY) + x * depth + d;\n          beforeConvolve(outputIndex, outerY, outerX, d);\n          for (let filterY = 0; filterY < filter.height; filterY++) {\n            // coordinates in the original input array coordinates\n            let innerY = y + filterY;\n            for (let filterX = 0; filterX < filter.width; filterX++) {\n              let innerX = x + filterX;\n              if (\n                innerY < 0\n                && innerY >= filter.height\n                && innerX < 0\n                && innerX >= width\n              ) continue;\n\n              for (let filterDepth = 0; filterDepth < filter.depth; filterDepth++) {\n                eachConvolve(\n                  ((filter.width * filterY) + filterX) * filter.depth + filterDepth,\n                  ((width * innerY) + innerX) * filter.depth + filterDepth\n                );\n              }\n            }\n          }\n          afterConvolve(outputIndex, outerX, outerY, d);\n        }\n      }\n    }\n  }\n}\n\nConvolution.defaults = {\n  width: 9,\n  height: null,\n  inWidth: 9,\n  inHeight: 9,\n  depth: 3,\n  stride: 3,\n  padding: 0\n};\n\nclass Float32Array3D extends Float32Array {\n  constructor(width, height, depth) {\n    super(width * height * depth);\n    this.width = width;\n    this.height = height;\n    this.depth = depth;\n  }\n}\n"]}
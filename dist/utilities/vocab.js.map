{"version":3,"sources":["../../src/utilities/vocab.js"],"names":["Vocab","values","maxThreshold","indexTable","characterTable","characters","buildCharactersFromIterable","buildTables","tempCharactersTable","vocabIndex","vocabLength","length","hasOwnProperty","characterIndex","charactersLength","character","push","value","result","i","max","index","Error","value1","value2","toIndexes","split","concat","indices","toCharacters","join","special","vocabVariableName","toString","replace","toIndexesInputOutput","String","fromCharCode","vocab","allPrintable","addSpecial","string","prototype","Set","array","filter","v","a","indexOf","sort","json"],"mappings":"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","file":"vocab.js","sourcesContent":["/**\n *\n * @param {String[]|Number[]} values\n * @param maxThreshold\n * @constructor\n */\nexport default class Vocab {\n  constructor(values, maxThreshold = 0) {\n    if (typeof values === 'undefined') return;\n\n    this.values = values;\n    // go over all characters and keep track of all unique ones seen\n    // count up all characters\n    this.indexTable = {};\n    this.characterTable = {};\n    this.characters = [];\n    this.buildCharactersFromIterable(values);\n    this.buildTables(maxThreshold);\n  }\n\n  buildCharactersFromIterable(values) {\n    let tempCharactersTable = {};\n    for (let vocabIndex = 0, vocabLength = values.length; vocabIndex < vocabLength; vocabIndex++) {\n      let characters = values[vocabIndex];\n\n      if (characters.hasOwnProperty('length')) {\n        for (let characterIndex = 0, charactersLength = characters.length; characterIndex < charactersLength; characterIndex++) {\n          let character = characters[characterIndex];\n          if (tempCharactersTable.hasOwnProperty(character)) continue;\n          tempCharactersTable[character] = true;\n          this.characters.push(character);\n        }\n      } else {\n        let character = values[vocabIndex];\n        if (tempCharactersTable.hasOwnProperty(character)) continue;\n        tempCharactersTable[vocabIndex] = true;\n        this.characters.push(character);\n      }\n    }\n  }\n\n  buildTables(maxThreshold) {\n    // filter by count threshold and create pointers\n    let charactersLength = this.characters.length;\n    for(let characterIndex = 0; characterIndex < charactersLength; characterIndex++) {\n      let character = this.characters[characterIndex];\n      if(characterIndex >= maxThreshold) {\n        // add character to vocab\n        this.indexTable[character] = characterIndex;\n        this.characterTable[characterIndex] = character;\n      }\n    }\n  }\n\n  toIndexes(value, maxThreshold = 0) {\n    let result = [];\n    let indexTable = this.indexTable;\n\n    for (let i = 0, max = value.length; i < max; i++) {\n      let character = value[i];\n      let index = indexTable[character];\n      if (typeof index === 'undefined') {\n        throw new Error(`unrecognized character \"${ character }\"`);\n      }\n      if (index < maxThreshold) continue;\n      result.push(index);\n    }\n\n    return result;\n  }\n\n  toIndexesInputOutput(value1, value2 = null, maxThreshold = 0) {\n    let result;\n    if (typeof value1 === 'string') {\n      result = this.toIndexes(value1.split('').concat(['stop-input', 'start-output']), maxThreshold);\n    } else {\n      result = this.toIndexes(value1.concat(['stop-input', 'start-output']), maxThreshold);\n    }\n\n    if (value2 === null) return result;\n\n    if (typeof value2 === 'string') {\n      return result.concat(this.toIndexes(value2.split(''), maxThreshold));\n    } else {\n      return result.concat(this.toIndexes(value2, maxThreshold));\n    }\n  }\n\n  toCharacters(indices, maxThreshold = 0) {\n    let result = [];\n    let characterTable = this.characterTable;\n\n    for (let i = 0, max = indices.length; i < max; i++) {\n      let index = indices[i];\n      if (index < maxThreshold) continue;\n      let character = characterTable[index];\n      if (typeof character === 'undefined') {\n        throw new Error(`unrecognized index \"${ index }\"`);\n      }\n      result.push(character);\n    }\n\n    return result;\n  }\n\n  toString(indices, maxThreshold) {\n    return this.toCharacters(indices, maxThreshold).join('');\n  }\n\n  static allPrintable(maxThreshold, values = ['\\n']) {\n    for(let i = 32; i <= 126; i++) {\n      values.push(String.fromCharCode(i));\n    }\n    return new Vocab(values, maxThreshold);\n  }\n\n  static allPrintableInputOutput(maxThreshold, values = ['\\n']) {\n    const vocab = Vocab.allPrintable(maxThreshold, values);\n    vocab.addSpecial('stop-input');\n    vocab.addSpecial('start-output');\n    return vocab;\n  }\n\n  static fromStringInputOutput(string, maxThreshold) {\n    const values = String.prototype.concat(...new Set(string));\n    const vocab = new Vocab(values, maxThreshold);\n    vocab.addSpecial('stop-input');\n    vocab.addSpecial('start-output');\n    return vocab;\n  }\n\n  static fromArrayInputOutput(array, maxThreshold) {\n    const vocab = new Vocab(array.filter((v, i, a) => a.indexOf(v) === i).sort(), maxThreshold);\n    vocab.addSpecial('stop-input');\n    vocab.addSpecial('start-output');\n    return vocab;\n  }\n\n  static fromString(string, maxThreshold) {\n    const values = String.prototype.concat(...new Set(string));\n    return new Vocab(values, maxThreshold);\n  }\n\n  static fromJSON(json) {\n    const vocab = new Vocab();\n    vocab.indexTable = json.indexTable;\n    vocab.characterTable = json.characterTable;\n    vocab.values = json.values;\n    vocab.characters = json.characters;\n    return vocab;\n  }\n\n  addSpecial(special) {\n    let i = this.indexTable[special] = this.characters.length;\n    this.characterTable[i] = special;\n    this.characters.push(special);\n  }\n\n  toFunctionString(vocabVariableName) {\n    return `\n${ this.toIndexes.toString().replace('this', vocabVariableName) }\n${ this.toIndexesInputOutput.toString().replace('this', vocabVariableName) }\n${ this.toCharacters.toString().replace('this', vocabVariableName) }\n`;\n  }\n}\n"]}
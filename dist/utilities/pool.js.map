{"version":3,"sources":["../../src/utilities/pool.js"],"names":["Pool","options","Object","assign","defaults","height","width","outWidth","Math","floor","inWidth","padding","stride","outHeight","inHeight","switchX","depth","switchY","runKernel","runBackpropagateKernel","inputs","inputDeltas","outputs","outputDeltas","build","buildRunKernel","buildRunBackpropagateKernel","Function","runInputs","runBody","runBackpropagateInputs","runBackpropagateBody","settings","beforePool","eachPool","afterPool","d","x","outerX","y","outerY","filterX","filterY","innerY","innerX","fnBody","iterate","outputIndex","push","inputIndex","join"],"mappings":"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","file":"pool.js","sourcesContent":["import zeros from './zeros';\n\nexport default class Pool {\n  constructor(options) {\n    // required\n    Object.assign(this, Pool.defaults, options);\n    if (this.height === null) {\n      this.height = this.width;\n    }\n\n    // computed\n    this.outWidth = Math.floor((this.inWidth + this.padding * 2 - this.width) / this.stride + 1);\n    this.outHeight = Math.floor((this.inHeight + this.padding * 2 - this.height) / this.stride + 1);\n\n    // store switches for x,y coordinates for where the max comes from, for each output neuron\n    this.switchX = zeros(this.outWidth * this.outHeight * this.depth);\n    this.switchY = zeros(this.outWidth * this.outHeight * this.depth);\n    this.runKernel = null;\n    this.runBackpropagateKernel = null;\n    this.inputs = zeros(this.width * this.height);\n    this.inputDeltas = zeros(this.width * this.height);\n    this.outputs = zeros(this.outWidth * this.outHeight);\n    this.outputDeltas = zeros(this.outWidth * this.outHeight);\n    this.build();\n  }\n\n  build() {\n    this.buildRunKernel();\n    this.buildRunBackpropagateKernel();\n  }\n\n  get runBody() {\n    const fnBody = ['var switchIndex = 0'];\n    this.iterate({\n      beforePool: (outputIndex) => {\n        fnBody.push(\n          `var reluOutput = -99999`,\n          `var winX = -1`,\n          `var winY = -1`\n        );\n      },\n      eachPool: (inputIndex) => {\n        // perform max pooling and store pointers to where\n        // the max came from. This will speed up backprop\n        // and can help make nice visualizations in future\n        fnBody.push(\n          `var reluInput = reluInputs[${ inputIndex }]`,\n          `if (reluInput > reluOutput) {`,\n          `reluOutput = reluInput`,\n          `winX = innerX`,\n          `winY = innerY`,\n          `}`\n        );\n      },\n      afterPool: (outputIndex) => {\n        fnBody.push(\n          `switchX[switchIndex] = winX`,\n          `switchY[switchIndex] = winY`,\n          `reluOutputs[${ outputIndex }] = reluOutput`,\n          `reluOutputDeltas[${ outputIndex }] = 0`,\n          `switchIndex++`\n        );\n      }\n    });\n    return fnBody.join(';\\n  ') + ';'\n  }\n\n  buildRunKernel() {\n    this.runKernel = new Function(this.runInputs(), this.runBody);\n  }\n\n  runInputs() {\n    return [\n      'reluInputs',\n      'reluOutputs',\n      'switchX',\n      'switchY'\n    ];\n  }\n\n  run() {\n    this.runKernel(this.inputs, this.outputs, this.switchX, this.switchY);\n    return this.outputs;\n  }\n\n  get runBackpropagateBody() {\n    const fnBody = ['var switchIndex = 0'];\n    this.iterate({\n      beforePool: (outputIndex) => {\n        fnBody.push(`var outputDeltaXY = ((${ this.width } * switchY[switchIndex]) + switchX[switchIndex]) * ${ this.depth }`);\n      },\n      eachPool: (outputIndex, d) => {\n        fnBody.push(\n          `outputDeltas[outputDeltaXY + ${ d }] = outputs[${ outputIndex }]`,\n          `switchIndex++`\n        );\n      },\n      afterPool: (outputIndex) => {}\n    });\n    return fnBody.join(';\\n  ') + ';';\n  }\n\n  buildRunBackpropagateKernel() {\n    this.runKernel = new Function(this.runBackpropagateInputs(), this.runBackpropagateBody);\n  }\n\n  runBackpropagateInputs() {\n    return [\n      'inputs',\n      'outputs',\n      'switchX',\n      'switchY'\n    ];\n  }\n\n  runBackpropagate() {\n    this.runBackpropagateKernel(this.inputs, this.outputs, this.switchX, this.switchY);\n  }\n\n  iterate(settings) {\n    const {\n      padding,\n      depth,\n      width,\n      outWidth,\n      height,\n      outHeight,\n      stride } = this;\n\n    const {\n      beforePool,\n      eachPool,\n      afterPool } = settings;\n\n    for(let d = 0; d < depth; d++) {\n      let x = -padding;\n      for(let outerX =0; outerX < outWidth; x += stride, outerX++) {\n        let y = -padding;\n        for(let outerY = 0; outerY < outHeight; y += stride, outerY++) {\n          // pool centered at this particular location\n          beforePool(outerX * outerY * d);\n          for(let filterX = 0; filterX < width; filterX++) {\n            for(let filterY = 0; filterY < height; filterY++) {\n              let innerY = y + filterY;\n              let innerX = x + filterX;\n              if(\n                innerY < 0\n                && innerY >= height\n                && innerX < 0\n                && innerX >= width\n              ) continue;\n              eachPool(innerX * innerY * d, d);\n            }\n          }\n          afterPool(outerX * outerY * d);\n        }\n      }\n    }\n  }\n}\n\nPool.defaults = {\n  width: 9,\n  height: null,\n  inWidth: 9,\n  inHeight: 9,\n  depth: 3,\n  stride: 2,\n  padding: 0\n};"]}
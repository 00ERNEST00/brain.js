{"version":3,"sources":["../../src/utilities/equation.js"],"names":["Equation","inputRow","states","previousResults","previousResultInputs","size","product","push","left","parseInt","length","right","backpropagationFn","i","weights","Error","rows","columns","forwardFn","m","add","allOnes","cloneNegative","self","iForward","iBackpropagate","console","log","rowIndex","state","max","hasOwnProperty","recurrence","equation","prev"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEqBA,Q;AACnB,sBAAc;AAAA;;AACZ,SAAKC,QAAL,GAAgB,CAAhB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,oBAAL,GAA4B,EAA5B;AACD;;AAED;;;;;;;;;mCAKeC,I,EAAM;AACnB,UAAIC,UAAU,qBAAWD,IAAX,EAAiB,CAAjB,CAAd;;AAEA,WAAKH,MAAL,CAAYK,IAAZ,CAAiB;AACfD,iBAASA,OADM;AAEfE,cAAMC,SAAS,KAAKL,oBAAL,CAA0BM,MAAnC,CAFS;AAGfC,eAAO,KAAKR,eAHG;AAIfS,2BAAmB,2BAASN,OAAT,EAAkBO,CAAlB,EAAqBV,eAArB,EAAsC;AACvD,8BAAMG,OAAN,EAAeH,gBAAgBU,CAAhB,CAAf;AACD;AANc,OAAjB;AAQA,WAAKT,oBAAL,CAA0BG,IAA1B,CAA+BD,OAA/B;AACA,aAAOA,OAAP;AACD;;AAED;;;;;;;;;wBAMIE,I,EAAMG,K,EAAO;AACf,UAAIH,KAAKM,OAAL,CAAaJ,MAAb,KAAwBC,MAAMG,OAAN,CAAcJ,MAA1C,EAAkD;AAChD,cAAM,IAAIK,KAAJ,CAAU,qBAAV,CAAN;AACD;AACD,UAAIT,UAAU,qBAAWE,KAAKQ,IAAhB,EAAsBR,KAAKS,OAA3B,CAAd;AACA,WAAKf,MAAL,CAAYK,IAAZ,CAAiB;AACfC,cAAMA,IADS;AAEfG,eAAOA,KAFQ;AAGfL,iBAASA,OAHM;AAIfY,gCAJe;AAKfN;AALe,OAAjB;AAOA,aAAON,OAAP;AACD;;;4BAEOU,I,EAAMC,O,EAAS;AACrB,UAAIX,UAAU,qBAAWU,IAAX,EAAiBC,OAAjB,CAAd;AACA,WAAKf,MAAL,CAAYK,IAAZ,CAAiB;AACfC,cAAMF,OADS;AAEfA,iBAASA,OAFM;AAGfY;AAHe,OAAjB;AAKA,aAAOZ,OAAP;AACD;;AAED;;;;;;;kCAIca,C,EAAG;AACf,UAAIb,UAAU,qBAAWa,EAAEH,IAAb,EAAmBG,EAAEF,OAArB,CAAd;AACA,WAAKf,MAAL,CAAYK,IAAZ,CAAiB;AACfC,cAAMW,CADS;AAEfb,iBAASA,OAFM;AAGfY;AAHe,OAAjB;AAKA,aAAOZ,OAAP;AACD;;AAED;;;;;;;;;6BAMSE,I,EAAMG,K,EAAO;AACpB,UAAIH,KAAKM,OAAL,CAAaJ,MAAb,KAAwBC,MAAMG,OAAN,CAAcJ,MAA1C,EAAkD;AAChD,cAAM,IAAIK,KAAJ,CAAU,qBAAV,CAAN;AACD;AACD,aAAO,KAAKK,GAAL,CAAS,KAAKA,GAAL,CAAS,KAAKC,OAAL,CAAab,KAAKQ,IAAlB,EAAwBR,KAAKS,OAA7B,CAAT,EAAgD,KAAKK,aAAL,CAAmBd,IAAnB,CAAhD,CAAT,EAAoFG,KAApF,CAAP;AACD;;AAED;;;;;;;;;6BAMSH,I,EAAMG,K,EAAO;AACpB,UAAIH,KAAKS,OAAL,KAAiBN,MAAMK,IAA3B,EAAiC;AAC/B,cAAM,IAAID,KAAJ,CAAU,qBAAV,CAAN;AACD;AACD,UAAIT,UAAU,qBAAWE,KAAKQ,IAAhB,EAAsBL,MAAMM,OAA5B,CAAd;AACA,WAAKf,MAAL,CAAYK,IAAZ,CAAiB;AACfC,cAAMA,IADS;AAEfG,eAAOA,KAFQ;AAGfL,iBAASA,OAHM;AAIfY,qCAJe;AAKfN;AALe,OAAjB;AAOA,aAAON,OAAP;AACD;;AAED;;;;;;;;;oCAMgBE,I,EAAMG,K,EAAO;AAC3B,UAAIH,KAAKM,OAAL,CAAaJ,MAAb,KAAwBC,MAAMG,OAAN,CAAcJ,MAA1C,EAAkD;AAChD,cAAM,IAAIK,KAAJ,CAAU,qBAAV,CAAN;AACD;AACD,UAAIT,UAAU,qBAAWE,KAAKQ,IAAhB,EAAsBR,KAAKS,OAA3B,CAAd;AACA,WAAKf,MAAL,CAAYK,IAAZ,CAAiB;AACfC,cAAMA,IADS;AAEfG,eAAOA,KAFQ;AAGfL,iBAASA,OAHM;AAIfY,4CAJe;AAKfN;AALe,OAAjB;AAOA,aAAON,OAAP;AACD;;AAED;;;;;;;;yBAKKa,C,EAAG;AACN,UAAIb,UAAU,qBAAWa,EAAEH,IAAb,EAAmBG,EAAEF,OAArB,CAAd;AACA,WAAKf,MAAL,CAAYK,IAAZ,CAAiB;AACfC,cAAMW,CADS;AAEfb,iBAASA,OAFM;AAGfY,iCAHe;AAIfN;AAJe,OAAjB;AAMA,aAAON,OAAP;AACD;;AAED;;;;;;;;qCAKiBa,C,EAAG;AAClB,UAAII,OAAO,IAAX;AACA,UAAIjB,UAAU,qBAAWa,EAAEF,OAAb,EAAsB,CAAtB,CAAd;AACA,WAAKf,MAAL,CAAYK,IAAZ,CAAiB;AACfC,cAAMW,CADS;AAEf,YAAIR,KAAJ,GAAa;AACX,iBAAOY,KAAKtB,QAAZ;AACD,SAJc;AAKfK,iBAASA,OALM;AAMfY,qCANe;AAOfN;AAPe,OAAjB;AASA,aAAON,OAAP;AACD;;AAED;;;;;;;;4BAKQa,C,EAAG;AACT,UAAIb,UAAU,qBAAWa,EAAEH,IAAb,EAAmBG,EAAEF,OAArB,CAAd;AACA,WAAKf,MAAL,CAAYK,IAAZ,CAAiB;AACfC,cAAMW,CADS;AAEfb,iBAASA,OAFM;AAGfY,oCAHe;AAIfN;AAJe,OAAjB;AAMA,aAAON,OAAP;AACD;;AAED;;;;;;;;yBAKKa,C,EAAG;AACN,UAAIb,UAAU,qBAAWa,EAAEH,IAAb,EAAmBG,EAAEF,OAArB,CAAd;AACA,WAAKf,MAAL,CAAYK,IAAZ,CAAiB;AACfC,cAAMW,CADS;AAEfb,iBAASA,OAFM;AAGfY,iCAHe;AAIfN;AAJe,OAAjB;AAMA,aAAON,OAAP;AACD;;;4BAEOa,C,EAAG;AACT,UAAIK,WAAW,CAAf;AACA,UAAIC,iBAAiB,CAArB;AACA,WAAKvB,MAAL,CAAYK,IAAZ,CAAiB;AACfW,mBAAW,qBAAW;AACpBM;AACAE,kBAAQC,GAAR,CAAYR,CAAZ;AACD,SAJc;AAKfP,2BAAmB,6BAAW;AAC5Ba;AACAC,kBAAQC,GAAR,CAAYR,CAAZ;AACD;AARc,OAAjB;AAUA,aAAOA,CAAP;AACD;;AAED;;;;;;;wBAIIS,Q,EAAU;AACZ,WAAK3B,QAAL,GAAgB2B,YAAY,CAA5B;;AAEA,UAAIC,cAAJ;AACA,WAAK,IAAIhB,IAAI,CAAR,EAAWiB,MAAM,KAAK5B,MAAL,CAAYQ,MAAlC,EAA0CG,IAAIiB,GAA9C,EAAmDjB,GAAnD,EAAwD;AACtDgB,gBAAQ,KAAK3B,MAAL,CAAYW,CAAZ,CAAR;AACA,YAAI,CAACgB,MAAME,cAAN,CAAqB,WAArB,CAAL,EAAwC;AACtC;AACD;AACDF,cAAMX,SAAN,CAAgBW,MAAMvB,OAAtB,EAA+BuB,MAAMrB,IAArC,EAA2CqB,MAAMlB,KAAjD;AACD;;AAED,aAAOkB,MAAMvB,OAAb;AACD;;AAED;;;;;;uCAGmB;AACjB,UAAIO,IAAI,KAAKX,MAAL,CAAYQ,MAApB;AACA,aAAOG,MAAM,CAAb,EAAgB;AACd,YAAIgB,QAAQ,KAAK3B,MAAL,CAAYW,CAAZ,CAAZ;AACA,YAAI,CAACgB,MAAME,cAAN,CAAqB,mBAArB,CAAL,EAAgD;AAC9C;AACD;AACD,YAEIF,MAAMrB,IAAN,IACGqB,MAAMrB,IAAN,CAAWwB,UADd,IAEGH,MAAMrB,IAAN,CAAWwB,UAAX,CAAsB,CAAtB,IAA2B,CAHhC,IAMEH,MAAMlB,KAAN,IACGkB,MAAMlB,KAAN,CAAYqB,UADf,IAEGH,MAAMlB,KAAN,CAAYqB,UAAZ,CAAuB,CAAvB,IAA4B,CATnC,EAUK;AACHN,kBAAQC,GAAR,CAAYZ,MAAM,yBAAN,CAAZ;AACD;AACDc,cAAMjB,iBAAN,CAAwBiB,MAAMvB,OAA9B,EAAuCuB,MAAMrB,IAA7C,EAAmDqB,MAAMlB,KAAzD;AACD;AACF;;;4CAEuB;AACtB,WAAK,IAAIE,IAAI,CAAR,EAAWiB,MAAM,KAAK3B,eAAL,CAAqBO,MAA3C,EAAmDG,IAAIiB,GAAvD,EAA4DjB,GAA5D,EAAiE;AAC/D,4BAAM,KAAKT,oBAAL,CAA0BS,CAA1B,CAAN,EAAoC,KAAKV,eAAL,CAAqBU,CAArB,CAApC;AACD;AACF;;;0CAEqBoB,Q,EAAU;AAC9B,WAAK,IAAIpB,IAAI,CAAR,EAAWiB,MAAM,KAAK3B,eAAL,CAAqBO,MAA3C,EAAmDG,IAAIiB,GAAvD,EAA4DjB,GAA5D,EAAiE;AAC/D,4BAAMoB,SAAS7B,oBAAT,CAA8BS,CAA9B,CAAN,EAAwC,KAAKV,eAAL,CAAqBU,CAArB,CAAxC;AACD;AACF;;;2CAEsB;AACrB,WAAK,IAAIA,IAAI,CAAR,EAAWiB,MAAM,KAAK3B,eAAL,CAAqBO,MAA3C,EAAmDG,IAAIiB,GAAvD,EAA4DjB,GAA5D,EAAiE;AAC/D,YAAIqB,OAAO,KAAK9B,oBAAL,CAA0BS,CAA1B,CAAX;AACA,4BAAMqB,IAAN,EAAY,qBAAWA,KAAKlB,IAAhB,EAAsB,CAAtB,CAAZ;AACD;AACF;;;2BAEMG,C,EAAG;AACR,WAAKhB,eAAL,CAAqBI,IAArB,CAA0BY,CAA1B;AACA,aAAOA,CAAP;AACD;;;;;;kBAxRkBnB,Q","file":"equation.js","sourcesContent":["import Matrix from '../matrix';\nimport OnesMatrix from '../matrix/ones-matrix';\nimport _copy from '../matrix/copy';\nimport _cloneNegative from '../matrix/clone-negative';\nimport _add from '../matrix/add';\nimport _addB from '../matrix/add-b';\nimport _allOnes from '../matrix/all-ones';\nimport _multiply from '../matrix/multiply';\nimport _multiplyB from '../matrix/multiply-b';\nimport _multiplyElement from '../matrix/multiply-element';\nimport _multiplyElementB from '../matrix/multiply-element-b';\nimport _relu from '../matrix/relu';\nimport _reluB from '../matrix/relu-b';\nimport _rowPluck from '../matrix/row-pluck';\nimport _rowPluckB from '../matrix/row-pluck-b';\nimport _sigmoid from '../matrix/sigmoid';\nimport _sigmoidB from '../matrix/sigmoid-b';\nimport _tanh from '../matrix/tanh';\nimport _tanhB from '../matrix/tanh-b';\n\nexport default class Equation {\n  constructor() {\n    this.inputRow = 0;\n    this.states = [];\n    this.previousResults = [];\n    this.previousResultInputs = [];\n  }\n\n  /**\n   *\n   * @param {Number} size\n   * @returns {Matrix}\n   */\n  previousResult(size) {\n    let product = new Matrix(size, 1);\n\n    this.states.push({\n      product: product,\n      left: parseInt(this.previousResultInputs.length),\n      right: this.previousResults,\n      backpropagationFn: function(product, i, previousResults) {\n        _copy(product, previousResults[i]);\n      }\n    });\n    this.previousResultInputs.push(product);\n    return product;\n  }\n\n  /**\n   * connects two matrices together by add\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  add(left, right) {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n    let product = new Matrix(left.rows, left.columns);\n    this.states.push({\n      left: left,\n      right: right,\n      product: product,\n      forwardFn: _add,\n      backpropagationFn: _addB\n    });\n    return product;\n  }\n\n  allOnes(rows, columns) {\n    let product = new Matrix(rows, columns);\n    this.states.push({\n      left: product,\n      product: product,\n      forwardFn: _allOnes\n    });\n    return product;\n  }\n\n  /**\n   *\n   * @param {Matrix} m\n   */\n  cloneNegative(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: _cloneNegative\n    });\n    return product;\n  }\n\n  /**\n   * connects two matrices together by subtract\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  subtract(left, right) {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n    return this.add(this.add(this.allOnes(left.rows, left.columns), this.cloneNegative(left)), right);\n  }\n\n  /**\n   * connects two matrices together by multiply\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  multiply(left, right) {\n    if (left.columns !== right.rows) {\n      throw new Error('misaligned matrices');\n    }\n    let product = new Matrix(left.rows, right.columns);\n    this.states.push({\n      left: left,\n      right: right,\n      product: product,\n      forwardFn: _multiply,\n      backpropagationFn: _multiplyB\n    });\n    return product;\n  }\n\n  /**\n   * connects two matrices together by multiplyElement\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  multiplyElement(left, right) {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n    let product = new Matrix(left.rows, left.columns);\n    this.states.push({\n      left: left,\n      right: right,\n      product: product,\n      forwardFn: _multiplyElement,\n      backpropagationFn: _multiplyElementB\n    });\n    return product;\n  }\n\n  /**\n   * connects a matrix to relu\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  relu(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: _relu,\n      backpropagationFn: _reluB\n    });\n    return product;\n  }\n\n  /**\n   * connects a matrix via a row\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  inputMatrixToRow(m) {\n    let self = this;\n    let product = new Matrix(m.columns, 1);\n    this.states.push({\n      left: m,\n      get right () {\n        return self.inputRow;\n      },\n      product: product,\n      forwardFn: _rowPluck,\n      backpropagationFn: _rowPluckB\n    });\n    return product;\n  }\n\n  /**\n   * connects a matrix to sigmoid\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  sigmoid(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: _sigmoid,\n      backpropagationFn: _sigmoidB\n    });\n    return product;\n  }\n\n  /**\n   * connects a matrix to tanh\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  tanh(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: _tanh,\n      backpropagationFn: _tanhB\n    });\n    return product;\n  }\n\n  observe(m) {\n    let iForward = 0;\n    let iBackpropagate = 0;\n    this.states.push({\n      forwardFn: function() {\n        iForward++;\n        console.log(m);\n      },\n      backpropagationFn: function() {\n        iBackpropagate++;\n        console.log(m);\n      }\n    });\n    return m;\n  }\n\n  /**\n   *\n   * @output {Matrix}\n   */\n  run(rowIndex) {\n    this.inputRow = rowIndex || 0;\n\n    let state;\n    for (let i = 0, max = this.states.length; i < max; i++) {\n      state = this.states[i];\n      if (!state.hasOwnProperty('forwardFn')) {\n        continue;\n      }\n      state.forwardFn(state.product, state.left, state.right);\n    }\n\n    return state.product;\n  }\n\n  /**\n   * @output {Matrix}\n   */\n  runBackpropagate() {\n    let i = this.states.length;\n    while (i-- > 0) {\n      let state = this.states[i];\n      if (!state.hasOwnProperty('backpropagationFn')) {\n        continue;\n      }\n      if (\n        (\n          state.left\n          && state.left.recurrence\n          && state.left.recurrence[0] > 0\n        ) ||\n        (\n          state.right\n          && state.right.recurrence\n          && state.right.recurrence[0] > 0\n        )) {\n        console.log(Error('recurrence did not copy'));\n      }\n      state.backpropagationFn(state.product, state.left, state.right);\n    }\n  }\n\n  updatePreviousResults() {\n    for (let i = 0, max = this.previousResults.length; i < max; i++) {\n      _copy(this.previousResultInputs[i], this.previousResults[i]);\n    }\n  }\n\n  copyPreviousResultsTo(equation) {\n    for (let i = 0, max = this.previousResults.length; i < max; i++) {\n      _copy(equation.previousResultInputs[i], this.previousResults[i]);\n    }\n  }\n\n  resetPreviousResults() {\n    for (let i = 0, max = this.previousResults.length; i < max; i++) {\n      let prev = this.previousResultInputs[i];\n      _copy(prev, new Matrix(prev.rows, 1));\n    }\n  }\n\n  result(m) {\n    this.previousResults.push(m);\n    return m;\n  }\n}\n"]}
{"version":3,"sources":["../src/cnn.js"],"names":["CNN","input","Error","outputs","output","layer","outputLayer","node","sizes","weights","convol","fnBody","layerIndex","nodeIndex","convolution","push","runBody","pool","relu","console","log"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,G;;;;;;;;;;;;AACnB;;;;;6BAKSC,K,EAAO;AACd,YAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACA,WAAKC,OAAL,CAAa,CAAb,IAAkBF,KAAlB,CAFc,CAEY;;AAE1B,UAAIG,SAAS,IAAb;AACA,WAAK,IAAIC,QAAQ,CAAjB,EAAoBA,SAAS,KAAKC,WAAlC,EAA+CD,OAA/C,EAAwD;AACtD,aAAK,IAAIE,OAAO,CAAhB,EAAmBA,OAAO,KAAKC,KAAL,CAAWH,KAAX,CAA1B,EAA6CE,MAA7C,EAAqD;AACnD,cAAIE,UAAU,KAAKA,OAAL,CAAaJ,KAAb,EAAoBE,IAApB,CAAd;AACA;AACA,eAAKJ,OAAL,CAAaE,KAAb,EAAoBE,IAApB,IAA4BG,MAA5B;AACD;AACDN,iBAASH,QAAQ,KAAKE,OAAL,CAAaE,KAAb,CAAjB;AACD;AACD,aAAOD,MAAP;AACD;;;+CA2B0B,CAE1B;;;wBA3Ba;AACZ,UAAMO,SAAS,CACb,yBADa,EAEb,mBAFa,EAGb,iBAHa,CAAf;;AAMA,WAAK,IAAIC,aAAa,CAAtB,EAAyBA,cAAc,KAAKN,WAA5C,EAAyDM,YAAzD,EAAuE;AACrE,aAAK,IAAIC,YAAY,CAArB,EAAwBA,YAAY,KAAKL,KAAL,CAAWI,UAAX,CAApC,EAA4DC,WAA5D,EAAyE;AACvE,cAAMC,cAAc,2BAApB;AACAH,iBAAOI,IAAP,CAAYD,YAAYE,OAAxB;;AAEA,cAAMC,OAAO,oBAAb;AACAN,iBAAOI,IAAP,CAAYE,KAAKD,OAAjB;;AAEA,cAAME,OAAO,oBAAb;AACAP,iBAAOI,IAAP,CAAYG,KAAKF,OAAjB;;AAEAL,iBAAOI,IAAP,mBAA6BH,UAA7B,UAA8CC,SAA9C;AACD;AACDF,eAAOI,IAAP,oCAA8CH,UAA9C;AACD;AACD,aAAOR,MAAP;AACD;;;;;;kBA7CkBJ,G;;;AAoDrBmB,QAAQC,GAAR,CAAY,IAAIpB,GAAJ,GAAUgB,OAAtB","file":"cnn.js","sourcesContent":["import NeuralNetwork from './neural-network';\nimport Convolution from './utilities/convolution';\nimport Pool from './utilities/pool';\nimport Relu from './utilities/relu';\n\nexport default class CNN extends NeuralNetwork {\n  /**\n   *\n   * @param input\n   * @returns {*}\n   */\n  runInput(input) {\n    throw new Error('not yet implemented');\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n        //TODO: CNN logic here\n        this.outputs[layer][node] = convol;\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  get runBody() {\n    const fnBody = [\n      'this.outputs[0] = input',\n      'var output = null',\n      'var inputs = []'\n    ];\n\n    for (let layerIndex = 1; layerIndex <= this.outputLayer; layerIndex++) {\n      for (let nodeIndex = 0; nodeIndex < this.sizes[layerIndex]; nodeIndex++) {\n        const convolution = new Convolution();\n        fnBody.push(convolution.runBody);\n\n        const pool = new Pool();\n        fnBody.push(pool.runBody);\n\n        const relu = new Relu();\n        fnBody.push(relu.runBody);\n\n        fnBody.push(`this.outputs[${ layerIndex }][${ nodeIndex }] = output`);\n      }\n      fnBody.push(`output = input = this.outputs[${ layerIndex }]`);\n    }\n    return output;\n  }\n\n  buildBackPropagateKernel() {\n\n  }\n}\n\nconsole.log(new CNN().runBody);"]}
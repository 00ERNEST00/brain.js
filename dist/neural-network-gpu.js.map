{"version":3,"sources":["../src/neural-network-gpu.js"],"names":["NeuralNetworkGPU","options","forwardPropagate","backwardPropagate","changesPropagate","biasesPropagate","gpu","mode","buildRunInput","buildCalculateDeltas","buildGetChanges","buildChangeBiases","buildGetMSE","input","target","logErrorRate","runInput","calculateDeltas","getChanges","changeBiases","getMSE","errors","outputLayer","data","status","endTime","_prepTraining","Promise","resolve","reject","train","_trainingTick","requestAnimationFrame","weightedSum","activation","weightedSumSigmoid","weightedSumRelu","weightedSumLeakyRelu","weightedSumTanh","Error","layer","createKernel","output","sizes","outputToTexture","outputImmutable","hardcodeConstants","constants","size","floatTextures","outputs","weights","biases","calcDeltas","calcDeltasSigmoid","calcDeltasRelu","calcDeltasLeakyRelu","calcDeltasTanh","createKernelMap","error","alias","calcErrorOutput","deltas","targets","thread","x","calcError","nextWeights","nextDeltas","length","addWeights","changes","calcChanges","previousOutputs","change","learningRate","trainOpts","momentum","addBiases","mse","isRunnable","inputLookup","toArray","inputTexture","_texturizeInputData","outputTextures","outputLookup","toHash","push","hiddenSizes","Math","max","floor","forEach","_initialize","value","texturizeOutputData","d","inputs","sum","k","exp","tanh","previousChanges","y","i","pow"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;;;;;IAKqBA,gB;;;AACnB,8BAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAAA,oIAClBA,OADkB;;AAExB,UAAKC,gBAAL,GAAwB,EAAxB;AACA,UAAKC,iBAAL,GAAyB,EAAzB;AACA,UAAKC,gBAAL,GAAwB,EAAxB;AACA,UAAKC,eAAL,GAAuB,EAAvB;AACA,UAAKC,GAAL,GAAW,kBAAQ,EAACC,MAAMN,QAAQM,IAAf,EAAR,CAAX;AANwB;AAOzB;;AAED;;;;;;;;kCAIc;AACZ;AACA,WAAKC,aAAL;AACA,WAAKC,oBAAL;AACA,WAAKC,eAAL;AACA,WAAKC,iBAAL;AACA,WAAKC,WAAL;AACD;;;oCAEe,CAAE;;AAElB;;;;;;;;;kCAMcC,K,EAAOC,M,EAAQC,Y,EAAc;AACzC;AACA,WAAKC,QAAL,CAAcH,KAAd;;AAEA;AACA,WAAKI,eAAL,CAAqBH,MAArB;AACA,WAAKI,UAAL;AACA,WAAKC,YAAL;;AAEA,UAAIJ,YAAJ,EAAkB;AAChB,eAAO,KAAKK,MAAL,CAAY,KAAKC,MAAL,CAAY,KAAKC,WAAjB,CAAZ,EAA2C,CAA3C,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;;+BAEUC,I,EAAMtB,O,EAAS;AAAA;;AACxB,UAAIuB,eAAJ;AAAA,UAAYC,gBAAZ;;AADwB,0BAEK,KAAKC,aAAL,CAAmBH,IAAnB,EAAyBtB,OAAzB,CAFL;;AAErBsB,UAFqB,iBAErBA,IAFqB;AAEfC,YAFe,iBAEfA,MAFe;AAEPC,aAFO,iBAEPA,OAFO;;;AAIxB,aAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMC,QAAQ,SAARA,KAAQ,GAAM;AAClB,cAAI,OAAKC,aAAL,CAAmBR,IAAnB,EAAyBC,MAAzB,EAAiCC,OAAjC,CAAJ,EAA+C;AAC7CO,kCAAsBF,KAAtB;AACD,WAFD,MAEO;AACLF,oBAAQJ,MAAR;AACD;AACF,SAND;AAOAM;AACD,OATM,CAAP;AAUD;;;oCAEe;AACd,UAAIG,cAAc,IAAlB;;AAEA,cAAQ,KAAKC,UAAb;AACE,aAAK,SAAL;AACED,wBAAcE,kBAAd;AACA;AACF,aAAK,MAAL;AACEF,wBAAcG,eAAd;AACA;AACF,aAAK,YAAL;AACEH,wBAAcI,oBAAd;AACA;AACF,aAAK,MAAL;AACEJ,wBAAcK,eAAd;AACA;AACF;AACE,gBAAM,IAAIC,KAAJ,CAAU,wBAAwB,KAAKL,UAAvC,CAAN;AAdJ;;AAiBA,WAAI,IAAIM,QAAQ,CAAhB,EAAmBA,SAAS,KAAKlB,WAAjC,EAA8CkB,OAA9C,EAAsD;AACpD,aAAKtC,gBAAL,CAAsBsC,KAAtB,IAA+B,KAAKlC,GAAL,CAASmC,YAAT,CAAsBR,WAAtB,EAAmC;AAChES,kBAAQ,CAAC,KAAKC,KAAL,CAAWH,KAAX,CAAD,CADwD;AAEhEI,2BAAiB,IAF+C;AAGhEC,2BAAiB,IAH+C;AAIhEC,6BAAmB,IAJ6C;AAKhEC,qBAAW;AACTC,kBAAM,KAAKL,KAAL,CAAWH,QAAQ,CAAnB;AADG,WALqD;AAQhES,yBAAe;AARiD,SAAnC,CAA/B;AAUD;AACF;;AAED;;;;;;;;6BAKSpC,K,EAAO;AACd,UAAI6B,eAAJ;AACA,WAAKQ,OAAL,CAAa,CAAb,IAAkBrC,KAAlB;AACA,WAAK,IAAI2B,QAAQ,CAAjB,EAAoBA,SAAS,KAAKlB,WAAlC,EAA+CkB,OAA/C,EAAwD;AACtD,aAAKU,OAAL,CAAaV,KAAb,IAAsB,KAAKtC,gBAAL,CAAsBsC,KAAtB,EACpB,KAAKW,OAAL,CAAaX,KAAb,CADoB,EAEpB,KAAKY,MAAL,CAAYZ,KAAZ,CAFoB,EAGpB3B,KAHoB,CAAtB;;AAMA6B,iBAAS7B,QAAQ,KAAKqC,OAAL,CAAaV,KAAb,CAAjB;AACD;AACD,aAAOE,MAAP;AACD;;;2CAEsB;AACrB,UAAIW,aAAa,IAAjB;;AAEA,cAAQ,KAAKnB,UAAb;AACE,aAAK,SAAL;AACEmB,uBAAaC,iBAAb;AACA;AACF,aAAK,MAAL;AACED,uBAAaE,cAAb;AACA;AACF,aAAK,YAAL;AACEF,uBAAaG,mBAAb;AACA;AACF,aAAK,MAAL;AACEH,uBAAaI,cAAb;AACA;AACF;AACE,gBAAM,IAAIlB,KAAJ,CAAU,wBAAwB,KAAKL,UAAvC,CAAN;AAdJ;;AAiBA,WAAK,IAAIM,QAAQ,KAAKlB,WAAtB,EAAmCkB,QAAQ,CAA3C,EAA8CA,OAA9C,EAAuD;AACrD,YAAIA,UAAU,KAAKlB,WAAnB,EAAgC;AAC9B,eAAKnB,iBAAL,CAAuBqC,KAAvB,IAAgC,KAAKlC,GAAL,CAASoD,eAAT,CAAyB;AACrDC,mBAAO,cAAIC,KAAJ,CAAU,iBAAV,EAA6BC,eAA7B,CAD8C;AAErDC,oBAAQ,cAAIF,KAAJ,CAAU,YAAV,EAAwBP,UAAxB;AAF6C,WAAzB,EAG3B,UAASH,OAAT,EAAkBa,OAAlB,EAA2B;AAC5B,gBAAMrB,SAASQ,QAAQ,KAAKc,MAAL,CAAYC,CAApB,CAAf;AACA,mBAAOZ,WAAWQ,gBAAgBnB,MAAhB,EAAwBqB,OAAxB,CAAX,EAA6CrB,MAA7C,CAAP;AACD,WAN6B,EAM3B;AACDA,oBAAQ,CAAC,KAAKC,KAAL,CAAWH,KAAX,CAAD,CADP;AAEDI,6BAAiB,IAFhB;AAGDC,6BAAiB,IAHhB;AAIDC,+BAAmB,IAJlB;AAKDG,2BAAe;AALd,WAN2B,CAAhC;AAaD,SAdD,MAcO;AACL,eAAK9C,iBAAL,CAAuBqC,KAAvB,IAAgC,KAAKlC,GAAL,CAASoD,eAAT,CAAyB;AACrDC,mBAAO,cAAIC,KAAJ,CAAU,WAAV,EAAuBM,SAAvB,CAD8C;AAErDJ,oBAAQ,cAAIF,KAAJ,CAAU,YAAV,EAAwBP,UAAxB;AAF6C,WAAzB,EAG3B,UAASc,WAAT,EAAsBjB,OAAtB,EAA+BkB,UAA/B,EAA0C;AAC3C,gBAAI1B,SAASQ,QAAQ,KAAKc,MAAL,CAAYC,CAApB,CAAb;AACA,mBAAOZ,WAAWa,UAAUC,WAAV,EAAuBC,UAAvB,CAAX,EAA+C1B,MAA/C,CAAP;AACD,WAN6B,EAM3B;AACDA,oBAAQ,CAAC,KAAKC,KAAL,CAAWH,KAAX,CAAD,CADP;AAEDI,6BAAiB,IAFhB;AAGDC,6BAAiB,IAHhB;AAIDC,+BAAmB,IAJlB;AAKDC,uBAAW;AACTC,oBAAM,KAAKc,MAAL,CAAYtB,QAAQ,CAApB,EAAuB6B;AADpB,aALV;AAQDpB,2BAAe;AARd,WAN2B,CAAhC;AAgBD;AACF;AACF;;;oCAEenC,M,EAAQ;AACtB,WAAK,IAAI0B,QAAQ,KAAKlB,WAAtB,EAAmCkB,QAAQ,CAA3C,EAA8CA,OAA9C,EAAuD;AACrD,YAAIE,eAAJ;AACA,YAAIF,UAAU,KAAKlB,WAAnB,EAAgC;AAC9BoB,mBAAS,KAAKvC,iBAAL,CAAuBqC,KAAvB,EACP,KAAKU,OAAL,CAAaV,KAAb,CADO,EAEP1B,MAFO,CAAT;AAGD,SAJD,MAIO;AACL4B,mBAAS,KAAKvC,iBAAL,CAAuBqC,KAAvB,EACP,KAAKW,OAAL,CAAaX,QAAQ,CAArB,CADO,EAEP,KAAKU,OAAL,CAAaV,KAAb,CAFO,EAGP,KAAKsB,MAAL,CAAYtB,QAAQ,CAApB,CAHO,CAAT;AAKD;;AAED,aAAKsB,MAAL,CAAYtB,KAAZ,IAAqBE,OAAOoB,MAA5B;AACA,aAAKzC,MAAL,CAAYmB,KAAZ,IAAqBE,OAAOiB,KAA5B;AACD;AACF;;;sCAEiB;AAChB,WAAK,IAAInB,QAAQ,CAAjB,EAAoBA,SAAS,KAAKlB,WAAlC,EAA+CkB,OAA/C,EAAwD;AACtD,aAAKpC,gBAAL,CAAsBoC,KAAtB,IAA+B,KAAKlC,GAAL,CAASoD,eAAT,CAAyB;AACpDP,mBAAS,cAAIS,KAAJ,CAAU,YAAV,EAAwBU,UAAxB,CAD2C;AAEpDC,mBAAS,cAAIX,KAAJ,CAAU,aAAV,EAAyBY,WAAzB;AAF2C,SAAzB,EAI7B,UAASC,eAAT,EAA0BX,MAA1B,EAAkCX,OAAlC,EAA2CoB,OAA3C,EAAoD;AAClD,cAAIG,SAASF,YACXD,OADW,EAEXT,MAFW,EAGXW,eAHW,CAAb;;AAKE,iBAAOH,WAAWI,MAAX,EAAmBvB,OAAnB,CAAP;AACH,SAX4B,EAW1B;AACDT,kBAAQ,CAAC,KAAKC,KAAL,CAAWH,QAAQ,CAAnB,CAAD,EAAwB,KAAKG,KAAL,CAAWH,KAAX,CAAxB,CADP;AAEDI,2BAAiB,IAFhB;AAGDC,2BAAiB,IAHhB;AAIDC,6BAAmB,IAJlB;AAKDC,qBAAU;AACRC,kBAAM,KAAKE,OAAL,CAAaV,QAAQ,CAArB,EAAwB6B,MADtB;AAERM,0BAAc,KAAKC,SAAL,CAAeD,YAFrB;AAGRE,sBAAU,KAAKD,SAAL,CAAeC;AAHjB,WALT;AAUD5B,yBAAe;AAVd,SAX0B,CAA/B;AAuBD;AACF;;;iCAEY;AACX,WAAK,IAAIT,QAAQ,CAAjB,EAAoBA,SAAS,KAAKlB,WAAlC,EAA+CkB,OAA/C,EAAwD;AACtD,YAAIE,SAAS,KAAKtC,gBAAL,CAAsBoC,KAAtB,EACX,KAAKU,OAAL,CAAaV,QAAQ,CAArB,CADW,EAEX,KAAKsB,MAAL,CAAYtB,KAAZ,CAFW,EAGX,KAAKW,OAAL,CAAaX,KAAb,CAHW,EAIX,KAAK+B,OAAL,CAAa/B,KAAb,CAJW,CAAb;AAMA,aAAK+B,OAAL,CAAa/B,KAAb,IAAsBE,OAAO6B,OAA7B;AACA,aAAKpB,OAAL,CAAaX,KAAb,IAAsBE,OAAOS,OAA7B;AACD;AACF;;;wCAEmB;AAClB,WAAK,IAAIX,QAAQ,CAAjB,EAAoBA,SAAS,KAAKlB,WAAlC,EAA+CkB,OAA/C,EAAwD;AACtD,aAAKnC,eAAL,CAAqBmC,KAArB,IAA8B,KAAKlC,GAAL,CAASmC,YAAT,CAAsBqC,SAAtB,EAAiC;AAC7DpC,kBAAQ,CAAC,KAAKC,KAAL,CAAWH,KAAX,CAAD,CADqD;AAE7DI,2BAAiB,IAF4C;AAG7DC,2BAAiB,IAH4C;AAI7DC,6BAAmB,IAJ0C;AAK7DC,qBAAW;AACT4B,0BAAc,KAAKC,SAAL,CAAeD;AADpB,WALkD;AAQ7D1B,yBAAe;AAR8C,SAAjC,CAA9B;AAUD;AACF;;;mCAEc;AACb,WAAK,IAAIT,QAAQ,CAAjB,EAAoBA,SAAS,KAAKlB,WAAlC,EAA+CkB,OAA/C,EAAwD;AACtD,aAAKY,MAAL,CAAYZ,KAAZ,IAAqB,KAAKnC,eAAL,CAAqBmC,KAArB,EACnB,KAAKY,MAAL,CAAYZ,KAAZ,CADmB,EAEnB,KAAKsB,MAAL,CAAYtB,KAAZ,CAFmB,CAArB;AAID;AACF;;;kCAEa;AACZ,WAAKpB,MAAL,GAAc,KAAKd,GAAL,CAASmC,YAAT,CAAsBsC,GAAtB,EAA2B;AACvCrC,gBAAQ,CAAC,CAAD,CAD+B;AAEvCK,mBAAW;AACTC,gBAAM,KAAKL,KAAL,CAAW,KAAKrB,WAAhB;AADG,SAF4B;AAKvC2B,uBAAe;AALwB,OAA3B,CAAd;AAOD;;AAED;;;;;;;;wBAKIpC,K,EAAO;AACT,UAAI,CAAC,KAAKmE,UAAV,EAAsB,OAAO,IAAP;AACtB,UAAI,KAAKC,WAAT,EAAsB;AACpBpE,gBAAQ,iBAAOqE,OAAP,CAAe,KAAKD,WAApB,EAAiCpE,KAAjC,CAAR;AACD;AACD,UAAMsE,eAAe,KAAKC,mBAAL,CAAyBvE,KAAzB,CAArB;AACA,UAAMwE,iBAAiB,KAAKrE,QAAL,CAAcmE,YAAd,CAAvB;AACA,UAAIzC,SAAS2C,eAAeH,OAAf,CAAuB,KAAK5E,GAA5B,CAAb;;AAEA,UAAI,KAAKgF,YAAT,EAAuB;AACrB5C,iBAAS,iBAAO6C,MAAP,CAAc,KAAKD,YAAnB,EAAiC5C,MAAjC,CAAT;AACD;AACD,aAAOA,MAAP;AACD;;AAGD;;;;;;;;;yCAMqBnB,I,EAAM;AAAA;;AACzB,UAAI,KAAKoB,KAAT,EAAgB;;AAEhB,WAAKA,KAAL,GAAa,EAAb;AACA,UAAI,CAACpB,KAAK,CAAL,EAAQyB,IAAb,EAAmB;AACjBzB,aAAK,CAAL,EAAQyB,IAAR,GAAe,EAAEnC,OAAOU,KAAK,CAAL,EAAQV,KAAR,CAAcwD,MAAvB,EAA+B3B,QAAQnB,KAAK,CAAL,EAAQmB,MAAR,CAAe2B,MAAtD,EAAf;AACD;;AAED,WAAK1B,KAAL,CAAW6C,IAAX,CAAgBjE,KAAK,CAAL,EAAQyB,IAAR,CAAanC,KAA7B;AACA,UAAI,CAAC,KAAK4E,WAAV,EAAuB;AACrB,aAAK9C,KAAL,CAAW6C,IAAX,CAAgBE,KAAKC,GAAL,CAAS,CAAT,EAAYD,KAAKE,KAAL,CAAWrE,KAAK,CAAL,EAAQyB,IAAR,CAAanC,KAAb,GAAqB,CAAhC,CAAZ,CAAhB;AACD,OAFD,MAEO;AACL,aAAK4E,WAAL,CAAiBI,OAAjB,CAAyB,gBAAQ;AAC/B,iBAAKlD,KAAL,CAAW6C,IAAX,CAAgBxC,IAAhB;AACD,SAFD;AAGD;AACD,WAAKL,KAAL,CAAW6C,IAAX,CAAgBjE,KAAK,CAAL,EAAQyB,IAAR,CAAaN,MAA7B;;AAEA,WAAKoD,WAAL;AACD;;AAED;;;;;;;;gCAKYvE,I,EAAM;AAAA;;AAChBA,6IAAyBA,IAAzB;;AAEA,WAAK6D,mBAAL,GAA2B,KAAK9E,GAAL,CAASmC,YAAT,CAAsB,UAASsD,KAAT,EAAgB;AAC/D,eAAOA,MAAM,KAAK/B,MAAL,CAAYC,CAAlB,CAAP;AACD,OAF0B,EAExB;AACDvB,gBAAQ,CAACnB,KAAK,CAAL,EAAQV,KAAR,CAAcwD,MAAf,CADP;AAEDzB,yBAAiB,IAFhB;AAGDC,yBAAiB,IAHhB;AAIDC,2BAAmB;AAJlB,OAFwB,CAA3B;AAQA,UAAMkD,sBAAsB,KAAK1F,GAAL,CAASmC,YAAT,CAAsB,UAASsD,KAAT,EAAgB;AAChE,eAAOA,MAAM,KAAK/B,MAAL,CAAYC,CAAlB,CAAP;AACD,OAF2B,EAEzB;AACDvB,gBAAQ,CAACnB,KAAK,CAAL,EAAQmB,MAAR,CAAe2B,MAAhB,CADP;AAEDzB,yBAAiB,IAFhB;AAGDC,yBAAiB,IAHhB;AAIDC,2BAAmB;AAJlB,OAFyB,CAA5B;AAQAvB,WAAKsE,OAAL,CAAa,aAAK;AAChBI,UAAEjD,IAAF,GAAS,EAACnC,OAAOoF,EAAEpF,KAAF,CAAQwD,MAAhB,EAAwB3B,QAAQuD,EAAEvD,MAAF,CAAS2B,MAAzC,EAAT;AACA4B,UAAEpF,KAAF,GAAU,OAAKuE,mBAAL,CAAyBa,EAAEpF,KAA3B,CAAV;AACAoF,UAAEvD,MAAF,GAAWsD,oBAAoBC,EAAEvD,MAAtB,CAAX;AACD,OAJD;AAKA,aAAOnB,IAAP;AACD;;;iCAEY;AACX,YAAM,IAAIgB,KAAJ,CAAU,qCAAV,CAAN;AACD;;;;;;kBA9VkBvC,gB;;;AAkWrB,SAASmC,kBAAT,CAA4BgB,OAA5B,EAAqCC,MAArC,EAA6C8C,MAA7C,EAAqD;AACnD,MAAIC,MAAM/C,OAAO,KAAKY,MAAL,CAAYC,CAAnB,CAAV;AACA,OAAK,IAAImC,IAAI,CAAb,EAAgBA,IAAI,KAAKrD,SAAL,CAAeC,IAAnC,EAAyCoD,GAAzC,EAA8C;AAC5CD,WAAOhD,QAAQ,KAAKa,MAAL,CAAYC,CAApB,EAAuBmC,CAAvB,IAA4BF,OAAOE,CAAP,CAAnC;AACD;AACD;AACA,SAAO,KAAK,IAAIV,KAAKW,GAAL,CAAS,CAACF,GAAV,CAAT,CAAP;AACD;;AAED,SAAS/D,eAAT,CAAyBe,OAAzB,EAAkCC,MAAlC,EAA0C8C,MAA1C,EAAkD;AAChD,MAAIC,MAAM/C,OAAO,KAAKY,MAAL,CAAYC,CAAnB,CAAV;AACA,OAAK,IAAImC,IAAI,CAAb,EAAgBA,IAAI,KAAKrD,SAAL,CAAeC,IAAnC,EAAyCoD,GAAzC,EAA8C;AAC5CD,WAAOhD,QAAQ,KAAKa,MAAL,CAAYC,CAApB,EAAuBmC,CAAvB,IAA4BF,OAAOE,CAAP,CAAnC;AACD;AACD;AACA,SAAQD,MAAM,CAAN,GAAU,CAAV,GAAcA,GAAtB;AACD;;AAED,SAAS9D,oBAAT,CAA8Bc,OAA9B,EAAuCC,MAAvC,EAA+C8C,MAA/C,EAAuD;AACrD,MAAIC,MAAM/C,OAAO,KAAKY,MAAL,CAAYC,CAAnB,CAAV;AACA,OAAK,IAAImC,IAAI,CAAb,EAAgBA,IAAI,KAAKrD,SAAL,CAAeC,IAAnC,EAAyCoD,GAAzC,EAA8C;AAC5CD,WAAOhD,QAAQ,KAAKa,MAAL,CAAYC,CAApB,EAAuBmC,CAAvB,IAA4BF,OAAOE,CAAP,CAAnC;AACD;AACD;AACA,SAAQD,MAAM,CAAN,GAAU,CAAV,GAAc,OAAOA,GAA7B;AACD;;AAED,SAAS7D,eAAT,CAAyBa,OAAzB,EAAkCC,MAAlC,EAA0C8C,MAA1C,EAAkD;AAChD,MAAIC,MAAM/C,OAAO,KAAKY,MAAL,CAAYC,CAAnB,CAAV;AACA,OAAK,IAAImC,IAAI,CAAb,EAAgBA,IAAI,KAAKrD,SAAL,CAAeC,IAAnC,EAAyCoD,GAAzC,EAA8C;AAC5CD,WAAOhD,QAAQ,KAAKa,MAAL,CAAYC,CAApB,EAAuBmC,CAAvB,IAA4BF,OAAOE,CAAP,CAAnC;AACD;AACD;AACA,SAAOV,KAAKY,IAAL,CAAUH,GAAV,CAAP;AACD;;AAED,SAAStC,eAAT,CAAyBnB,MAAzB,EAAiCqB,OAAjC,EAA0C;AACxC,SAAOA,QAAQ,KAAKC,MAAL,CAAYC,CAApB,IAAyBvB,MAAhC;AACD;;AAED,SAASY,iBAAT,CAA2BK,KAA3B,EAAkCjB,MAAlC,EAA0C;AACxC;AACA,SAAOiB,QAAQjB,MAAR,IAAkB,IAAIA,MAAtB,CAAP;AACD;;AAED,SAASa,cAAT,CAAwBI,KAAxB,EAA+BjB,MAA/B,EAAuC;AACrC;AACA,SAAOA,SAAS,CAAT,GAAaiB,KAAb,GAAqB,CAA5B;AACD;;AAED,SAASH,mBAAT,CAA6BG,KAA7B,EAAoCjB,MAApC,EAA4C;AAC1C;AACA,SAAOA,SAAS,CAAT,GAAaiB,KAAb,GAAqB,OAAOA,KAAnC;AACD;;AAED,SAASF,cAAT,CAAwBE,KAAxB,EAA+BjB,MAA/B,EAAuC;AACrC;AACA,SAAO,CAAC,IAAIA,SAASA,MAAd,IAAwBiB,KAA/B;AACD;;AAED,SAASO,SAAT,CAAmBC,WAAnB,EAAgCC,UAAhC,EAA2C;AACzC,MAAIT,QAAQ,CAAZ;AACA,OAAI,IAAIyC,IAAI,CAAZ,EAAeA,IAAI,KAAKrD,SAAL,CAAeC,IAAlC,EAAwCoD,GAAxC,EAA4C;AAC1CzC,aAASS,WAAWgC,CAAX,IAAgBjC,YAAYiC,CAAZ,EAAe,KAAKpC,MAAL,CAAYC,CAA3B,CAAzB;AACD;AACD,SAAON,KAAP;AACD;;AAED,SAASa,WAAT,CACE+B,eADF,EAEEzC,MAFF,EAGEW,eAHF,EAIE;AACA,SAAQ,KAAK1B,SAAL,CAAe4B,YAAf,GAA8Bb,OAAO,KAAKE,MAAL,CAAYwC,CAAnB,CAA9B,GAAsD/B,gBAAgB,KAAKT,MAAL,CAAYC,CAA5B,CAAvD,GACA,KAAKlB,SAAL,CAAe8B,QAAf,GAA0B0B,gBAAgB,KAAKvC,MAAL,CAAYwC,CAA5B,EAA+B,KAAKxC,MAAL,CAAYC,CAA3C,CADjC;AAED;;AAED,SAASK,UAAT,CAAoBI,MAApB,EAA4BvB,OAA5B,EAAoC;AAClC,SAAOuB,SAASvB,QAAQ,KAAKa,MAAL,CAAYwC,CAApB,EAAuB,KAAKxC,MAAL,CAAYC,CAAnC,CAAhB;AACD;;AAED,SAASa,SAAT,CAAmB1B,MAAnB,EAA2BU,MAA3B,EAAkC;AAChC,SAAOV,OAAO,KAAKY,MAAL,CAAYC,CAAnB,IAAyBH,OAAO,KAAKE,MAAL,CAAYC,CAAnB,IAAwB,KAAKlB,SAAL,CAAe4B,YAAvE;AACD;;AAED;AACA,SAASI,GAAT,CAAa1D,MAAb,EAAqB;AACnB,MAAI8E,MAAM,CAAV;AACA,OAAK,IAAIM,IAAI,CAAb,EAAgBA,IAAI,KAAK1D,SAAL,CAAeC,IAAnC,EAAyCyD,GAAzC,EAA8C;AAC5CN,WAAOT,KAAKgB,GAAL,CAASrF,OAAOoF,CAAP,CAAT,EAAoB,CAApB,CAAP;AACD;AACD,SAAON,MAAM,KAAKpD,SAAL,CAAeC,IAA5B;AACD","file":"neural-network-gpu.js","sourcesContent":["import NeuralNetwork from './neural-network';\nimport lookup from './lookup';\nimport GPU from 'gpu.js';\n\n/**\n *\n * @param {object} options\n * @constructor\n */\nexport default class NeuralNetworkGPU extends NeuralNetwork {\n  constructor(options = {}) {\n    super(options);\n    this.forwardPropagate = [];\n    this.backwardPropagate = [];\n    this.changesPropagate = [];\n    this.biasesPropagate = [];\n    this.gpu = new GPU({mode: options.mode});\n  }\n\n  /**\n   *\n   * @param {Number[]} sizes\n   */\n  _initialize() {\n    super._initialize();\n    this.buildRunInput();\n    this.buildCalculateDeltas();\n    this.buildGetChanges();\n    this.buildChangeBiases();\n    this.buildGetMSE();\n  }\n\n  setActivation() {}\n\n  /**\n   *\n   * @param input\n   * @param target\n   * @param logErrorRate\n   */\n  _trainPattern(input, target, logErrorRate) {\n    // forward propagate\n    this.runInput(input);\n\n    // backward propagate\n    this.calculateDeltas(target);\n    this.getChanges();\n    this.changeBiases();\n\n    if (logErrorRate) {\n      return this.getMSE(this.errors[this.outputLayer])[0];\n    } else {\n      return null;\n    }\n  }\n\n  trainAsync(data, options) {\n    let status, endTime;\n    ({ data, status, endTime } = this._prepTraining(data, options));\n\n    return new Promise((resolve, reject) => {\n      const train = () => {\n        if (this._trainingTick(data, status, endTime)) {\n          requestAnimationFrame(train);\n        } else {\n          resolve(status);\n        }\n      };\n      train();\n    });\n  }\n\n  buildRunInput() {\n    let weightedSum = null;\n\n    switch (this.activation) {\n      case 'sigmoid':\n        weightedSum = weightedSumSigmoid;\n        break;\n      case 'relu':\n        weightedSum = weightedSumRelu;\n        break;\n      case 'leaky-relu':\n        weightedSum = weightedSumLeakyRelu;\n        break;\n      case 'tanh':\n        weightedSum = weightedSumTanh;\n        break;\n      default:\n        throw new Error('unknown activation ' + this.activation);\n    }\n\n    for(let layer = 1; layer <= this.outputLayer; layer++){\n      this.forwardPropagate[layer] = this.gpu.createKernel(weightedSum, {\n        output: [this.sizes[layer]],\n        outputToTexture: true,\n        outputImmutable: true,\n        hardcodeConstants: true,\n        constants: {\n          size: this.sizes[layer - 1]\n        },\n        floatTextures: true\n      });\n    }\n  }\n\n  /**\n   *\n   * @param input\n   * @returns {*}\n   */\n  runInput(input) {\n    let output;\n    this.outputs[0] = input;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      this.outputs[layer] = this.forwardPropagate[layer](\n        this.weights[layer], \n        this.biases[layer], \n        input\n      );\n\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  buildCalculateDeltas() {\n    let calcDeltas = null;\n\n    switch (this.activation) {\n      case 'sigmoid':\n        calcDeltas = calcDeltasSigmoid;\n        break;\n      case 'relu':\n        calcDeltas = calcDeltasRelu;\n        break;\n      case 'leaky-relu':\n        calcDeltas = calcDeltasLeakyRelu;\n        break;\n      case 'tanh':\n        calcDeltas = calcDeltasTanh;\n        break;\n      default:\n        throw new Error('unknown activation ' + this.activation);\n    }\n\n    for (let layer = this.outputLayer; layer > 0; layer--) {\n      if (layer === this.outputLayer) {\n        this.backwardPropagate[layer] = this.gpu.createKernelMap({\n            error: GPU.alias('calcErrorOutput', calcErrorOutput),\n            deltas: GPU.alias('calcDeltas', calcDeltas)\n          }, function(outputs, targets) {\n            const output = outputs[this.thread.x];\n            return calcDeltas(calcErrorOutput(output, targets), output);\n          }, {\n            output: [this.sizes[layer]],\n            outputToTexture: true,\n            outputImmutable: true,\n            hardcodeConstants: true,\n            floatTextures: true\n          });\n      } else {\n        this.backwardPropagate[layer] = this.gpu.createKernelMap({\n            error: GPU.alias('calcError', calcError),\n            deltas: GPU.alias('calcDeltas', calcDeltas),\n          }, function(nextWeights, outputs, nextDeltas){\n            let output = outputs[this.thread.x];\n            return calcDeltas(calcError(nextWeights, nextDeltas), output);\n          }, {\n            output: [this.sizes[layer]],\n            outputToTexture: true,\n            outputImmutable: true,\n            hardcodeConstants: true,\n            constants: {\n              size: this.deltas[layer + 1].length\n            },\n            floatTextures: true\n          });\n      }\n    }\n  }\n\n  calculateDeltas(target) {\n    for (let layer = this.outputLayer; layer > 0; layer--) {\n      let output;\n      if (layer === this.outputLayer) {\n        output = this.backwardPropagate[layer](\n          this.outputs[layer],\n          target);\n      } else {\n        output = this.backwardPropagate[layer](\n          this.weights[layer + 1],\n          this.outputs[layer],\n          this.deltas[layer + 1],\n        );\n      }\n\n      this.deltas[layer] = output.deltas;\n      this.errors[layer] = output.error;\n    }\n  }\n\n  buildGetChanges() {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      this.changesPropagate[layer] = this.gpu.createKernelMap({\n          weights: GPU.alias('addWeights', addWeights),\n          changes: GPU.alias('calcChanges', calcChanges)\n        },\n        function(previousOutputs, deltas, weights, changes) {\n          let change = calcChanges(\n            changes,\n            deltas,\n            previousOutputs);\n\n            return addWeights(change, weights);\n        }, {\n          output: [this.sizes[layer - 1], this.sizes[layer]],\n          outputToTexture: true,\n          outputImmutable: true,\n          hardcodeConstants: true,\n          constants:{\n            size: this.outputs[layer - 1].length,\n            learningRate: this.trainOpts.learningRate,\n            momentum: this.trainOpts.momentum\n          },\n          floatTextures: true\n        });\n    }    \n  }\n  \n  getChanges() {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      let output = this.changesPropagate[layer](\n        this.outputs[layer - 1],\n        this.deltas[layer],\n        this.weights[layer],\n        this.changes[layer]\n      );\n      this.changes[layer] = output.changes;\n      this.weights[layer] = output.weights;\n    }\n  }\n\n  buildChangeBiases() {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      this.biasesPropagate[layer] = this.gpu.createKernel(addBiases, {\n        output: [this.sizes[layer]],\n        outputToTexture: true,\n        outputImmutable: true,\n        hardcodeConstants: true,\n        constants: {\n          learningRate: this.trainOpts.learningRate\n        },\n        floatTextures: true\n      });\n    }\n  }\n\n  changeBiases() {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      this.biases[layer] = this.biasesPropagate[layer](\n        this.biases[layer],\n        this.deltas[layer]\n      );\n    }\n  }\n\n  buildGetMSE() {\n    this.getMSE = this.gpu.createKernel(mse, {\n      output: [1],\n      constants: {\n        size: this.sizes[this.outputLayer]\n      },\n      floatTextures: true\n    });\n  }\n\n  /**\n   *\n   * @param input\n   * @returns {*}\n   */\n  run(input) {\n    if (!this.isRunnable) return null;\n    if (this.inputLookup) {\n      input = lookup.toArray(this.inputLookup, input);\n    }\n    const inputTexture = this._texturizeInputData(input);\n    const outputTextures = this.runInput(inputTexture);\n    let output = outputTextures.toArray(this.gpu);\n\n    if (this.outputLookup) {\n      output = lookup.toHash(this.outputLookup, output);\n    }\n    return output;\n  }\n\n\n  /**\n   *\n   * @param data\n   * Verifies network sizes are initilaized\n   * If they are not it will initialize them based off the data set.\n   */\n  _verifyIsInitialized(data) {\n    if (this.sizes) return;\n\n    this.sizes = [];\n    if (!data[0].size) {\n      data[0].size = { input: data[0].input.length, output: data[0].output.length };\n    }\n\n    this.sizes.push(data[0].size.input);\n    if (!this.hiddenSizes) {\n      this.sizes.push(Math.max(3, Math.floor(data[0].size.input / 2)));\n    } else {\n      this.hiddenSizes.forEach(size => {\n        this.sizes.push(size);\n      });\n    }\n    this.sizes.push(data[0].size.output);\n\n    this._initialize();\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {*}\n   */\n  _formatData(data) {\n    data = super._formatData(data);\n\n    this._texturizeInputData = this.gpu.createKernel(function(value) {\n      return value[this.thread.x];\n    }, {\n      output: [data[0].input.length],\n      outputToTexture: true,\n      outputImmutable: true,\n      hardcodeConstants: true\n    });\n    const texturizeOutputData = this.gpu.createKernel(function(value) {\n      return value[this.thread.x];\n    }, {\n      output: [data[0].output.length],\n      outputToTexture: true,\n      outputImmutable: true,\n      hardcodeConstants: true\n    });\n    data.forEach(d => {\n      d.size = {input: d.input.length, output: d.output.length};\n      d.input = this._texturizeInputData(d.input);\n      d.output = texturizeOutputData(d.output);\n    });\n    return data;\n  }\n\n  toFunction() {\n    throw new Error('not implemented on NeuralNetworkGPU');\n  }\n\n}\n\nfunction weightedSumSigmoid(weights, biases, inputs) {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //sigmoid\n  return 1 / (1 + Math.exp(-sum));\n}\n\nfunction weightedSumRelu(weights, biases, inputs) {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //relu\n  return (sum < 0 ? 0 : sum);\n}\n\nfunction weightedSumLeakyRelu(weights, biases, inputs) {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //leaky relu\n  return (sum < 0 ? 0 : 0.01 * sum);\n}\n\nfunction weightedSumTanh(weights, biases, inputs) {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //tanh\n  return Math.tanh(sum);\n}\n\nfunction calcErrorOutput(output, targets) {\n  return targets[this.thread.x] - output;\n}\n\nfunction calcDeltasSigmoid(error, output) {\n  //sigmoid derivative\n  return error * output * (1 - output);\n}\n\nfunction calcDeltasRelu(error, output) {\n  //relu derivative\n  return output > 0 ? error : 0;\n}\n\nfunction calcDeltasLeakyRelu(error, output) {\n  //leaky relu derivative\n  return output > 0 ? error : 0.01 * error;\n}\n\nfunction calcDeltasTanh(error, output) {\n  //tanh derivative\n  return (1 - output * output) * error;\n}\n\nfunction calcError(nextWeights, nextDeltas){\n  let error = 0;\n  for(let k = 0; k < this.constants.size; k++){\n    error += nextDeltas[k] * nextWeights[k][this.thread.x];\n  }\n  return error;\n}\n\nfunction calcChanges(\n  previousChanges,\n  deltas,\n  previousOutputs\n) {\n  return (this.constants.learningRate * deltas[this.thread.y] * previousOutputs[this.thread.x])\n      + (this.constants.momentum * previousChanges[this.thread.y][this.thread.x]);\n}\n\nfunction addWeights(change, weights){\n  return change + weights[this.thread.y][this.thread.x];\n}\n\nfunction addBiases(biases, deltas){\n  return biases[this.thread.x] + (deltas[this.thread.x] * this.constants.learningRate);\n}\n\n// mean squared error, reimplemented for GPU\nfunction mse(errors) {\n  let sum = 0;\n  for (let i = 0; i < this.constants.size; i++) {\n    sum += Math.pow(errors[i], 2);\n  }\n  return sum / this.constants.size;\n}"]}
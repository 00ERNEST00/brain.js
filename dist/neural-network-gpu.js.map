{"version":3,"sources":["../src/neural-network-gpu.js"],"names":["NeuralNetworkGPU","options","Object","assign","defaults","hiddenSizes","hiddenLayers","layers","sizes","outputLayer","biases","weights","outputs","forwardPropagate","backwardPropagate","changesPropagate","weightsPropagate","biasesPropagate","weightsToFloat","megaKernel","deltas","changes","errors","count","error","gpu","mode","keepNetworkIntact","length","layer","size","Array","node","prevSize","buildRunInput","buildCalculateDeltas","buildGetChanges","buildChangeBiases","data","_options","trainDefaults","formatData","iterations","errorThresh","log","console","logPeriod","learningRate","callback","callbackPeriod","inputSize","input","outputSize","output","push","Math","max","floor","forEach","unshift","initialize","i","sum","j","err","trainPattern","target","runInput","calculateDeltas","getChanges","changeBiases","toArray","weightedSum","x","inputs","k","exp","kernel","createKernelMap","thread","constants","setDimensions","setOutputToTexture","result","calcError","calcDeltas","calcErrorOutput","nextWeights","nextDeltas","alias","delt","calcChanges","previousChange","previousOutputs","momentum","y","addWeights","change","delta","addBiases","inputLookup","outputLookup","toHash","constructor","tmp","datum","Float64Array","buildLookup","map","value","array","binaryThresh"],"mappings":"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","file":"neural-network-gpu.js","sourcesContent":["import lookup from './lookup';\nimport TrainStream from './train-stream';\nimport max from './utilities/max';\nimport mse from './utilities/mse';\nimport randos from './utilities/randos';\nimport range from './utilities/range';\nimport toArray from './utilities/to-array';\nimport zeros from './utilities/zeros';\nimport GPU from 'gpu.js';\n\n/**\n *\n * @param {object} options\n * @constructor\n */\nexport default class NeuralNetworkGPU {\n  constructor(options = {}) {\n    Object.assign(this, NeuralNetworkGPU.defaults, options);\n    this.hiddenSizes = options.hiddenLayers;\n    this.layers = null;\n    this.sizes = null;\n    this.outputLayer = null;\n    this.biases = null; // weights for bias nodes\n    this.weights = null;\n    this.outputs = null;\n\n    this.forwardPropagate = [];\n    this.backwardPropagate = [];\n    this.changesPropagate = [];\n    this.weightsPropagate = [];\n    this.biasesPropagate = [];\n    this.weightsToFloat = [];\n    this.megaKernel = [];\n    // state for training\n    this.deltas = null;\n    this.changes = null; // for momentum\n    this.errors = null;\n    this.count = 0;\n    this.error = 100;\n    this.gpu = new GPU({mode: 'gpu'});\n  }\n\n  /**\n   *\n   * @param {} sizes\n   * @param {Boolean} keepNetworkIntact\n   */\n  initialize(sizes, keepNetworkIntact) {\n    this.sizes = sizes;\n    this.outputLayer = this.sizes.length - 1;\n\n    if (!keepNetworkIntact) {\n      this.biases = []; // weights for bias nodes\n      this.weights = [];\n      this.outputs = [];\n    }\n\n    // state for training\n    this.changes = []; // for momentum\n    this.deltas = [];\n    this.errors = [];\n\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\n      let size = this.sizes[layer];\n      this.deltas[layer] = zeros(size);\n      this.errors[layer] = zeros(size);\n      if (!keepNetworkIntact) {\n        this.outputs[layer] = zeros(size);\n      }\n\n      if (layer > 0) {\n        this.biases[layer] = randos(size);\n\n        if (!keepNetworkIntact) {\n          this.weights[layer] = new Array(size);\n        }\n        this.changes[layer] = new Array(size);\n\n        for (let node = 0; node < size; node++) {\n          let prevSize = this.sizes[layer - 1];\n          if (!keepNetworkIntact) {\n            this.weights[layer][node] = randos(prevSize);\n          }\n          this.changes[layer][node] = zeros(prevSize);\n        }\n      }\n    }\n    this.buildRunInput();\n    this.buildCalculateDeltas();\n    this.buildGetChanges();\n    this.buildChangeBiases();\n  }\n\n\n  /**\n   *\n   * @param data\n   * @param options\n   * @returns {{error: number, iterations: number}}\n   */\n  train(data, _options = {}) {\n    const options = Object.assign({}, NeuralNetworkGPU.trainDefaults, _options);\n    data = this.formatData(data);\n    let iterations = options.iterations;\n    let errorThresh = options.errorThresh;\n    let log = options.log === true ? console.log : options.log;\n    let logPeriod = options.logPeriod;\n    let learningRate = _options.learningRate || this.learningRate || options.learningRate;\n    let callback = options.callback;\n    let callbackPeriod = options.callbackPeriod;\n    let sizes = [];\n    let inputSize = data[0].input.length;\n    let outputSize = data[0].output.length;\n    let hiddenSizes = this.hiddenSizes;\n    if (!hiddenSizes) {\n      sizes.push(Math.max(3, Math.floor(inputSize / 2)));\n    } else {\n      hiddenSizes.forEach(size => {\n        sizes.push(size);\n      });\n    }\n\n    sizes.unshift(inputSize);\n\n    sizes.push(outputSize);\n\n    this.initialize(sizes, options.keepNetworkIntact);\n\n    let error = 1;\n    let i;\n    for (i = 0; i < 1 && error > errorThresh; i++) {\n      this.count++;\n      let sum = 0;\n      for (let j = 0; j < data.length - 2; j++) {\n        let err = this.trainPattern(data[j].input, data[j].output, learningRate);\n        sum += err;\n      }\n      \n      error = sum / data.length;\n\n      if (log && (i % 1 == 0)) {\n        log('iterations:', i, 'training error:', error);\n      }\n      if (callback && (i % callbackPeriod == 0)) {\n        callback({ error: error, iterations: i });\n      }\n    }\n\n    return {\n      error: error,\n      iterations: i\n    };\n  }\n\n  /**\n   *\n   * @param input\n   * @param target\n   * @param learningRate\n   */\n  trainPattern(input, target, learningRate) {\n    learningRate = learningRate || this.learningRate;\n    // forward propagate\n    this.runInput(input);\n\n    // backward propagate\n    this.calculateDeltas(target);\n    this.getChanges(learningRate);\n    this.changeBiases(learningRate);\n    // if(this.count % 1 == 0){\n        for(let i = 0; i < this.errors.length; i++){\n          this.errors[i] = this.errors[i].toArray ? this.errors[i].toArray(this.gpu) : this.errors[i];\n        }\n        let error = this.error = mse(this.errors[this.outputLayer]);\n        return error;\n    // }else{/\n      // return this.error;\n    // }\n  }\n\n  // weights: [Layer1 - undefined, Layer2 - [[0,0], [0,0], [0,0]], Layer3 - [[0,0,0]]];\n  // changes: [Layer1 - undefined, Layer2 - [ [0,0], [0,0], [0,0] ], Layer3 - [[0,0,0]]];\n  // biases:  [Layer1 - undefined, Layer2 - [0, 0, 0], Layer3 - [0]]\n  // outputs: [Layer1 - [0,0], Layer2 - [0, 0, 0], Layer3 - [0]]\n  // errors:  [Layer1 - [0,0], Layer2 - [0,0,0], Layer3 - [0] ];\n  // deltas:  [Layer1 - [0,0], Layer2 - [0,0,0], Layer3 - [0] ];\n  // sizes: [2, 3, 1];\n\n  buildRunInput() {\n    function weightedSum(weights, biases, x, inputs) {\n      var sum = biases[x];\n      for (var k = 0; k < size; k++) {\n        sum += weights[x][k] * inputs[k];\n      }\n      return 1 / (1 + Math.exp(-sum));\n    }\n\n    for(var layer = 1; layer <= this.outputLayer; layer++){\n      const kernel = this.gpu.createKernelMap([weightedSum], \n        function(weights, biases, inputs){\n          return weightedSum(weights, biases, this.thread.x, inputs);\n        }, {\n        constants:{\n          size: this.sizes[layer - 1]\n        }\n      })\n      .setDimensions([this.sizes[layer]])\n      .setOutputToTexture(false);\n      this.forwardPropagate[layer] = kernel;\n    }\n  }\n\n  /**\n   *\n   * @param input\n   * @returns {*}\n   */\n  runInput(input){\n    let output;\n    this.outputs[0] = input;\n    for (var layer = 1; layer <= this.outputLayer; layer++) {\n      this.outputs[layer] = this.forwardPropagate[layer](\n        this.weights[layer], \n        this.biases[layer], \n        input\n      ).result;\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  buildCalculateDeltas(target){\n\n    function calcError(outputs, target) {\n      return target[this.thread.x] - outputs[this.thread.x];\n    }\n\n    function calcDeltas(error, output) {\n      return error * output * (1 - output);\n    }\n\n    function calcErrorOutput(nextWeights, nextDeltas){\n      var error = 0;\n      for(var k = 0; k < size; k++){\n        error += nextDeltas[k] * nextWeights[k][this.thread.x];\n      }\n      return error;\n    }\n\n    for(var layer = this.outputLayer; layer > 0; layer--){\n      if(layer == this.outputLayer){\n        const kernel = this.gpu.createKernelMap({\n          error: calcError,\n          deltas: calcDeltas\n        }, function(outputs, target){\n          var output = outputs[this.thread.x];\n          return calcDeltas(calcError(outputs, target), output);\n      })\n       .setDimensions([this.sizes[layer]]) \n       .setOutputToTexture(false);\n        \n        this.backwardPropagate[layer] = kernel;\n\n      }else{\n        const kernel = this.gpu.createKernelMap({\n          error: calcErrorOutput,\n          deltas: GPU.alias('delt',calcDeltas),\n        }, function(nextWeights, outputs, nextDeltas){\n          var output = outputs[this.thread.x];\n          return delt(calcErrorOutput(nextWeights, nextDeltas), output);\n        }, {\n          constants: {\n            size: this.deltas[layer + 1].length\n          }\n        })\n        .setDimensions([this.sizes[layer]])\n        .setOutputToTexture(false);\n        \n        this.backwardPropagate[layer] = kernel;\n      }\n    }\n  }\n\n  calculateDeltas(target,learningRate){\n    for (var layer = this.outputLayer; layer > 0; layer--) {\n      let output;\n      if(layer == this.outputLayer){\n        output = this.backwardPropagate[layer](\n          this.outputs[layer],\n          target);\n      } else {\n        output = this.backwardPropagate[layer](\n          this.weights[layer + 1],\n          this.outputs[layer],\n          this.deltas[layer + 1],\n        )}\n\n      this.errors[layer] = output.error.toArray ? output.error.toArray(this.gpu) : output.error;\n      console.log(this.errors[layer], 'errors');\n      this.deltas[layer] = output.result; \n      console.log(this.deltas[layer], 'deltas');\n    }\n  }\n\n  buildGetChanges(){\n    function calcChanges(previousChange, deltas, previousOutputs, learningRate, momentum, x, y) {\n      var sum = (learningRate * deltas * previousOutputs[x]);\n      // sum += (momentum * previousChange[y][x]);\n      \n      for (var i = 0; i < size; i++) {\n        sum += (momentum * previousChange[y][i]);\n      }\n      \n      return sum;\n    }\n\n    function addWeights(change, weights, x, y){\n      return change + weights[y][x];\n    }\n\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n     const kernel = this.gpu.createKernelMap({addWeights, calcChanges},\n        function(previousOutputs, deltas, weights, changes, learningRate, momentum){\n          var delta = deltas[this.thread.y];\n          var change = calcChanges(\n            changes, \n            delta, \n            previousOutputs, \n            learningRate, \n            momentum, \n            this.thread.x, \n            this.thread.y);\n\n          return addWeights(change, weights, this.thread.x, this.thread.y);\n        },{\n          constants:{\n            size: this.outputs[layer - 1].length\n          }\n        })\n          .setDimensions([this.sizes[layer -1], this.sizes[layer]])\n          .setOutputToTexture(false)\n          // .setDebug(true);\n        \n      this.changesPropagate[layer] = kernel;\n    }    \n  }\n  \n  getChanges(learningRate){\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      let output = this.changesPropagate[layer](\n        this.outputs[layer - 1],\n        this.deltas[layer],\n        this.weights[layer],\n        this.changes[layer],\n        learningRate,\n        this.momentum\n      );\n\n      this.changes[layer] = output.calcChanges.toArray ? output.calcChanges.toArray(this.gpu) : output.calcChanges; \n      console.log(this.changes[layer][0], 'changes')\n      this.weights[layer] = output.result;\n      console.log(this.weights[layer][0], 'weights')\n    }\n  }\n\n  buildChangeBiases() {\n    function addBiases(biases, deltas, learningRate, x){\n      return biases[x] + (deltas[x] * learningRate);\n    }\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n    \n      const kernel = this.gpu.createKernelMap({\n        addBiases\n      },function (biases, deltas, learningRate) {\n        return addBiases(biases, deltas, learningRate, this.thread.x);\n      })\n        .setDimensions([this.sizes[layer]])\n        .setOutputToTexture(false);\n\n      this.biasesPropagate[layer] = kernel;\n    }\n  }\n\n  changeBiases(learningRate) {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      let output = this.biasesPropagate[layer](\n        this.biases[layer],\n        this.deltas[layer],\n        learningRate\n      );\n      this.biases[layer] = output.result;\n    }\n  }\n\n  /**\n   *\n   * @param input\n   * @returns {*}\n   */\n  run(input) {\n    if (this.inputLookup) {\n      input = lookup.toArray(this.inputLookup, input);\n    }\n    let output = this.runInput(input);\n\n    if (this.outputLookup) {\n      output = lookup.toHash(this.outputLookup, output);\n    }\n    return output;\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {*}\n   */\n  formatData(data) {\n    if (data.constructor !== Array) { // turn stream datum into array\n      let tmp = [];\n      tmp.push(data);\n      data = tmp;\n    }\n    // turn sparse hash input into arrays with 0s as filler\n    let datum = data[0].input;\n    if (datum.constructor !== Array && !(datum instanceof Float64Array)) {\n      if (!this.inputLookup) {\n        this.inputLookup = lookup.buildLookup(data.map(value => value['input']));\n      }\n      data = data.map(datum => {\n        let array = lookup.toArray(this.inputLookup, datum.input);\n        return Object.assign({}, datum, { input: array });\n      }, this);\n    }\n\n    if (data[0].output.constructor !== Array) {\n      if (!this.outputLookup) {\n        this.outputLookup = lookup.buildLookup(data.map(value => value['output']));\n      }\n      data = data.map(datum => {\n        let array = lookup.toArray(this.outputLookup, datum.output);\n        return Object.assign({}, datum, { output: array });\n      }, this);\n    }\n    return data;\n  }\n\n}\n\nNeuralNetworkGPU.trainDefaults = {\n  iterations: 20000,\n  errorThresh: 0.005,\n  log: false,\n  logPeriod: 10,\n  learningRate: 0.3,\n  callback: null,\n  callbackPeriod: 10,\n  keepNetworkIntact: false\n};\n\nNeuralNetworkGPU.defaults = {\n  learningRate: 0.3,\n  momentum: 0.1,\n  binaryThresh: 0.5,\n  hiddenLayers: null\n};"]}
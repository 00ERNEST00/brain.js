{"version":3,"sources":["../src/neural-network.js"],"names":["NeuralNetwork","iterations","errorThresh","log","logPeriod","learningRate","momentum","callback","callbackPeriod","timeout","Infinity","binaryThresh","hiddenLayers","activation","options","Object","assign","constructor","defaults","hiddenSizes","trainOpts","updateTrainingOptions","trainDefaults","sizes","outputLayer","biases","weights","outputs","deltas","changes","errors","prototype","hasOwnProperty","runInput","calculateDeltas","Error","length","layer","size","Array","node","prevSize","setActivation","_runInputSigmoid","_calculateDeltasSigmoid","_runInputRelu","_calculateDeltasRelu","_runInputLeakyRelu","_calculateDeltasLeakyRelu","_runInputTanh","_calculateDeltasTanh","input","isRunnable","inputLookup","toArray","output","outputLookup","toHash","sum","k","Math","exp","tanh","data","push","max","floor","forEach","_initialize","opts","_setLogMethod","results","console","i","_trainPattern","status","error","_calculateTrainingError","_formatData","endTime","Date","now","_verifyIsInitialized","runTrainingTick","_trainingTick","_prepTraining","Promise","resolve","reject","thawedTrain","delay","each","stop","done","tick","trainError","target","_adjustWeights","incoming","delta","change","isArray","tmp","datum","Float32Array","buildLookup","map","value","array","isBinary","falsePos","falseNeg","truePos","trueNeg","misclasses","actual","expected","indexOf","misclass","stats","total","precision","recall","accuracy","layers","nodes","keys","j","bias","index","_getTrainOptsJSON","json","lookupFromHash","nodeHandle","layerNumber","nodeKey","result","w","join","toJSON","layersAsMath","key","Function","neuralNetwork","trainStream","checkFns","filter","c"],"mappings":"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","file":"neural-network.js","sourcesContent":["import lookup from './lookup';\nimport TrainStream from './train-stream';\nimport max from './utilities/max';\nimport mse from './utilities/mse';\nimport randos from './utilities/randos';\nimport range from './utilities/range';\nimport toArray from './utilities/to-array';\nimport zeros from './utilities/zeros';\nimport Thaw from 'thaw.js';\n\n/**\n * @param {object} options\n * @constructor\n */\nexport default class NeuralNetwork {\n  static get trainDefaults() {\n    return {\n      iterations: 20000,    // the maximum times to iterate the training data\n      errorThresh: 0.005,   // the acceptable error percentage from training data\n      log: false,           // true to use console.log, when a function is supplied it is used\n      logPeriod: 10,        // iterations between logging out\n      learningRate: 0.3,    // multiply's against the input and the delta then adds to momentum\n      momentum: 0.1,        // multiply's against the specified \"change\" then adds to learning rate for change\n      callback: null,       // a periodic call back that can be triggered while training\n      callbackPeriod: 10,   // the number of iterations through the training data between callback calls\n      timeout: Infinity     // the max number of milliseconds to train for\n    };\n  }\n\n  static get defaults() {\n    return {\n      binaryThresh: 0.5,     // ¯\\_(ツ)_/¯\n      hiddenLayers: [3],     // array of ints for the sizes of the hidden layers in the network\n      activation: 'sigmoid'  // Supported activation types ['sigmoid', 'relu', 'leaky-relu', 'tanh']\n    };\n  }\n\n  constructor(options = {}) {\n    Object.assign(this, this.constructor.defaults, options);\n    this.hiddenSizes = options.hiddenLayers;\n    this.trainOpts = {};\n    this.updateTrainingOptions(Object.assign({}, this.constructor.trainDefaults, options));\n\n    this.sizes = null;\n    this.outputLayer = null;\n    this.biases = null; // weights for bias nodes\n    this.weights = null;\n    this.outputs = null;\n\n    // state for training\n    this.deltas = null;\n    this.changes = null; // for momentum\n    this.errors = null;\n\n    if (!this.constructor.prototype.hasOwnProperty('runInput')) {\n      this.runInput = null;\n    }\n    if (!this.constructor.prototype.hasOwnProperty('calculateDeltas')) {\n      this.calculateDeltas = null;\n    }\n  }\n\n  /**\n   *\n   * Expects this.sizes to have been set\n   */\n  _initialize() {\n    if (!this.sizes) throw new Error ('Sizes must be set before initializing')\n\n    this.outputLayer = this.sizes.length - 1;\n    this.biases = []; // weights for bias nodes\n    this.weights = [];\n    this.outputs = [];\n\n    // state for training\n    this.deltas = [];\n    this.changes = []; // for momentum\n    this.errors = [];\n\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\n      let size = this.sizes[layer];\n      this.deltas[layer] = zeros(size);\n      this.errors[layer] = zeros(size);\n      this.outputs[layer] = zeros(size);\n\n      if (layer > 0) {\n        this.biases[layer] = randos(size);\n        this.weights[layer] = new Array(size);\n        this.changes[layer] = new Array(size);\n\n        for (let node = 0; node < size; node++) {\n          let prevSize = this.sizes[layer - 1];\n          this.weights[layer][node] = randos(prevSize);\n          this.changes[layer][node] = zeros(prevSize);\n        }\n      }\n    }\n\n    this.setActivation();\n  }\n\n  /**\n   *\n   * @param supported input: ['sigmoid', 'relu', 'leaky-relu', 'tanh']\n   */\n  setActivation(activation) {\n    this.activation = (activation) ? activation : this.activation;\n    switch (this.activation) {\n      case 'sigmoid':\n        this.runInput = this.runInput || this._runInputSigmoid;\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasSigmoid;\n        break;\n      case 'relu':\n        this.runInput = this.runInput || this._runInputRelu;\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasRelu;\n        break;\n      case 'leaky-relu':\n        this.runInput = this.runInput || this._runInputLeakyRelu;\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasLeakyRelu;\n        break;\n      case 'tanh':\n        this.runInput = this.runInput || this._runInputTanh;\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasTanh;\n        break;\n      default:\n        throw new Error('unknown activation ' + this.activation + ', The activation should be one of [\\'sigmoid\\', \\'relu\\', \\'leaky-relu\\', \\'tanh\\']');\n    }\n  }\n\n  /**\n   *\n   * @returns boolean\n   */\n  get isRunnable(){\n    if(!this.runInput){\n      console.error('Activation function has not been initialized, did you run train()?');\n      return false;\n    }\n\n    const checkFns = [\n      'sizes',\n      'outputLayer',\n      'biases',\n      'weights',\n      'outputs',\n      'deltas',\n      'changes',\n      'errors',\n    ].filter(c => this[c] === null);\n\n    if(checkFns.length > 0){\n      console.error(`Some settings have not been initialized correctly, did you run train()? Found issues with: ${checkFns.join(', ')}`);\n      return false;\n    }\n    return true;\n  }\n\n\n  /**\n   *\n   * @param input\n   * @returns {*}\n   */\n  run(input) {\n    if (!this.isRunnable) return null;\n    if (this.inputLookup) {\n      input = lookup.toArray(this.inputLookup, input);\n    }\n\n    let output = [...this.runInput(input)];\n\n    if (this.outputLookup) {\n      output = lookup.toHash(this.outputLookup, output);\n    }\n    return output;\n  }\n\n  /**\n   * trains via sigmoid\n   * @param input\n   * @returns {*}\n   */\n  _runInputSigmoid(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //sigmoid\n        this.outputs[layer][node] = 1 / (1 + Math.exp(-sum));\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  _runInputRelu(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //relu\n        this.outputs[layer][node] = (sum < 0 ? 0 : sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  _runInputLeakyRelu(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //leaky relu\n        this.outputs[layer][node] = (sum < 0 ? 0 : 0.01 * sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  _runInputTanh(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //tanh\n        this.outputs[layer][node] = Math.tanh(sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  /**\n   *\n   * @param data\n   * Verifies network sizes are initilaized\n   * If they are not it will initialize them based off the data set.\n   */\n  _verifyIsInitialized(data) {\n    if (this.sizes) return;\n\n    this.sizes = [];\n    this.sizes.push(data[0].input.length);\n    if (!this.hiddenSizes) {\n      this.sizes.push(Math.max(3, Math.floor(data[0].input.length / 2)));\n    } else {\n      this.hiddenSizes.forEach(size => {\n        this.sizes.push(size);\n      });\n    }\n    this.sizes.push(data[0].output.length)\n\n    this._initialize();\n  }\n\n  /**\n   *\n   * @param options\n   *    Supports all `trainDefaults` properties\n   *    also supports:\n   *       learningRate: (number),\n   *       momentum: (number),\n   *       activation: ['sigmoid', 'relu', 'leaky-relu', 'tanh']\n   */\n  updateTrainingOptions(opts) {\n    if (opts.iterations) { this.trainOpts.iterations = opts.iterations; }\n    if (opts.errorThresh) { this.trainOpts.errorThresh = opts.errorThresh; }\n    if (opts.log) { this._setLogMethod(opts.log); }\n    if (opts.logPeriod) { this.trainOpts.logPeriod = opts.logPeriod; }\n    if (opts.learningRate) { this.trainOpts.learningRate = opts.learningRate; }\n    if (opts.momentum) { this.trainOpts.momentum = opts.momentum; }\n    if (opts.callback) { this.trainOpts.callback = opts.callback; }\n    if (opts.callbackPeriod) { this.trainOpts.callbackPeriod = opts.callbackPeriod; }\n    if (opts.timeout) { this.trainOpts.timeout = opts.timeout; }\n    if (opts.activation) { this.activation = opts.activation; }\n  }\n\n  /**\n   *\n   *  Gets JSON of trainOpts object\n   *    NOTE: Activation is stored directly on JSON object and not in the training options\n   */\n  _getTrainOptsJSON() {\n    let results = {}\n    if (this.trainOpts.iterations) { results.iterations = this.trainOpts.iterations; }\n    if (this.trainOpts.errorThresh) { results.errorThresh = this.trainOpts.errorThresh; }\n    if (this.trainOpts.logPeriod) { results.logPeriod = this.trainOpts.logPeriod; }\n    if (this.trainOpts.learningRate) { results.learningRate = this.trainOpts.learningRate; }\n    if (this.trainOpts.momentum) { results.momentum = this.trainOpts.momentum; }\n    if (this.trainOpts.callback) { results.callback = this.trainOpts.callback; }\n    if (this.trainOpts.callbackPeriod) { results.callbackPeriod = this.trainOpts.callbackPeriod; }\n    if (this.trainOpts.timeout) { results.timeout = this.trainOpts.timeout; }\n    if (this.trainOpts.log) { results.log = true; }\n    return results;\n  }\n\n  /**\n   *\n   * @param log\n   * if a method is passed in method is used\n   * if false passed in nothing is logged\n   * @returns error\n   */\n  _setLogMethod(log) {\n    if (typeof log === 'function'){\n      this.trainOpts.log = log;\n    } else if (log) {\n      this.trainOpts.log = console.log;\n    } else {\n      this.trainOpts.log = false;\n    }\n  }\n\n  /**\n   *\n   * @param data\n   * @param learning Rate\n   * @returns error\n   */\n  _calculateTrainingError(data) {\n    let sum = 0;\n    for (let i = 0; i < data.length; ++i) {\n      sum += this._trainPattern(data[i].input, data[i].output);\n    }\n    return sum / data.length;\n  }\n\n  /**\n   *\n   * @param status { iterations: number, error: number}\n   * @param options\n   */\n  _trainingTick(data, status) {\n    status.iterations++;\n    status.error = this._calculateTrainingError(data);\n\n    if (this.trainOpts.log && (status.iterations % this.trainOpts.logPeriod === 0)) {\n      this.trainOpts.log(`iterations: ${status.iterations}, training error: ${status.error}`);\n    }\n\n    if (this.trainOpts.callback && (status.iterations % this.trainOpts.callbackPeriod === 0)) {\n      this.trainOpts.callback(Object.assign(status));\n    }\n  }\n\n  /**\n   *\n   * @param data\n   * @param options\n   * @private\n   * @return {{runTrainingTick: function, status: {error: number, iterations: number}}}\n   */\n  _prepTraining(data, options) {\n    this.updateTrainingOptions(options);\n    data = this._formatData(data);\n    const endTime = Date.now() + this.trainOpts.timeout;\n\n    const status = {\n      error: 1,\n      iterations: 0\n    };\n\n    this._verifyIsInitialized(data);\n\n    const runTrainingTick = () => {\n      if (status.iterations < this.trainOpts.iterations && status.error > this.trainOpts.errorThresh && Date.now() < endTime) {\n        this._trainingTick(data, status);\n        return true;\n      }\n      return false;\n    };\n\n    return {\n      runTrainingTick,\n      status\n    }\n  }\n  /**\n   *\n   * @param data\n   * @param options\n   * @returns {{error: number, iterations: number}}\n   */\n  train(data, options = {}) {\n    const { runTrainingTick, status } = this._prepTraining(data, options);\n\n    while (runTrainingTick());\n    return status;\n  }\n\n  /**\n   *\n   * @param data\n   * @param options\n   * @returns {Promise}\n   * @resolves {{error: number, iterations: number}}\n   * @rejects {{trainError: string, status: {error: number, iterations: number}}\n   */\n  trainAsync(data, options = {}) {\n    const {runTrainingTick, status} = this._prepTraining(data, options);\n\n    return new Promise((resolve, reject) => {\n      try {\n        const thawedTrain = new Thaw(new Array(this.trainOpts.iterations), {\n          delay: true,\n          each: () => runTrainingTick() ? null : thawedTrain.stop(),\n          done: () => resolve(status)\n        });\n        thawedTrain.tick();\n      } catch (trainError) {\n        reject({trainError, status});\n      }\n    });\n  }\n\n  /**\n   *\n   * @param input\n   * @param target\n   */\n  _trainPattern(input, target) {\n\n    // forward propagate\n    this.runInput(input);\n\n    // back propagate\n    this.calculateDeltas(target);\n    this._adjustWeights();\n\n    let error = mse(this.errors[this.outputLayer]);\n    return error;\n  }\n\n  /**\n   *\n   * @param target\n   */\n  _calculateDeltasSigmoid(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = error * output * (1 - output);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  _calculateDeltasRelu(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = output > 0 ? error : 0;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  _calculateDeltasLeakyRelu(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = output > 0 ? error : 0.01 * error;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  _calculateDeltasTanh(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = (1 - output * output) * error;\n      }\n    }\n  }\n\n  /**\n   *\n   * Changes weights of networks\n   */\n  _adjustWeights() {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      let incoming = this.outputs[layer - 1];\n\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let delta = this.deltas[layer][node];\n\n        for (let k = 0; k < incoming.length; k++) {\n          let change = this.changes[layer][node][k];\n\n          change = (this.trainOpts.learningRate * delta * incoming[k])\n            + (this.trainOpts.momentum * change);\n\n          this.changes[layer][node][k] = change;\n          this.weights[layer][node][k] += change;\n        }\n        this.biases[layer][node] += this.trainOpts.learningRate * delta;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {*}\n   */\n  _formatData(data) {\n    if (!Array.isArray(data)) { // turn stream datum into array\n      let tmp = [];\n      tmp.push(data);\n      data = tmp;\n    }\n    // turn sparse hash input into arrays with 0s as filler\n    let datum = data[0].input;\n    if (!Array.isArray(datum) && !(datum instanceof Float32Array)) {\n      if (!this.inputLookup) {\n        this.inputLookup = lookup.buildLookup(data.map(value => value['input']));\n      }\n      data = data.map(datum => {\n        let array = lookup.toArray(this.inputLookup, datum.input);\n        return Object.assign({}, datum, { input: array });\n      }, this);\n    }\n\n    if (!Array.isArray(data[0].output)) {\n      if (!this.outputLookup) {\n        this.outputLookup = lookup.buildLookup(data.map(value => value['output']));\n      }\n      data = data.map(datum => {\n        let array = lookup.toArray(this.outputLookup, datum.output);\n        return Object.assign({}, datum, { output: array });\n      }, this);\n    }\n    return data;\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {\n   *  {\n   *    error: number,\n   *    misclasses: Array\n   *  }\n   * }\n   */\n  test(data) {\n    data = this._formatData(data);\n\n    // for binary classification problems with one output node\n    let isBinary = data[0].output.length === 1;\n    let falsePos = 0;\n    let falseNeg = 0;\n    let truePos = 0;\n    let trueNeg = 0;\n\n    // for classification problems\n    let misclasses = [];\n\n    // run each pattern through the trained network and collect\n    // error and misclassification statistics\n    let sum = 0;\n    for (let i = 0; i < data.length; i++) {\n      let output = this.runInput(data[i].input);\n      let target = data[i].output;\n\n      let actual, expected;\n      if (isBinary) {\n        actual = output[0] > this.binaryThresh ? 1 : 0;\n        expected = target[0];\n      }\n      else {\n        actual = output.indexOf(max(output));\n        expected = target.indexOf(max(target));\n      }\n\n      if (actual !== expected) {\n        let misclass = data[i];\n        Object.assign(misclass, {\n          actual: actual,\n          expected: expected\n        });\n        misclasses.push(misclass);\n      }\n\n      if (isBinary) {\n        if (actual === 0 && expected === 0) {\n          trueNeg++;\n        } else if (actual === 1 && expected === 1) {\n          truePos++;\n        } else if (actual === 0 && expected === 1) {\n          falseNeg++;\n        } else if (actual === 1 && expected === 0) {\n          falsePos++;\n        }\n      }\n\n      let errors = output.map((value, i) => {\n        return target[i] - value;\n      });\n      sum += mse(errors);\n    }\n    let error = sum / data.length;\n\n    let stats = {\n      error: error,\n      misclasses: misclasses\n    };\n\n    if (isBinary) {\n      Object.assign(stats, {\n        trueNeg: trueNeg,\n        truePos: truePos,\n        falseNeg: falseNeg,\n        falsePos: falsePos,\n        total: data.length,\n        precision: truePos / (truePos + falsePos),\n        recall: truePos / (truePos + falseNeg),\n        accuracy: (trueNeg + truePos) / data.length\n      });\n    }\n    return stats;\n  }\n\n  /**\n   *\n   * @returns\n   *  {\n   *    layers: [\n   *      {\n   *        x: {},\n   *        y: {}\n   *      },\n   *      {\n   *        '0': {\n   *          bias: -0.98771313,\n   *          weights: {\n   *            x: 0.8374838,\n   *            y: 1.245858\n   *          },\n   *        '1': {\n   *          bias: 3.48192004,\n   *          weights: {\n   *            x: 1.7825821,\n   *            y: -2.67899\n   *          }\n   *        }\n   *      },\n   *      {\n   *        f: {\n   *          bias: 0.27205739,\n   *          weights: {\n   *            '0': 1.3161821,\n   *            '1': 2.00436\n   *          }\n   *        }\n   *      }\n   *    ]\n   *  }\n   */\n  toJSON() {\n    let layers = [];\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\n      layers[layer] = {};\n\n      let nodes;\n      // turn any internal arrays back into hashes for readable json\n      if (layer === 0 && this.inputLookup) {\n        nodes = Object.keys(this.inputLookup);\n      }\n      else if (layer === this.outputLayer && this.outputLookup) {\n        nodes = Object.keys(this.outputLookup);\n      }\n      else {\n        nodes = range(0, this.sizes[layer]);\n      }\n\n      for (let j = 0; j < nodes.length; j++) {\n        let node = nodes[j];\n        layers[layer][node] = {};\n\n        if (layer > 0) {\n          layers[layer][node].bias = this.biases[layer][j];\n          layers[layer][node].weights = {};\n          for (let k in layers[layer - 1]) {\n            let index = k;\n            if (layer === 1 && this.inputLookup) {\n              index = this.inputLookup[k];\n            }\n            layers[layer][node].weights[k] = this.weights[layer][j][index];\n          }\n        }\n      }\n    }\n    return {\n      sizes: this.sizes,\n      layers,\n      outputLookup:!!this.outputLookup,\n      inputLookup:!!this.inputLookup,\n      activation: this.activation,\n      trainOpts: this._getTrainOptsJSON()\n    };\n  }\n\n  /**\n   *\n   * @param json\n   * @returns {NeuralNetwork}\n   */\n  fromJSON (json) {\n    this.sizes = json.sizes\n    this._initialize();\n\n    for (let i = 0; i <= this.outputLayer; i++) {\n      let layer = json.layers[i];\n      if (i === 0 && (!layer[0] || json.inputLookup)) {\n        this.inputLookup = lookup.lookupFromHash(layer);\n      }\n      else if (i === this.outputLayer && (!layer[0] || json.outputLookup)) {\n        this.outputLookup = lookup.lookupFromHash(layer);\n      }\n      if (i > 0) {\n        const nodes = Object.keys(layer);\n        this.sizes[i] = nodes.length;\n        for (let j in nodes) {\n          const node = nodes[j];\n          this.biases[i][j] = layer[node].bias;\n          this.weights[i][j] = toArray(layer[node].weights);\n        }\n      }\n    }\n    this.updateTrainingOptions(json.trainOpts)\n    this.setActivation();\n    return this;\n  }\n\n  /**\n   *\n   * @returns {Function}\n   */\n  toFunction() {\n    const activation = this.activation;\n    function nodeHandle(layers, layerNumber, nodeKey) {\n      if (layerNumber === 0) {\n        return (typeof nodeKey === 'string'\n          ? `input['${nodeKey}']`\n          : `input[${nodeKey}]`);\n      }\n\n      const layer = layers[layerNumber];\n      const node = layer[nodeKey];\n      let result = [node.bias];\n      for (let w in node.weights) {\n        if (node.weights[w] < 0) {\n          result.push(`${node.weights[w]}*(${nodeHandle(layers, layerNumber - 1, w)})`);\n        } else {\n          result.push(`+${node.weights[w]}*(${nodeHandle(layers, layerNumber - 1, w)})`);\n        }\n      }\n\n      switch (activation) {\n        case 'sigmoid':\n          return `1/(1+1/Math.exp(${result.join('')}))`;\n        case 'relu':\n          return `var sum = ${result.join('')};(sum < 0 ? 0 : sum);`;\n        case 'leaky-relu':\n          return `var sum = ${result.join('')};(sum < 0 ? 0 : 0.01 * sum);`;\n        case 'tanh':\n          return `Math.tanh(${result.join('')});`;\n        default:\n          throw new Error('unknown activation type ' + activation);\n      }\n    }\n\n    const layers = this.toJSON().layers;\n    const layersAsMath = [];\n    let result;\n    for (let i in layers[layers.length - 1]) {\n      layersAsMath.push(nodeHandle(layers, layers.length - 1, i));\n    }\n    if (this.outputLookup) {\n      result = `{${\n        Object.keys(this.outputLookup)\n          .map((key, i) => `'${key}':${layersAsMath[i]}`)\n      }}`;\n    } else {\n      result = `[${layersAsMath.join(',')}]`;\n    }\n    return new Function('input', `return ${result}`);\n  }\n\n  /**\n   * This will create a TrainStream (WriteStream) for us to send the training data to.\n   * @param opts training options\n   * @returns {TrainStream|*}\n   */\n  createTrainStream(opts) {\n    opts = opts || {};\n    opts.neuralNetwork = this;\n    this.setActivation();\n    this.trainStream = new TrainStream(opts);\n    return this.trainStream;\n  }\n}"]}
{"version":3,"sources":["../src/neural-network.js"],"names":["NeuralNetwork","iterations","errorThresh","log","logPeriod","learningRate","callback","callbackPeriod","momentum","binaryThresh","hiddenLayers","activation","options","Object","assign","constructor","defaults","hiddenSizes","sizes","outputLayer","biases","weights","outputs","deltas","changes","errors","prototype","hasOwnProperty","runInput","calculateDeltas","length","layer","size","Array","node","prevSize","setActivation","runInputSigmoid","calculateDeltasSigmoid","runInputRelu","calculateDeltasRelu","runInputLeakyRelu","calculateDeltasLeakyRelu","runInputTanh","calculateDeltasTanh","Error","input","isRunnable","inputLookup","toArray","output","outputLookup","toHash","sum","k","Math","exp","tanh","data","inputSize","outputSize","push","max","floor","forEach","unshift","console","i","trainPattern","status","error","_calculateTrainingError","_options","trainDefaults","formatData","_setLogMethod","_getSizesFromData","initialize","_checkTrainingTick","Promise","resolve","reject","endTime","Date","now","trainTimeMs","items","thaw","delay","each","stop","done","tick","target","adjustWeights","incoming","delta","change","isArray","tmp","datum","Float32Array","buildLookup","map","value","array","isBinary","falsePos","falseNeg","truePos","trueNeg","misclasses","actual","expected","indexOf","misclass","stats","total","precision","recall","accuracy","layers","nodes","keys","j","bias","index","json","lookupFromHash","nodeHandle","layerNumber","nodeKey","result","w","join","toJSON","layersAsMath","key","Function","opts","neuralNetwork","trainStream","checkFns","filter","c"],"mappings":"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","file":"neural-network.js","sourcesContent":["import lookup from './lookup';\nimport TrainStream from './train-stream';\nimport max from './utilities/max';\nimport mse from './utilities/mse';\nimport randos from './utilities/randos';\nimport range from './utilities/range';\nimport toArray from './utilities/to-array';\nimport zeros from './utilities/zeros';\nimport Thaw from 'thaw.js';\n\n/**\n * @param {object} options\n * @constructor\n */\nexport default class NeuralNetwork {\n  static get trainDefaults() {\n    return {\n      iterations: 20000,\n      errorThresh: 0.005,\n      log: false,\n      logPeriod: 10,\n      learningRate: 0.3,\n      callback: null,\n      callbackPeriod: 10\n    };\n  }\n\n  static get defaults() {\n    return {\n      learningRate: 0.3,\n      momentum: 0.1,\n      binaryThresh: 0.5,\n      hiddenLayers: null,\n      activation: 'sigmoid'\n    };\n  }\n\n  constructor(options = {}) {\n    Object.assign(this, this.constructor.defaults, options);\n    this.hiddenSizes = options.hiddenLayers;\n\n    this.sizes = null;\n    this.outputLayer = null;\n    this.biases = null; // weights for bias nodes\n    this.weights = null;\n    this.outputs = null;\n\n    // state for training\n    this.deltas = null;\n    this.changes = null; // for momentum\n    this.errors = null;\n\n    if (!this.constructor.prototype.hasOwnProperty('runInput')) {\n      this.runInput = null;\n    }\n    if (!this.constructor.prototype.hasOwnProperty('calculateDeltas')) {\n      this.calculateDeltas = null;\n    }\n  }\n\n  /**\n   *\n   * @param {Number[]} sizes\n   */\n  initialize(sizes) {\n    this.sizes = sizes;\n    this.outputLayer = this.sizes.length - 1;\n    this.biases = []; // weights for bias nodes\n    this.weights = [];\n    this.outputs = [];\n\n    // state for training\n    this.deltas = [];\n    this.changes = []; // for momentum\n    this.errors = [];\n\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\n      let size = this.sizes[layer];\n      this.deltas[layer] = zeros(size);\n      this.errors[layer] = zeros(size);\n      this.outputs[layer] = zeros(size);\n\n      if (layer > 0) {\n        this.biases[layer] = randos(size);\n        this.weights[layer] = new Array(size);\n        this.changes[layer] = new Array(size);\n\n        for (let node = 0; node < size; node++) {\n          let prevSize = this.sizes[layer - 1];\n          this.weights[layer][node] = randos(prevSize);\n          this.changes[layer][node] = zeros(prevSize);\n        }\n      }\n    }\n\n    this.setActivation();\n  }\n\n  setActivation() {\n    switch (this.activation) {\n      case 'sigmoid':\n        this.runInput = this.runInput || this.runInputSigmoid;\n        this.calculateDeltas = this.calculateDeltas || this.calculateDeltasSigmoid;\n        break;\n      case 'relu':\n        this.runInput = this.runInput || this.runInputRelu;\n        this.calculateDeltas = this.calculateDeltas || this.calculateDeltasRelu;\n        break;\n      case 'leaky-relu':\n        this.runInput = this.runInput || this.runInputLeakyRelu;\n        this.calculateDeltas = this.calculateDeltas || this.calculateDeltasLeakyRelu;\n        break;\n      case 'tanh':\n        this.runInput = this.runInput || this.runInputTanh;\n        this.calculateDeltas = this.calculateDeltas || this.calculateDeltasTanh;\n        break;\n      default:\n        throw new Error('unknown activation ' + this.activation);\n    }\n  }\n\n  /**\n   *\n   * @returns boolean\n   */\n  get isRunnable(){\n    if(!this.runInput){\n      console.error('Activation function has not been initialized, did you run train()?');\n      return false;\n    }\n\n    const checkFns = [\n      'sizes',\n      'outputLayer',\n      'biases',\n      'weights',\n      'outputs',\n      'deltas',\n      'changes',\n      'errors',\n    ].filter(c => this[c] === null);\n\n    if(checkFns.length > 0){\n      console.error(`Some settings have not been initialized correctly, did you run train()? Found issues with: ${checkFns.join(', ')}`);\n      return false;\n    }\n    return true;\n  }\n\n\n  /**\n   *\n   * @param input\n   * @returns {*}\n   */\n  run(input) {\n    if (!this.isRunnable) return null;\n    if (this.inputLookup) {\n      input = lookup.toArray(this.inputLookup, input);\n    }\n\n    let output = [...this.runInput(input)];\n\n    if (this.outputLookup) {\n      output = lookup.toHash(this.outputLookup, output);\n    }\n    return output;\n  }\n\n  /**\n   * trains via sigmoid\n   * @param input\n   * @returns {*}\n   */\n  runInputSigmoid(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //sigmoid\n        this.outputs[layer][node] = 1 / (1 + Math.exp(-sum));\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  runInputRelu(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //relu\n        this.outputs[layer][node] = (sum < 0 ? 0 : sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  runInputLeakyRelu(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //leaky relu\n        this.outputs[layer][node] = (sum < 0 ? 0 : 0.01 * sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  runInputTanh(input) {\n    this.outputs[0] = input;  // set output state of input layer\n\n    let output = null;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let weights = this.weights[layer][node];\n\n        let sum = this.biases[layer][node];\n        for (let k = 0; k < weights.length; k++) {\n          sum += weights[k] * input[k];\n        }\n        //tanh\n        this.outputs[layer][node] = Math.tanh(sum);\n      }\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  /**\n   *\n   * @param data\n   * @returns sizes\n   */\n  _getSizesFromData(data) {\n    let sizes = [];\n    let inputSize = data[0].input.length;\n    let outputSize = data[0].output.length;\n    let hiddenSizes = this.hiddenSizes;\n    if (!hiddenSizes) {\n      sizes.push(Math.max(3, Math.floor(inputSize / 2)));\n    } else {\n      hiddenSizes.forEach(size => {\n        sizes.push(size);\n      });\n    }\n\n    sizes.unshift(inputSize);\n    sizes.push(outputSize);\n    return sizes;\n  }\n\n\n  /**\n   *\n   * @param log\n   * if a method is passed in method is used\n   * if false passed in nothing is logged\n   * @returns error\n   */\n  _setLogMethod(log) {\n    if (log) return console.log;\n    return false;\n  }\n\n  /**\n   *\n   * @param data\n   * @param learning Rate\n   * @returns error\n   */\n  _calculateTrainingError(data, learningRate) {\n    let sum = 0;\n    for (let i = 0; i < data.length; ++i) {\n      sum += this.trainPattern(data[i].input, data[i].output, learningRate);\n    }\n    return sum / data.length;\n  }\n\n  /**\n   *\n   * @param status { iterations: number, error: number}\n   * @param options\n   */\n  _checkTrainingTick(data, status, options) {\n    status.iterations++;\n    status.error = this._calculateTrainingError(data, options.learningRate);\n\n    if (options.log && (status.iterations % options.logPeriod === 0)) {\n      options.log(`iterations: ${status.iterations}, training error: ${status.error}`);\n    }\n\n    if (options.callback && (status.iterations % options.callbackPeriod === 0)) {\n      options.callback(Object.assign(status));\n    }\n  }\n\n  /**\n   *\n   * @param data\n   * @param _options\n   * @returns {{error: number, iterations: number}}\n   */\n  train(data, _options = {}) {\n    const options = Object.assign({}, this.constructor.trainDefaults, _options);\n    data = this.formatData(data);\n    options.log = this._setLogMethod(options.log);\n    options.learningRate = _options.learningRate || this.learningRate || options.learningRate;\n    var status = {\n      error: 1,\n      iterations: 0\n    };\n\n    if (this.sizes === null) {\n      let sizes = this._getSizesFromData(data);\n      this.initialize(sizes);\n    }\n\n    while ( status.iterations < options.iterations && status.error > options.errorThresh) {\n      this._checkTrainingTick(data, status, options);\n    }\n\n    return status;\n  }\n\n  /**\n   *\n   * @param data\n   * @param _options\n   * @param cb\n   * @returns {{error: number, iterations: number}}\n   */\n  trainAsync(data, _options = {}) {\n    return new Promise((resolve, reject) => {\n      const options = Object.assign({}, this.constructor.trainDefaults, _options);\n      data = this.formatData(data);\n      options.log = this._setLogMethod(options.log);\n      options.learningRate = _options.learningRate || this.learningRate || options.learningRate;\n      let endTime = Date.now() + options.trainTimeMs;\n\n      let status = {\n        error: 1,\n        iterations: 0\n      };\n\n      if (this.sizes === null) {\n        let sizes = this._getSizesFromData(data);\n        this.initialize(sizes);\n      }\n\n      const items = new Array(options.iterations);\n      const thaw  = new Thaw(items, {\n        delay: true,\n        each: () => {\n          this._checkTrainingTick(data, status, options);\n\n          if (status.error < options.errorThresh) {\n            thaw.stop();\n          }\n        },\n        done: () => {\n          resolve(status);\n        }\n      });\n\n      thaw.tick();\n    });\n  }\n\n  /**\n   *\n   * @param input\n   * @param target\n   * @param learningRate\n   */\n  trainPattern(input, target, learningRate) {\n    learningRate = learningRate || this.learningRate;\n\n    // forward propagate\n    this.runInput(input);\n\n    // back propagate\n    this.calculateDeltas(target);\n    this.adjustWeights(learningRate);\n\n    let error = mse(this.errors[this.outputLayer]);\n    return error;\n  }\n\n  /**\n   *\n   * @param target\n   */\n  calculateDeltasSigmoid(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = error * output * (1 - output);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  calculateDeltasRelu(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = output > 0 ? error : 0;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  calculateDeltasLeakyRelu(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = output > 0 ? error : 0.01 * error;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param target\n   */\n  calculateDeltasTanh(target) {\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let output = this.outputs[layer][node];\n\n        let error = 0;\n        if (layer === this.outputLayer) {\n          error = target[node] - output;\n        }\n        else {\n          let deltas = this.deltas[layer + 1];\n          for (let k = 0; k < deltas.length; k++) {\n            error += deltas[k] * this.weights[layer + 1][k][node];\n          }\n        }\n        this.errors[layer][node] = error;\n        this.deltas[layer][node] = (1 - output * output) * error;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param learningRate\n   */\n  adjustWeights(learningRate) {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      let incoming = this.outputs[layer - 1];\n\n      for (let node = 0; node < this.sizes[layer]; node++) {\n        let delta = this.deltas[layer][node];\n\n        for (let k = 0; k < incoming.length; k++) {\n          let change = this.changes[layer][node][k];\n\n          change = (learningRate * delta * incoming[k])\n            + (this.momentum * change);\n\n          this.changes[layer][node][k] = change;\n          this.weights[layer][node][k] += change;\n        }\n        this.biases[layer][node] += learningRate * delta;\n      }\n    }\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {*}\n   */\n  formatData(data) {\n    if (!Array.isArray(data)) { // turn stream datum into array\n      let tmp = [];\n      tmp.push(data);\n      data = tmp;\n    }\n    // turn sparse hash input into arrays with 0s as filler\n    let datum = data[0].input;\n    if (!Array.isArray(datum) && !(datum instanceof Float32Array)) {\n      if (!this.inputLookup) {\n        this.inputLookup = lookup.buildLookup(data.map(value => value['input']));\n      }\n      data = data.map(datum => {\n        let array = lookup.toArray(this.inputLookup, datum.input);\n        return Object.assign({}, datum, { input: array });\n      }, this);\n    }\n\n    if (!Array.isArray(data[0].output)) {\n      if (!this.outputLookup) {\n        this.outputLookup = lookup.buildLookup(data.map(value => value['output']));\n      }\n      data = data.map(datum => {\n        let array = lookup.toArray(this.outputLookup, datum.output);\n        return Object.assign({}, datum, { output: array });\n      }, this);\n    }\n    return data;\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {\n   *  {\n   *    error: number,\n   *    misclasses: Array\n   *  }\n   * }\n   */\n  test(data) {\n    data = this.formatData(data);\n\n    // for binary classification problems with one output node\n    let isBinary = data[0].output.length === 1;\n    let falsePos = 0;\n    let falseNeg = 0;\n    let truePos = 0;\n    let trueNeg = 0;\n\n    // for classification problems\n    let misclasses = [];\n\n    // run each pattern through the trained network and collect\n    // error and misclassification statistics\n    let sum = 0;\n    for (let i = 0; i < data.length; i++) {\n      let output = this.runInput(data[i].input);\n      let target = data[i].output;\n\n      let actual, expected;\n      if (isBinary) {\n        actual = output[0] > this.binaryThresh ? 1 : 0;\n        expected = target[0];\n      }\n      else {\n        actual = output.indexOf(max(output));\n        expected = target.indexOf(max(target));\n      }\n\n      if (actual !== expected) {\n        let misclass = data[i];\n        Object.assign(misclass, {\n          actual: actual,\n          expected: expected\n        });\n        misclasses.push(misclass);\n      }\n\n      if (isBinary) {\n        if (actual === 0 && expected === 0) {\n          trueNeg++;\n        } else if (actual === 1 && expected === 1) {\n          truePos++;\n        } else if (actual === 0 && expected === 1) {\n          falseNeg++;\n        } else if (actual === 1 && expected === 0) {\n          falsePos++;\n        }\n      }\n\n      let errors = output.map((value, i) => {\n        return target[i] - value;\n      });\n      sum += mse(errors);\n    }\n    let error = sum / data.length;\n\n    let stats = {\n      error: error,\n      misclasses: misclasses\n    };\n\n    if (isBinary) {\n      Object.assign(stats, {\n        trueNeg: trueNeg,\n        truePos: truePos,\n        falseNeg: falseNeg,\n        falsePos: falsePos,\n        total: data.length,\n        precision: truePos / (truePos + falsePos),\n        recall: truePos / (truePos + falseNeg),\n        accuracy: (trueNeg + truePos) / data.length\n      });\n    }\n    return stats;\n  }\n\n  /**\n   *\n   * @returns\n   *  {\n   *    layers: [\n   *      {\n   *        x: {},\n   *        y: {}\n   *      },\n   *      {\n   *        '0': {\n   *          bias: -0.98771313,\n   *          weights: {\n   *            x: 0.8374838,\n   *            y: 1.245858\n   *          },\n   *        '1': {\n   *          bias: 3.48192004,\n   *          weights: {\n   *            x: 1.7825821,\n   *            y: -2.67899\n   *          }\n   *        }\n   *      },\n   *      {\n   *        f: {\n   *          bias: 0.27205739,\n   *          weights: {\n   *            '0': 1.3161821,\n   *            '1': 2.00436\n   *          }\n   *        }\n   *      }\n   *    ]\n   *  }\n   */\n  toJSON() {\n    let layers = [];\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\n      layers[layer] = {};\n\n      let nodes;\n      // turn any internal arrays back into hashes for readable json\n      if (layer === 0 && this.inputLookup) {\n        nodes = Object.keys(this.inputLookup);\n      }\n      else if (layer === this.outputLayer && this.outputLookup) {\n        nodes = Object.keys(this.outputLookup);\n      }\n      else {\n        nodes = range(0, this.sizes[layer]);\n      }\n\n      for (let j = 0; j < nodes.length; j++) {\n        let node = nodes[j];\n        layers[layer][node] = {};\n\n        if (layer > 0) {\n          layers[layer][node].bias = this.biases[layer][j];\n          layers[layer][node].weights = {};\n          for (let k in layers[layer - 1]) {\n            let index = k;\n            if (layer === 1 && this.inputLookup) {\n              index = this.inputLookup[k];\n            }\n            layers[layer][node].weights[k] = this.weights[layer][j][index];\n          }\n        }\n      }\n    }\n    return {\n      sizes: this.sizes,\n      layers,\n      outputLookup:!!this.outputLookup,\n      inputLookup:!!this.inputLookup,\n      activation: this.activation\n    };\n  }\n\n  /**\n   *\n   * @param json\n   * @returns {NeuralNetwork}\n   */\n  fromJSON (json) {\n    this.initialize (json.sizes);\n\n    for (let i = 0; i <= this.outputLayer; i++) {\n      let layer = json.layers[i];\n      if (i === 0 && (!layer[0] || json.inputLookup)) {\n        this.inputLookup = lookup.lookupFromHash(layer);\n      }\n      else if (i === this.outputLayer && (!layer[0] || json.outputLookup)) {\n        this.outputLookup = lookup.lookupFromHash(layer);\n      }\n      if (i > 0) {\n        const nodes = Object.keys(layer);\n        this.sizes[i] = nodes.length;\n        for (let j in nodes) {\n          const node = nodes[j];\n          this.biases[i][j] = layer[node].bias;\n          this.weights[i][j] = toArray(layer[node].weights);\n        }\n      }\n    }\n\n    this.setActivation();\n    return this;\n  }\n\n  /**\n   *\n   * @returns {Function}\n   */\n  toFunction() {\n    const activation = this.activation;\n    function nodeHandle(layers, layerNumber, nodeKey) {\n      if (layerNumber === 0) {\n        return (typeof nodeKey === 'string'\n          ? `input['${nodeKey}']`\n          : `input[${nodeKey}]`);\n      }\n\n      const layer = layers[layerNumber];\n      const node = layer[nodeKey];\n      let result = [node.bias];\n      for (let w in node.weights) {\n        if (node.weights[w] < 0) {\n          result.push(`${node.weights[w]}*(${nodeHandle(layers, layerNumber - 1, w)})`);\n        } else {\n          result.push(`+${node.weights[w]}*(${nodeHandle(layers, layerNumber - 1, w)})`);\n        }\n      }\n\n      switch (activation) {\n        case 'sigmoid':\n          return `1/(1+1/Math.exp(${result.join('')}))`;\n        case 'relu':\n          return `var sum = ${result.join('')};(sum < 0 ? 0 : sum);`;\n        case 'leaky-relu':\n          return `var sum = ${result.join('')};(sum < 0 ? 0 : 0.01 * sum);`;\n        case 'tanh':\n          return `Math.tanh(${result.join('')});`;\n        default:\n          throw new Error('unknown activation type ' + activation);\n      }\n    }\n\n    const layers = this.toJSON().layers;\n    const layersAsMath = [];\n    let result;\n    for (let i in layers[layers.length - 1]) {\n      layersAsMath.push(nodeHandle(layers, layers.length - 1, i));\n    }\n    if (this.outputLookup) {\n      result = `{${\n        Object.keys(this.outputLookup)\n          .map((key, i) => `'${key}':${layersAsMath[i]}`)\n      }}`;\n    } else {\n      result = `[${layersAsMath.join(',')}]`;\n    }\n    return new Function('input', `return ${result}`);\n  }\n\n  /**\n   * This will create a TrainStream (WriteStream) for us to send the training data to.\n   * @param opts training options\n   * @returns {TrainStream|*}\n   */\n  createTrainStream(opts) {\n    opts = opts || {};\n    opts.neuralNetwork = this;\n    this.setActivation();\n    this.trainStream = new TrainStream(opts);\n    return this.trainStream;\n  }\n}"]}
{"version":3,"sources":["../../src/layer/lstm.js"],"names":["LSTM","settings","inputGate","LSTMCell","forgetGate","outputGate","memory","layer","inputLayer","previousOutputs","inputWeights","peepholeWeights","bias","retainCell","writeCell","cell"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;;;IAEqBA,I;;;AACnB,gBAAYC,QAAZ,EAAsB;AAAA;;AAAA,4GACdA,QADc;;AAGpB,UAAKC,SAAL,GAAiB,IAAIC,QAAJ,EAAjB;AACA,UAAKC,UAAL,GAAkB,IAAID,QAAJ,EAAlB;AACA,UAAKE,UAAL,GAAkB,IAAIF,QAAJ,EAAlB;AACA,UAAKG,MAAL,GAAc,IAAIH,QAAJ,EAAd;AANoB;AAOrB;;;;iCAEmBF,Q,EAAU;AAC5B,aAAO,UAACM,KAAD,EAAQC,UAAR,EAAoBC,eAApB,EAAwC;AAC7C,YAAMP,YAAY,oBAChB,gBACE,gBACE,qBACEK,MAAML,SAAN,CAAgBQ,YADlB,EAEEF,UAFF,CADF,EAKE,qBACED,MAAML,SAAN,CAAgBS,eADlB,EAEEF,eAFF,CALF,CADF,EAWEF,MAAML,SAAN,CAAgBU,IAXlB,CADgB,CAAlB;;AAgBA,YAAMR,aAAa,oBACjB,gBACE,gBACE,qBACEG,MAAMH,UAAN,CAAiBM,YADnB,EAEEF,UAFF,CADF,EAKE,qBACED,MAAMH,UAAN,CAAiBO,eADnB,EAEEF,eAFF,CALF,CADF,EAWEF,MAAMH,UAAN,CAAiBQ,IAXnB,CADiB,CAAnB;;AAgBA;AACA,YAAMP,aAAa,oBACjB,gBACE,gBACE,qBACEE,MAAMF,UAAN,CAAiBK,YADnB,EAEEF,UAFF,CADF,EAKE,qBACED,MAAMF,UAAN,CAAiBM,eADnB,EAEEF,eAFF,CALF,CADF,EAWEF,MAAMF,UAAN,CAAiBO,IAXnB,CADiB,CAAnB;;AAgBA;AACA,YAAMN,SAAS,iBACb,gBACE,gBACE,qBACEC,MAAMD,MAAN,CAAaI,YADf,EAEEF,UAFF,CADF,EAKE,qBACED,MAAMD,MAAN,CAAaK,eADf,EAEEF,eAFF,CALF,CADF,EAWEF,MAAMD,MAAN,CAAaM,IAXf,CADa,CAAf;;AAgBA;AACA,YAAMC,aAAa,4BAAgBT,UAAhB,EAA4BI,UAA5B,CAAnB,CApE6C,CAoEe;AAC5D,YAAMM,YAAY,4BAAgBZ,SAAhB,EAA2BI,MAA3B,CAAlB,CArE6C,CAqES;AACtD,YAAMS,OAAO,gBAAIF,UAAJ,EAAgBC,SAAhB,CAAb,CAtE6C,CAsEJ;;AAEzC;AACA,eAAO,4BACLT,UADK,EAEL,iBAAKU,IAAL,CAFK,CAAP;AAID,OA7ED;AA8ED;;;;;;kBAzFkBf,I;;IA4FfG,Q,GACJ,oBAAc;AAAA;;AACZ,OAAKO,YAAL,GAAoB,EAApB;AACA,OAAKC,eAAL,GAAuB,EAAvB;AACA,OAAKC,IAAL,GAAY,EAAZ;AACD,C","file":"lstm.js","sourcesContent":["import Group from './base';\nimport { sigmoid, add, multiply, multiplyElement, tanh } from './index';\n\nexport default class LSTM extends Group {\n  constructor(settings) {\n    super(settings);\n\n    this.inputGate = new LSTMCell();\n    this.forgetGate = new LSTMCell();\n    this.outputGate = new LSTMCell();\n    this.memory = new LSTMCell();\n  }\n\n  static createKernel(settings) {\n    return (layer, inputLayer, previousOutputs) => {\n      const inputGate = sigmoid(\n        add(\n          add(\n            multiply(\n              layer.inputGate.inputWeights,\n              inputLayer\n            ),\n            multiply(\n              layer.inputGate.peepholeWeights,\n              previousOutputs\n            )\n          ),\n          layer.inputGate.bias\n        )\n      );\n\n      const forgetGate = sigmoid(\n        add(\n          add(\n            multiply(\n              layer.forgetGate.inputWeights,\n              inputLayer\n            ),\n            multiply(\n              layer.forgetGate.peepholeWeights,\n              previousOutputs\n            )\n          ),\n          layer.forgetGate.bias\n        )\n      );\n\n      // output gate\n      const outputGate = sigmoid(\n        add(\n          add(\n            multiply(\n              layer.outputGate.inputWeights,\n              inputLayer\n            ),\n            multiply(\n              layer.outputGate.peepholeWeights,\n              previousOutputs\n            )\n          ),\n          layer.outputGate.bias\n        )\n      );\n\n      // write operation on cells\n      const memory = tanh(\n        add(\n          add(\n            multiply(\n              layer.memory.inputWeights,\n              inputLayer\n            ),\n            multiply(\n              layer.memory.peepholeWeights,\n              previousOutputs\n            )\n          ),\n          layer.memory.bias\n        )\n      );\n\n      // compute new cell activation\n      const retainCell = multiplyElement(forgetGate, inputLayer); // what do we keep from cell\n      const writeCell = multiplyElement(inputGate, memory); // what do we write to cell\n      const cell = add(retainCell, writeCell); // new cell contents\n\n      // compute hidden state as gated, saturated cell activations\n      return multiplyElement(\n        outputGate,\n        tanh(cell)\n      );\n    };\n  }\n}\n\nclass LSTMCell {\n  constructor() {\n    this.inputWeights = {};\n    this.peepholeWeights = {};\n    this.bias = {};\n  }\n}"]}
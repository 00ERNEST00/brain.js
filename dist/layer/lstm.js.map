{"version":3,"sources":["../../src/layer/lstm.js"],"names":["settings","input","recurrentInput","inputGateWeights","inputGatePeepholes","inputGateBias","inputGate","forgetGateWeights","forgetGatePeepholes","forgetGateBias","forgetGate","outputGateWeights","outputGatePeepholes","outputGateBias","outputGate","memoryWeights","memoryPeepholes","memoryBias","memory","retainCell","writeCell","cell"],"mappings":";;;;;;AAAA;;kBASe,UAACA,QAAD,EAAWC,KAAX,EAAkBC,cAAlB,EAAqC;AAClD,MAAMC,mBAAmB,oBAAzB;AACA,MAAMC,qBAAqB,oBAA3B;AACA,MAAMC,gBAAgB,oBAAtB;AACA,MAAMC,YAAY,oBAChB,gBACE,gBACE,qBACEH,gBADF,EAEEF,KAFF,CADF,EAKE,qBACEG,kBADF,EAEEF,cAFF,CALF,CADF,EAWEG,aAXF,CADgB,CAAlB;;AAgBA,MAAME,oBAAoB,oBAA1B;AACA,MAAMC,sBAAsB,oBAA5B;AACA,MAAMC,iBAAiB,oBAAvB;AACA,MAAMC,aAAa,oBACjB,gBACE,gBACE,qBACEH,iBADF,EAEEN,KAFF,CADF,EAKE,qBACEO,mBADF,EAEEN,cAFF,CALF,CADF,EAWEO,cAXF,CADiB,CAAnB;;AAgBA,MAAME,oBAAoB,oBAA1B;AACA,MAAMC,sBAAsB,oBAA5B;AACA,MAAMC,iBAAiB,oBAAvB;AACA,MAAMC,aAAa,oBACjB,gBACE,gBACE,qBACEH,iBADF,EAEEV,KAFF,CADF,EAKE,qBACEW,mBADF,EAEEV,cAFF,CALF,CADF,EAWEW,cAXF,CADiB,CAAnB;;AAgBA,MAAME,gBAAgB,oBAAtB;AACA,MAAMC,kBAAkB,oBAAxB;AACA,MAAMC,aAAa,oBAAnB;AACA,MAAMC,SAAS,iBACb,gBACE,gBACE,qBACEH,aADF,EAEEd,KAFF,CADF,EAKE,qBACEe,eADF,EAEEd,cAFF,CALF,CADF,EAWEe,UAXF,CADa,CAAf;;AAgBA;AACA,MAAME,aAAa,4BAAgBT,UAAhB,EAA4BT,KAA5B,CAAnB,CA9EkD,CA8EK;AACvD,MAAMmB,YAAY,4BAAgBd,SAAhB,EAA2BY,MAA3B,CAAlB,CA/EkD,CA+EI;AACtD,MAAMG,OAAO,gBAAIF,UAAJ,EAAgBC,SAAhB,CAAb,CAhFkD,CAgFT;;AAEzC;AACA,SAAO,4BACLN,UADK,EAEL,iBAAKO,IAAL,CAFK,CAAP;AAID,C","file":"lstm.js","sourcesContent":["import {\n  add,\n  multiply,\n  multiplyElement,\n  random,\n  sigmoid,\n  tanh\n} from './index';\n\nexport default (settings, input, recurrentInput) => {\n  const inputGateWeights = random();\n  const inputGatePeepholes = random();\n  const inputGateBias = random();\n  const inputGate = sigmoid(\n    add(\n      add(\n        multiply(\n          inputGateWeights,\n          input\n        ),\n        multiply(\n          inputGatePeepholes,\n          recurrentInput\n        )\n      ),\n      inputGateBias\n    )\n  );\n\n  const forgetGateWeights = random();\n  const forgetGatePeepholes = random();\n  const forgetGateBias = random();\n  const forgetGate = sigmoid(\n    add(\n      add(\n        multiply(\n          forgetGateWeights,\n          input\n        ),\n        multiply(\n          forgetGatePeepholes,\n          recurrentInput\n        )\n      ),\n      forgetGateBias\n    )\n  );\n\n  const outputGateWeights = random();\n  const outputGatePeepholes = random();\n  const outputGateBias = random();\n  const outputGate = sigmoid(\n    add(\n      add(\n        multiply(\n          outputGateWeights,\n          input\n        ),\n        multiply(\n          outputGatePeepholes,\n          recurrentInput\n        )\n      ),\n      outputGateBias\n    )\n  );\n\n  const memoryWeights = random();\n  const memoryPeepholes = random();\n  const memoryBias = random();\n  const memory = tanh(\n    add(\n      add(\n        multiply(\n          memoryWeights,\n          input\n        ),\n        multiply(\n          memoryPeepholes,\n          recurrentInput\n        )\n      ),\n      memoryBias\n    )\n  );\n\n  // compute new cell activation\n  const retainCell = multiplyElement(forgetGate, input); // what do we keep from cell\n  const writeCell = multiplyElement(inputGate, memory); // what do we write to cell\n  const cell = add(retainCell, writeCell); // new cell contents\n\n  // compute hidden state as gated, saturated cell activations\n  return multiplyElement(\n    outputGate,\n    tanh(cell)\n  );\n}"]}
{"version":3,"sources":["../../src/layer/multiply-weights.js"],"names":["predict","learn","MultiplyWeights","settings","inputLayer","width","height","predictKernel","output","learnKernel","outputs","weights","deltas","inputs","sum","i","x","thread","y","delta"],"mappings":"AAAA;;;;;;;;QAgCgBA,O,GAAAA,O;QAQAC,K,GAAAA,K;;AAtChB;;;;AACA;;;;;;;;;;;;IAEqBC,e;;;AACnB,2BAAYC,QAAZ,EAAsBC,UAAtB,EAAkC;AAAA;;AAAA,kIAC1BD,QAD0B;;AAEhC,UAAKE,KAAL,GAAaD,WAAWC,KAAxB;AACA,UAAKC,MAAL,GAAcF,WAAWE,MAAzB;AACA,UAAKF,UAAL,GAAkBA,UAAlB;AAJgC;AAKjC;;;;mCAEc;AACb,WAAKG,aAAL,GAAqB,0BAAWP,OAAX,EAAoB;AACvCQ,gBAAQ,CAAC,KAAKH,KAAN,EAAa,KAAKC,MAAlB;AAD+B,OAApB,CAArB;;AAIA,WAAKG,WAAL,GAAmB,0BAAWR,KAAX,EAAkB;AACnCO,gBAAQ,CAAC,KAAKH,KAAN,EAAa,KAAKC,MAAlB;AAD2B,OAAlB,CAAnB;AAGD;;;8BAES;AACR,WAAKI,OAAL,GAAe,KAAKH,aAAL,CAAmB,KAAKH,UAAL,CAAgBM,OAAnC,EAA4C,KAAKC,OAAjD,CAAf;AACD;;;4BAEO;AACN,WAAKC,MAAL,GAAc,KAAKH,WAAL,CAAiB,KAAKL,UAAL,CAAgBM,OAAjC,EAA0C,KAAKE,MAA/C,CAAd;AACD;;;;;;kBAxBkBV,e;AA2Bd,SAASF,OAAT,CAAiBa,MAAjB,EAAyBF,OAAzB,EAAkC;AACvC,MAAIG,MAAM,CAAV;AACA,OAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAI,KAAKP,MAAL,CAAYQ,CAA/B,EAAkCD,GAAlC,EAAuC;AACrCD,WAAOH,QAAQ,KAAKM,MAAL,CAAYC,CAApB,EAAuBH,CAAvB,IAA4BF,OAAOE,CAAP,EAAU,KAAKE,MAAL,CAAYD,CAAtB,CAAnC;AACD;AACD,SAAOF,GAAP;AACD;;AAEM,SAASb,KAAT,CAAeY,MAAf,EAAuBD,MAAvB,EAA+B;AACpC,MAAMO,QAAQP,OAAO,KAAKK,MAAL,CAAYC,CAAnB,EAAsB,KAAKD,MAAL,CAAYD,CAAlC,CAAd;AACA,MAAIF,MAAM,CAAV;AACA,OAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAI,KAAKP,MAAL,CAAYQ,CAA/B,EAAkCD,GAAlC,EAAuC;AACrCD,WAAOD,OAAO,KAAKI,MAAL,CAAYC,CAAnB,EAAsBH,CAAtB,IAA2BI,KAAlC;AACD;AACD,SAAOL,GAAP;AACD","file":"multiply-weights.js","sourcesContent":["'use strict';\n\nimport Base from './base';\nimport makeKernel from '../utilities/make-kernel';\n\nexport default class MultiplyWeights extends Base {\n  constructor(settings, inputLayer) {\n    super(settings);\n    this.width = inputLayer.width;\n    this.height = inputLayer.height;\n    this.inputLayer = inputLayer;\n  }\n\n  setupKernels() {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.width, this.height]\n    });\n\n    this.learnKernel = makeKernel(learn, {\n      output: [this.width, this.height]\n    });\n  }\n\n  predict() {\n    this.outputs = this.predictKernel(this.inputLayer.outputs, this.weights);\n  }\n\n  learn() {\n    this.deltas = this.learnKernel(this.inputLayer.outputs, this.deltas);\n  }\n}\n\nexport function predict(inputs, weights) {\n  let sum = 0;\n  for(let i = 0; i < this.output.x; i++) {\n    sum += weights[this.thread.y][i] * inputs[i][this.thread.x];\n  }\n  return sum;\n}\n\nexport function learn(inputs, deltas) {\n  const delta = deltas[this.thread.y][this.thread.x];\n  let sum = 0;\n  for(let i = 0; i < this.output.x; i++) {\n    sum += inputs[this.thread.y][i] * delta;\n  }\n  return sum;\n}\n\n"]}
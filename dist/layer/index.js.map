{"version":3,"sources":["../../src/layer/index.js"],"names":["add","inputLayer1","inputLayer2","convolution","settings","inputLayer","dropout","fullyConnected","input","leakyRelu","multiply","multiplyElement","multiplyWeights","output","pool","regression","relu","sigmoid","softMax","svm","tanh","Add","Base","Convolution","Dropout","FullyConnected","Input","LeakyRelu","Multiply","MultiplyElement","MultiplyWeights","Output","Pool","Regression","Relu","Sigmoid","SoftMax","SVM","Tanh"],"mappings":"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","file":"index.js","sourcesContent":["import Add from './add';\nimport Base from './base';\nimport Convolution from './convolution';\nimport Dropout from './dropout';\nimport FullyConnected from './fully-connected';\nimport Input from './input';\nimport LeakyRelu from './leaky-relu';\nimport Multiply from './multiply';\nimport MultiplyWeights from './multiply-weights';\nimport MultiplyElement from './multiply-element';\nimport Output from './output';\nimport Pool from './pool';\nimport Relu from './relu';\nimport Regression from './regression';\nimport Sigmoid from './sigmoid';\nimport SoftMax from './soft-max';\nimport SVM from './svm';\nimport Tanh from './tanh';\n\nfunction add(inputLayer1, inputLayer2) {\n  return new Add([inputLayer1, inputLayer2]);\n}\nfunction convolution(settings, inputLayer) {\n  return new Convolution(settings, inputLayer);\n}\nfunction dropout(settings, inputLayer) {\n  return new Dropout(settings, inputLayer);\n}\nfunction fullyConnected(settings, inputLayer) {\n  return new FullyConnected(settings, inputLayer);\n}\nfunction input(settings) {\n  return new Input(settings);\n}\nfunction leakyRelu(inputLayer) {\n  return new LeakyRelu(inputLayer);\n}\nfunction multiply(inputLayer1, inputLayer2) {\n  return new Multiply([inputLayer1, inputLayer2]);\n}\nfunction multiplyElement(inputLayer1, inputLayer2) {\n  return new MultiplyElement(inputLayer1, inputLayer2);\n}\nfunction multiplyWeights(settings, inputLayer) {\n  return new MultiplyWeights(settings, inputLayer);\n}\nfunction output(settings, inputLayer) {\n  return new Output(settings, inputLayer);\n}\nfunction pool(settings, inputLayer) {\n  return new Pool(settings, inputLayer);\n}\nfunction regression(settings, inputLayer) {\n  return new Regression(settings, inputLayer);\n}\nfunction relu(inputLayer) {\n  return new Relu(inputLayer);\n}\nfunction sigmoid(inputLayer) {\n  return new Sigmoid(inputLayer);\n}\nfunction softMax(settings, inputLayer) {\n  return new SoftMax(settings, inputLayer);\n}\nfunction svm(settings, inputLayer) {\n  return new SVM(settings, inputLayer);\n}\nfunction tanh(inputLayer) {\n  return new Tanh(inputLayer);\n}\n\nexport {\n  Add,\n  add,\n  Base,\n  Convolution,\n  convolution,\n  Dropout,\n  dropout,\n  FullyConnected,\n  fullyConnected,\n  Input,\n  input,\n  LeakyRelu,\n  leakyRelu,\n  Multiply,\n  multiply,\n  MultiplyElement,\n  multiplyElement,\n  MultiplyWeights,\n  multiplyWeights,\n  Output,\n  output,\n  Pool,\n  pool,\n  Regression,\n  regression,\n  Relu,\n  relu,\n  Sigmoid,\n  sigmoid,\n  SoftMax,\n  softMax,\n  SVM,\n  svm,\n  Tanh,\n  tanh\n};"]}
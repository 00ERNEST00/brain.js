{"version":3,"sources":["../../src/layer/weigh.js"],"names":["predict","Weigh","inputLayers","height","Error","width","predictKernel","output","constants","inputWidth","weights","weights1","weights2","sum","index","thread","x"],"mappings":";;;;;;;;QA6BgBA,O,GAAAA,O;;AA7BhB;;;;AACA;;;;;;;;;;;;IACqBC,K;;;AACnB,iBAAYC,WAAZ,EAAyB;AAAA;;AAAA;;AAEvB,UAAKA,WAAL,GAAmBA,WAAnB;;AAEA,QAAIA,YAAYC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,YAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;AACD;AACA,UAAKC,KAAL,GAAaH,YAAY,CAAZ,EAAeG,KAA5B;AACA,UAAKF,MAAL,GAAc,CAAd;AATuB;AAUxB;;;;mCAEc;AACb,WAAKG,aAAL,GAAqB,0BAAWN,OAAX,EAAoB;AACvCO,gBAAQ,CAAC,KAAKF,KAAN,EAAa,KAAKF,MAAlB,CAD+B;AAEvCK,mBAAW;AACTC,sBAAY,KAAKP,WAAL,CAAiB,CAAjB,EAAoBG;AADvB;AAF4B,OAApB,CAArB;AAMD;;;8BAES;AACR,WAAKK,OAAL,GAAe,KAAKJ,aAAL,CAAmB,KAAKJ,WAAL,CAAiB,CAAjB,EAAoBQ,OAAvC,EAAgD,KAAKR,WAAL,CAAiB,CAAjB,EAAoBQ,OAApE,CAAf;AACD;;;;;;kBAxBkBT,K;AA2Bd,SAASD,OAAT,CAAiBW,QAAjB,EAA2BC,QAA3B,EAAqC;AAC1C,MAAIC,MAAM,CAAV;AACA,OAAK,IAAIC,QAAQ,CAAjB,EAAoBA,QAAQ,KAAKN,SAAL,CAAeC,UAA3C,EAAuDK,OAAvD,EAAgE;AAC9DD,WAAOF,SAAS,CAAT,EAAYG,KAAZ,IAAqBF,SAASE,KAAT,EAAgB,KAAKC,MAAL,CAAYC,CAA5B,CAA5B;AACD;AACD,SAAOH,GAAP;AACD","file":"weigh.js","sourcesContent":["import Base from './base';\nimport makeKernel from '../utilities/make-kernel'\nexport default class Weigh extends Base {\n  constructor(inputLayers) {\n    super();\n    this.inputLayers = inputLayers;\n\n    if (inputLayers.height > 0) {\n      throw new Error('inputLayers[0] should be height of 1');\n    }\n    //TODO: make this less sensitive\n    this.width = inputLayers[1].width;\n    this.height = 1;\n  }\n\n  setupKernels() {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.width, this.height],\n      constants: {\n        inputWidth: this.inputLayers[0].width\n      }\n    });\n  }\n\n  predict() {\n    this.weights = this.predictKernel(this.inputLayers[0].weights, this.inputLayers[1].weights);\n  }\n}\n\nexport function predict(weights1, weights2) {\n  let sum = 0;\n  for (let index = 0; index < this.constants.inputWidth; index++) {\n    sum += weights1[0][index] * weights2[index][this.thread.x];\n  }\n  return sum;\n}"]}
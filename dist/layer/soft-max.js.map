{"version":3,"sources":["../../src/layer/soft-max.js"],"names":["SoftMax","settings","inputLayer","getMaxInput","inputs","maxInput","Infinity","z","constants","inputDepth","y","inputHeight","x","inputWidth","input","getExponentialSum","exponentialSum","Math","exp","getExponential","thread","predict","exponentials","learn","target","indicator"],"mappings":";;;;;;AAAA;;;;;;;;;;;;IAEqBA,O;;;AACnB,mBAAYC,QAAZ,EAAsBC,UAAtB,EAAkC;AAAA;;AAAA,kHAC1BD,QAD0B;;AAEhC,UAAKC,UAAL,GAAkBA,UAAlB;AAFgC;AAGjC;;;;;kBAJkBF,O;;;AAOrB,SAASG,WAAT,CAAqBC,MAArB,EAA6B;AAC3B,MAAIC,WAAW,CAACC,QAAhB;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKC,SAAL,CAAeC,UAAnC,EAA+CF,GAA/C,EAAoD;AAClD,SAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAI,KAAKF,SAAL,CAAeG,WAAnC,EAAgDD,GAAhD,EAAqD;AACnD,WAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAI,KAAKJ,SAAL,CAAeK,UAAnC,EAA+CD,GAA/C,EAAoD;AAClD,YAAME,QAAQV,OAAOG,CAAP,EAAUG,CAAV,EAAaE,CAAb,CAAd;AACA,YAAIE,QAAQT,QAAZ,EAAsB;AACpBA,qBAAWS,KAAX;AACD;AACF;AACF;AACF;AACD,SAAOT,QAAP;AACD;;AAED,SAASU,iBAAT,CAA2BX,MAA3B,EAAmCC,QAAnC,EAA6C;AAC3C,MAAIW,iBAAiB,CAArB;AACA,OAAK,IAAIT,IAAI,CAAb,EAAgBA,IAAI,KAAKC,SAAL,CAAeC,UAAnC,EAA+CF,GAA/C,EAAoD;AAClD,SAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAI,KAAKF,SAAL,CAAeG,WAAnC,EAAgDD,GAAhD,EAAqD;AACnD,WAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAI,KAAKJ,SAAL,CAAeK,UAAnC,EAA+CD,GAA/C,EAAoD;AAClDI,0BAAkBC,KAAKC,GAAL,CAASd,OAAOG,CAAP,EAAUG,CAAV,EAAaE,CAAb,IAAkBP,QAA3B,CAAlB;AACD;AACF;AACF;AACD,SAAOW,cAAP;AACD;;AAED,SAASG,cAAT,CAAwBf,MAAxB,EAAgCC,QAAhC,EAA0C;AACxC,SAAOY,KAAKC,GAAL,CAASd,OAAO,KAAKgB,MAAL,CAAYb,CAAnB,EAAsB,KAAKa,MAAL,CAAYV,CAAlC,EAAqC,KAAKU,MAAL,CAAYR,CAAjD,IAAsDP,QAA/D,CAAP;AACD;;AAED,SAASgB,OAAT,CAAiBC,YAAjB,EAA+BN,cAA/B,EAA+C;AAC7C,SAAOM,aAAa,KAAKF,MAAL,CAAYb,CAAzB,EAA4B,KAAKa,MAAL,CAAYV,CAAxC,EAA2C,KAAKU,MAAL,CAAYR,CAAvD,KAA6DI,cAApE;AACD;;AAED,SAASO,KAAT,CAAeC,MAAf,EAAuBF,YAAvB,EAAqC;AACnC,MAAMG,YAAY,KAAKL,MAAL,CAAYR,CAAZ,KAAkBY,MAAlB,GAA2B,CAA3B,GAA+B,CAAjD;AACA,SAAO,EAAEC,YAAYH,aAAaE,MAAb,CAAd,CAAP;AACD;;AAED","file":"soft-max.js","sourcesContent":["import Base from './base';\n\nexport default class SoftMax extends Base {\n  constructor(settings, inputLayer) {\n    super(settings);\n    this.inputLayer = inputLayer;\n  }\n}\n\nfunction getMaxInput(inputs) {\n  let maxInput = -Infinity;\n  for (let z = 0; z < this.constants.inputDepth; z++) {\n    for (let y = 0; y < this.constants.inputHeight; y++) {\n      for (let x = 0; x < this.constants.inputWidth; x++) {\n        const input = inputs[z][y][x];\n        if (input > maxInput) {\n          maxInput = input;\n        }\n      }\n    }\n  }\n  return maxInput;\n}\n\nfunction getExponentialSum(inputs, maxInput) {\n  let exponentialSum = 0;\n  for (let z = 0; z < this.constants.inputDepth; z++) {\n    for (let y = 0; y < this.constants.inputHeight; y++) {\n      for (let x = 0; x < this.constants.inputWidth; x++) {\n        exponentialSum += Math.exp(inputs[z][y][x] - maxInput);\n      }\n    }\n  }\n  return exponentialSum;\n}\n\nfunction getExponential(inputs, maxInput) {\n  return Math.exp(inputs[this.thread.z][this.thread.y][this.thread.x] - maxInput);\n}\n\nfunction predict(exponentials, exponentialSum) {\n  return exponentials[this.thread.z][this.thread.y][this.thread.x] /= exponentialSum;\n}\n\nfunction learn(target, exponentials) {\n  const indicator = this.thread.x === target ? 1 : 0;\n  return -(indicator - exponentials[target]);\n}\n\n//TODO: handle: `return -Math.log(this.es[y]);` in learn"]}
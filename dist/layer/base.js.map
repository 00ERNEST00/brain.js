{"version":3,"sources":["../../src/layer/base.js"],"names":["Base","width","height","depth","weights","errors","deltas","changes","settings","predictKernel","compareKernel","learnKernel","praxis","Object","assign","constructor","defaults","hasOwnProperty","previousLayer","nextLayer","run","toArray"],"mappings":";;;;;;;;;;IAAqBA,I;;;wBACG;AACpB,aAAO;AACLC,eAAO,CADF;AAELC,gBAAQ,CAFH;AAGLC,eAAO,CAHF;AAILC,iBAAS,IAJJ;AAKLC,gBAAQ,IALH;AAMLC,gBAAQ,IANH;AAOLC,iBAAS;AAPJ,OAAP;AASD;;;AAED,kBAA2B;AAAA,QAAfC,QAAe,uEAAJ,EAAI;;AAAA;;AACzB;AACA,SAAKP,KAAL,GAAa,IAAb;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,KAAL,GAAa,IAAb;;AAEA;AACA,SAAKM,aAAL,GAAqB,IAArB;AACA,SAAKC,aAAL,GAAqB,IAArB;AACA,SAAKC,WAAL,GAAmB,IAAnB;;AAEA;AACA,SAAKN,MAAL,GAAc,IAAd;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKF,OAAL,GAAe,IAAf;;AAEA,SAAKQ,MAAL,GAAc,IAAd;AACAC,WAAOC,MAAP,CAAc,IAAd,EAAoB,KAAKC,WAAL,CAAiBC,QAArC,EAA+CR,QAA/C;;AAEA;AACA,QAAIA,SAASS,cAAT,CAAwB,QAAxB,CAAJ,EAAuC;AACrC,WAAKL,MAAL,GAAcJ,SAASI,MAAT,CAAgB,IAAhB,CAAd;AACD;AACF;;;;+BAEU,CAAE;;;mCAEE,CAAE;;;8BAEP,CAAE;;;4BAEJM,a,EAAeC,S,EAAW,CAAE;;;4BAE5B;AACN,WAAKf,OAAL,GAAe,KAAKQ,MAAL,CAAYQ,GAAZ,CAAgB,KAAKhB,OAArB,EAA8B,KAAKE,MAAnC,CAAf;AACD;;;8BAES;AACR,aAAO,KAAKF,OAAL,CAAaiB,OAAb,EAAP;AACD;;;;;;kBApDkBrB,I","file":"base.js","sourcesContent":["export default class Base {\n  static get defaults() {\n    return {\n      width: 1,\n      height: 1,\n      depth: 1,\n      weights: null,\n      errors: null,\n      deltas: null,\n      changes: null\n    };\n  }\n\n  constructor(settings = {}) {\n    //size\n    this.width = null;\n    this.height = null;\n    this.depth = null;\n\n    //methods\n    this.predictKernel = null;\n    this.compareKernel = null;\n    this.learnKernel = null;\n\n    //what matters :P\n    this.errors = null;\n    this.deltas = null;\n    this.weights = null;\n\n    this.praxis = null;\n    Object.assign(this, this.constructor.defaults, settings);\n\n    // special settings\n    if (settings.hasOwnProperty('praxis')) {\n      this.praxis = settings.praxis(this);\n    }\n  }\n\n  validate() {}\n\n  setupKernels() {}\n\n  predict() {}\n\n  compare(previousLayer, nextLayer) {}\n\n  learn() {\n    this.weights = this.praxis.run(this.weights, this.deltas);\n  }\n\n  toArray() {\n    return this.weights.toArray();\n  }\n}"]}
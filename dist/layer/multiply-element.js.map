{"version":3,"sources":["../../src/layer/multiply-element.js"],"names":["MultiplyElement","settings","inputLayer","width","Error","height","predictKernel","predict","output","learnKernel","learn","outputs","weights","deltas","inputs","thread","y","x"],"mappings":"AAAA;;;;;;;;AAEA;;;;AACA;;;;;;;;;;;;IAEqBA,e;;;AACnB,2BAAYC,QAAZ,EAAsBC,UAAtB,EAAkC;AAAA;;AAAA,kIAC1BD,QAD0B;;AAGhC,QAAIC,WAAWC,KAAX,KAAqBD,WAAWC,KAApC,EAA2C;AACzC,YAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,QAAIF,WAAWG,MAAX,KAAsBH,WAAWG,MAArC,EAA6C;AAC3C,YAAM,IAAID,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,UAAKD,KAAL,GAAaD,WAAWC,KAAxB;AACA,UAAKE,MAAL,GAAcH,WAAWG,MAAzB;AACA,UAAKH,UAAL,GAAkBA,UAAlB;AAbgC;AAcjC;;;;mCAEc;AACb,WAAKI,aAAL,GAAqB,0BAAWC,OAAX,EAAoB;AACvCC,gBAAQ,CAAC,KAAKL,KAAN,EAAa,KAAKE,MAAlB;AAD+B,OAApB,CAArB;;AAIA,WAAKI,WAAL,GAAmB,0BAAWC,KAAX,EAAkB;AACnCF,gBAAQ,CAAC,KAAKL,KAAN,EAAa,KAAKE,MAAlB;AAD2B,OAAlB,CAAnB;AAGD;;;8BAES;AACR,WAAKM,OAAL,GAAe,KAAKL,aAAL,CAAmB,KAAKM,OAAxB,EAAiC,KAAKV,UAAL,CAAgBM,MAAjD,CAAf;AACD;;;4BAEO;AACN,WAAKK,MAAL,GAAc,KAAKP,aAAL,CAAmB,KAAKM,OAAxB,EAAiC,KAAKC,MAAtC,CAAd;AACD;;;;;;kBAjCkBb,e;;;AAoCrB,SAASO,OAAT,CAAiBK,OAAjB,EAA0BE,MAA1B,EAAkC;AAChC,SAAOF,QAAQ,KAAKG,MAAL,CAAYC,CAApB,EAAuB,KAAKD,MAAL,CAAYE,CAAnC,IAAwCH,OAAO,KAAKC,MAAL,CAAYC,CAAnB,EAAsB,KAAKD,MAAL,CAAYE,CAAlC,CAA/C;AACD;;AAED,SAASP,KAAT,CAAeE,OAAf,EAAwBC,MAAxB,EAAgC;AAC9B,SAAOD,QAAQ,KAAKG,MAAL,CAAYC,CAApB,EAAuB,KAAKD,MAAL,CAAYE,CAAnC,IAAwCJ,OAAO,KAAKE,MAAL,CAAYC,CAAnB,EAAsB,KAAKD,MAAL,CAAYE,CAAlC,CAA/C;AACD","file":"multiply-element.js","sourcesContent":["'use strict';\n\nimport Base from './base';\nimport makeKernel from '../utilities/make-kernel';\n\nexport default class MultiplyElement extends Base {\n  constructor(settings, inputLayer) {\n    super(settings);\n\n    if (inputLayer.width !== inputLayer.width) {\n      throw new Error('Layer width mismatch');\n    }\n\n    if (inputLayer.height !== inputLayer.height) {\n      throw new Error('Layer height mismatch');\n    }\n\n    this.width = inputLayer.width;\n    this.height = inputLayer.height;\n    this.inputLayer = inputLayer;\n  }\n\n  setupKernels() {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.width, this.height]\n    });\n\n    this.learnKernel = makeKernel(learn, {\n      output: [this.width, this.height]\n    });\n  }\n\n  predict() {\n    this.outputs = this.predictKernel(this.weights, this.inputLayer.output);\n  }\n\n  learn() {\n    this.deltas = this.predictKernel(this.weights, this.deltas);\n  }\n}\n\nfunction predict(weights, inputs) {\n  return weights[this.thread.y][this.thread.x] * inputs[this.thread.y][this.thread.x];\n}\n\nfunction learn(weights, deltas) {\n  return weights[this.thread.y][this.thread.x] * deltas[this.thread.y][this.thread.x];\n}"]}
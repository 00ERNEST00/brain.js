{"version":3,"sources":["../../src/layer/convolution.js"],"names":["predict","learnFilters","learnInputs","Convolution","stride","padding","bias","filterCount","filterWidth","filterHeight","settings","inputLayer","width","Math","floor","paddingX","strideX","height","paddingY","strideY","depth","filters","filterDeltas","predictKernel","constants","inputWidth","inputHeight","inputDepth","output","compareKernel","compare","outputs","biases","deltas","inputs","x","thread","y","sum","filterY","inputY","filterX","inputX","inputIndex","filterIndex","z","delta","inputXMax","inputYMax","offsetY","offsetX"],"mappings":"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","file":"convolution.js","sourcesContent":["'use strict';\n\nimport Base from './base';\nimport makeKernel from '../utilities/make-kernel';\nimport { setStride, setPadding } from \"../utilities/layer-setup\"\nexport default class Convolution extends Base {\n  static get defaults() {\n    return {\n      stride: 0,\n      padding: 0,\n      bias: 0,\n      filterCount: 1,\n      filterWidth: 0,\n      filterHeight: 0\n    };\n  }\n\n  constructor(settings, inputLayer) {\n    super(settings);\n\n    this.width = Math.floor((inputLayer.width + (this.paddingX * 2) - this.filterWidth) / this.strideX + 1);\n    this.height = Math.floor((inputLayer.height + (this.paddingY * 2) - this.filterHeight) / this.strideY + 1);\n    this.depth = this.filterCount;\n\n    this.stride = null;\n    this.strideX = null;\n    this.strideY = null;\n    setStride(this, settings);\n\n    this.padding = null;\n    this.paddingX = null;\n    this.paddingY = null;\n    setPadding(this, settings);\n\n    this.filterCount = settings.filterCount;\n    this.filterWidth = settings.filterWidth;\n    this.filterHeight = settings.filterHeight;\n\n    this.bias = settings.bias;\n\n    this.filters = null;\n    this.filterDeltas = null;\n\n    this.learnFilters = null;\n    this.learnInputs = null;\n    this.inputLayer = inputLayer;\n  }\n\n  setupKernels() {\n    this.predictKernel = makeKernel(predict, {\n      constants: {\n        inputWidth: this.inputLayer.width,\n        inputHeight: this.inputLayer.height,\n        inputDepth: this.inputLayer.depth,\n        strideX: this.strideX,\n        strideY: this.strideY,\n        paddingX: this.paddingX,\n        paddingY: this.paddingY,\n        filterCount: this.filterCount,\n        filterWidth: this.filterWidth,\n        filterHeight: this.filterHeight\n      },\n      output: [this.width, this.height, this.depth]\n    });\n\n    this.compareKernel = makeKernel(compare, {\n      output: [this.width, this.height, this.depth]\n    });\n\n    this.learnFilters = makeKernel(learnFilters, {\n      output: [this.filterWidth, this.filterHeight, this.filterCount]\n    });\n\n    this.learnInputs = makeKernel(learnInputs, {\n      output: [this.inputLayer.width, this.inputLayer.height, this.inputLayer.depth]\n    });\n  }\n\n  predict() {\n    this.outputs = this.predictKernel(this.inputLayer.outputs, this.filters, this.biases);\n  }\n\n  learn() {\n    this.filterDeltas = this.learnFilters(this.inputLayer.outputs, this.deltas);\n    this.deltas = this.learnInputs(this.filters);\n  }\n}\n\nexport function predict(inputs, filters, biases) {\n  const x = (((this.thread.x / this.output.x) * this.constants.inputWidth) * this.constants.strideX) - this.constants.paddingX;\n  const y = (((this.thread.y / this.output.y) * this.constants.inputHeight) * this.constants.strideY) - this.constants.paddingY;\n\n  // convolve centered at this particular location\n  let sum = 0;\n  for (let filterY = 0; filterY < this.constants.filterHeight; filterY++) {\n    // coordinates in the original input array coordinates\n    let inputY = filterY + y;\n    for (let filterX = 0; filterX < this.constants.filterWidth; filterX++) {\n      let inputX = filterX + x;\n      if (\n        inputY >= 0\n        && inputY < this.constants.inputHeight\n        && inputX >= 0\n        && inputX < this.constants.inputWidth\n      ) {\n        for (let inputIndex = 0; inputIndex < this.constants.inputDepth; inputIndex++) {\n          for (let filterIndex = 0; filterIndex < this.constants.filterCount; filterIndex++) {\n            sum += filters[filterIndex][filterY][filterX] * inputs[inputIndex][inputY][inputX];\n          }\n        }\n      }\n    }\n  }\n  return sum + biases[this.thread.z];\n}\n\nexport function learnFilters(inputs, deltas) {\n  let sum = 0;\n  let delta = deltas[this.thread.z][this.thread.y * this.constants.paddingY][this.thread.x * this.constants.paddingX];\n  let inputXMax = this.constants.inputWidth + this.constants.paddingX;\n  let inputYMax = this.constants.inputHeight + this.constants.paddingY;\n  for (let inputY = this.thread.y - this.constants.paddingY; inputY < inputYMax; inputY += this.constants.strideY) {\n    for (let inputX = this.thread.x - this.constants.paddingX; inputX < inputXMax; inputX += this.constants.strideX) {\n      if (\n        inputY >= 0\n        && inputY < this.constants.inputHeight\n        && inputX >= 0\n        && inputX < this.constants.inputWidth\n      ) {\n        for (let inputIndex = 0; inputIndex < this.constants.inputDepth; inputIndex++) {\n          sum += inputs[inputIndex][inputY][inputX] * delta;\n        }\n      }\n    }\n  }\n  return sum;\n}\n\nexport function learnInputs(filters, deltas) {\n  let sum = 0;\n  for (let filterY = 0; filterY <= this.thread.y; filterY++) {\n    let offsetY = this.thread.y - filterY;\n    for (let filterX = 0; filterX <= this.thread.x; filterX++) {\n      let offsetX = this.thread.x - filterX;\n      for (let filterIndex = 0; filterIndex < this.constants.filterCount; filterIndex++) {\n        sum += filters[filterIndex][offsetY][offsetX] * deltas[filterIndex][filterY][filterX];\n      }\n      offsetX--;\n    }\n    offsetY--;\n  }\n  return sum;\n}"]}
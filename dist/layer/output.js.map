{"version":3,"sources":["../../src/layer/output.js"],"names":["Output","settings","inputLayer","weights","width","compareKernel","compare","map","deltas","setDelta","errors","setError","output","target","delta","error","weight","thread","x"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;IAEqBA,M;;;AACnB,kBAAYC,QAAZ,EAAsBC,UAAtB,EAAkC;AAAA;;AAAA,gHAC1BD,QAD0B;;AAEhC,UAAKC,UAAL,GAAkBA,UAAlB;AACA,UAAKC,OAAL,GAAe,sBAAO,MAAKC,KAAZ,CAAf;AAHgC;AAIjC;;;;mCAEc;AACb,WAAKC,aAAL,GAAqB,0BAAWC,OAAX,EAAoB;AACvCC,aAAK;AACHC,kBAAQC,QADL;AAEHC,kBAAQC;AAFL,SADkC;AAKvCC,gBAAQ,CAAC,KAAKR,KAAN;AAL+B,OAApB,CAArB;AAOD;;;8BAES;AACR,WAAKD,OAAL,GAAe,KAAKD,UAAL,CAAgBC,OAA/B;AACD;;;4BAEOU,M,EAAQ;AAAA,2BACa,KAAKR,aAAL,CAAmBQ,MAAnB,EAA2B,KAAKV,OAAhC,CADb;AAAA,UACNO,MADM,kBACNA,MADM;AAAA,UACEF,MADF,kBACEA,MADF;;AAEd,WAAKE,MAAL,GAAcA,MAAd;AACA,WAAKF,MAAL,GAAcA,MAAd;AACD;;;0BAEKK,M,EAAQ,CAAE;;;;;;kBA3BGb,M;;;AA8BrB,SAASS,QAAT,CAAkBK,KAAlB,EAAyB;AACvB,SAAOA,KAAP;AACD;;AAED,SAASH,QAAT,CAAkBI,KAAlB,EAAyB;AACvB,SAAOA,KAAP;AACD;;AAED,SAAST,OAAT,CAAiBO,MAAjB,EAAyBV,OAAzB,EAAkC;AAChC,MAAMa,SAASb,QAAQ,KAAKc,MAAL,CAAYC,CAApB,CAAf;AACA,MAAMH,QAAQF,OAAO,KAAKI,MAAL,CAAYC,CAAnB,IAAwBF,MAAtC;AACAP,WAASM,QAAQC,MAAjB;AACA,SAAOL,SAASI,KAAT,CAAP;AACD","file":"output.js","sourcesContent":["import Base from './base';\nimport makeKernel from '../utilities/make-kernel';\nimport randos from '../utilities/randos';\n\nexport default class Output extends Base {\n  constructor(settings, inputLayer) {\n    super(settings);\n    this.inputLayer = inputLayer;\n    this.weights = randos(this.width);\n  }\n\n  setupKernels() {\n    this.compareKernel = makeKernel(compare, {\n      map: {\n        deltas: setDelta,\n        errors: setError\n      },\n      output: [this.width]\n    });\n  }\n\n  predict() {\n    this.weights = this.inputLayer.weights;\n  }\n\n  compare(target) {\n    const { errors, deltas } = this.compareKernel(target, this.weights);\n    this.errors = errors;\n    this.deltas = deltas;\n  }\n\n  learn(target) {}\n}\n\nfunction setDelta(delta) {\n  return delta;\n}\n\nfunction setError(error) {\n  return error;\n}\n\nfunction compare(target, weights) {\n  const weight = weights[this.thread.x];\n  const error = target[this.thread.x] - weight;\n  setDelta(error * weight);\n  return setError(error);\n}"]}
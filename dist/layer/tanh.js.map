{"version":3,"sources":["../../src/layer/tanh.js"],"names":["predict","learn","Tanh","inputLayer","width","height","depth","predictKernel","learnKernel","functions","outputs","deltas","weights","errors","inputs","Math","tanh","thread","y","x"],"mappings":"AAAA;;;;;;;;QAgCgBA,O,GAAAA,O;QAIAC,K,GAAAA,K;;AAlChB;;;;AACA;;;;AACA;;;;;;;;;;IAEqBC,I;;;AACnB,gBAAYC,UAAZ,EAAwB;AAAA;;AAAA;;AAEtB,UAAKC,KAAL,GAAaD,WAAWC,KAAxB;AACA,UAAKC,MAAL,GAAcF,WAAWE,MAAzB;AACA,UAAKC,KAAL,GAAaH,WAAWG,KAAxB;AACA,UAAKH,UAAL,GAAkBA,UAAlB;AALsB;AAMvB;;;;mCAEc;AACb,WAAKI,aAAL,GAAqB,0BAAWP,OAAX,CAArB;;AAEA,WAAKQ,WAAL,GAAmB,0BAAWP,KAAX,EAAkB;AACnCQ,mBAAW;AADwB,OAAlB,CAAnB;AAGD;;;8BAES;AACR,WAAKC,OAAL,GAAe,KAAKH,aAAL,CAAmB,KAAKJ,UAAL,CAAgBO,OAAnC,CAAf;AACD;;;4BAEO;AACN,WAAKC,MAAL,GAAc,KAAKH,WAAL,CAAiB,KAAKI,OAAtB,EAA+B,KAAKC,MAApC,CAAd;AACD;;;;;;kBAvBkBX,I;AA0Bd,SAASF,OAAT,CAAiBc,MAAjB,EAAyB;AAC9B,SAAOC,KAAKC,IAAL,CAAUF,OAAO,KAAKG,MAAL,CAAYC,CAAnB,EAAsB,KAAKD,MAAL,CAAYE,CAAlC,CAAV,CAAP;AACD;;AAEM,SAASlB,KAAT,CAAeW,OAAf,EAAwBC,MAAxB,EAAgC;AACrC,SAAO,0BAAeD,QAAQ,KAAKK,MAAL,CAAYC,CAApB,EAAuB,KAAKD,MAAL,CAAYE,CAAnC,CAAf,EAAsDN,OAAO,KAAKI,MAAL,CAAYC,CAAnB,EAAsB,KAAKD,MAAL,CAAYE,CAAlC,CAAtD,CAAP;AACD","file":"tanh.js","sourcesContent":["'use strict';\n\nimport Base from './base';\nimport makeKernel from '../utilities/make-kernel';\nimport { tanh, tanhDerivative } from '../activation/tanh';\n\nexport default class Tanh extends Base {\n  constructor(inputLayer) {\n    super();\n    this.width = inputLayer.width;\n    this.height = inputLayer.height;\n    this.depth = inputLayer.depth;\n    this.inputLayer = inputLayer;\n  }\n\n  setupKernels() {\n    this.predictKernel = makeKernel(predict);\n\n    this.learnKernel = makeKernel(learn, {\n      functions: [tanhDerivative]\n    });\n  }\n\n  predict() {\n    this.outputs = this.predictKernel(this.inputLayer.outputs);\n  }\n\n  learn() {\n    this.deltas = this.learnKernel(this.weights, this.errors);\n  }\n}\n\nexport function predict(inputs) {\n  return Math.tanh(inputs[this.thread.y][this.thread.x]);\n}\n\nexport function learn(weights, errors) {\n  return tanhDerivative(weights[this.thread.y][this.thread.x], errors[this.thread.y][this.thread.x]);\n}"]}
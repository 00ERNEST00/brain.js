{"version":3,"sources":["../../src/layer/gru.js"],"names":["settings","input","recurrentInput","updateGateWeights","updateGatePeepholes","updateGateBias","updateGate","resetGateWeights","resetGatePeepholes","resetGateBias","resetGate","cellWeights","cellPeepholes","cellBias","cell","rows","columns"],"mappings":";;;;;;AAAA;;kBAWe,UAACA,QAAD,EAAWC,KAAX,EAAkBC,cAAlB,EAAqC;AAClD,MAAMC,oBAAoB,eAA1B;AACA,MAAMC,sBAAsB,eAA5B;AACA,MAAMC,iBAAiB,eAAvB;AACA,MAAMC,aAAa,eACjB,WACE,WACE,gBACEH,iBADF,EAEEF,KAFF,CADF,EAKE,gBACEG,mBADF,EAEEF,cAFF,CALF,CADF,EAWEG,cAXF,CADiB,CAAnB;;AAgBA,MAAME,mBAAmB,eAAzB;AACA,MAAMC,qBAAqB,eAA3B;AACA,MAAMC,gBAAgB,eAAtB;AACA,MAAIC,YAAY,eACd,WACE,WACE,gBACEH,gBADF,EAEEN,KAFF,CADF,EAKE,gBACEO,kBADF,EAEEN,cAFF,CALF,CADF,EAWEO,aAXF,CADc,CAAhB;;AAgBA,MAAME,cAAc,eAApB;AACA,MAAMC,gBAAgB,eAAtB;AACA,MAAMC,WAAW,eAAjB;AACA,MAAIC,OAAO,YACT,WACE,WACE,gBACEH,WADF,EAEEV,KAFF,CADF,EAKE,gBACEW,aADF,EAEE,uBACEF,SADF,EAEER,cAFF,CAFF,CALF,CADF,EAcEW,QAdF,CADS,CAAX;;AAmBA;AACA;AACA,SAAO,WACL,uBACE,WACE,YAAKP,WAAWS,IAAhB,EAAsBT,WAAWU,OAAjC,CADF,EAEE,qBAAcV,UAAd,CAFF,CADF,EAKEQ,IALF,CADK,EAQL,uBACEZ,cADF,EAEEI,UAFF,CARK,CAAP;AAaD,C","file":"gru.js","sourcesContent":["import {\n  add,\n  cloneNegative,\n  multiply,\n  multiplyElement,\n  ones,\n  sigmoid,\n  random,\n  tanh\n} from './';\n\nexport default (settings, input, recurrentInput) => {\n  const updateGateWeights = random();\n  const updateGatePeepholes = random();\n  const updateGateBias = random();\n  const updateGate = sigmoid(\n    add(\n      add(\n        multiply(\n          updateGateWeights,\n          input\n        ),\n        multiply(\n          updateGatePeepholes,\n          recurrentInput\n        )\n      ),\n      updateGateBias\n    )\n  );\n\n  const resetGateWeights = random();\n  const resetGatePeepholes = random();\n  const resetGateBias = random();\n  let resetGate = sigmoid(\n    add(\n      add(\n        multiply(\n          resetGateWeights,\n          input\n        ),\n        multiply(\n          resetGatePeepholes,\n          recurrentInput\n        )\n      ),\n      resetGateBias\n    )\n  );\n\n  const cellWeights = random();\n  const cellPeepholes = random();\n  const cellBias = random();\n  let cell = tanh(\n    add(\n      add(\n        multiply(\n          cellWeights,\n          input\n        ),\n        multiply(\n          cellPeepholes,\n          multiplyElement(\n            resetGate,\n            recurrentInput\n          )\n        )\n      ),\n      cellBias\n    )\n  );\n\n  // compute hidden state as gated, saturated cell activations\n  // negate updateGate\n  return add(\n    multiplyElement(\n      add(\n        ones(updateGate.rows, updateGate.columns),\n        cloneNegative(updateGate)\n      ),\n      cell\n    ),\n    multiplyElement(\n      recurrentInput,\n      updateGate\n    )\n  );\n}"]}
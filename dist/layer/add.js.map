{"version":3,"sources":["../../src/layer/add.js"],"names":["predict","Add","inputLayers","width","height","Error","predictKernel","output","weights","previousLayer","nextLayer","deltas","inputs1","inputs2","thread","y","x"],"mappings":";;;;;;;;QAqCgBA,O,GAAAA,O;;AArChB;;;;AACA;;;;;;;;;;;;IAEqBC,G;;;AACnB,eAAYC,WAAZ,EAAyB;AAAA;;AAAA;;AAEvB,UAAKC,KAAL,GAAaD,YAAY,CAAZ,EAAeC,KAA5B;AACA,UAAKC,MAAL,GAAcF,YAAY,CAAZ,EAAeE,MAA7B;;AAEA,UAAKF,WAAL,GAAmBA,WAAnB;AALuB;AAMxB;;;;+BAEU;AACT,UAAI,KAAKA,WAAL,CAAiB,CAAjB,EAAoBC,KAApB,KAA8B,KAAKD,WAAL,CAAiB,CAAjB,EAAoBC,KAAtD,EAA6D;AAC3D,cAAM,IAAIE,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,UAAI,KAAKH,WAAL,CAAiB,CAAjB,EAAoBE,MAApB,KAA+B,KAAKF,WAAL,CAAiB,CAAjB,EAAoBE,MAAvD,EAA+D;AAC7D,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;AACF;;;mCAEc;AACb,WAAKC,aAAL,GAAqB,0BAAWN,OAAX,EAAoB;AACvCO,gBAAQ,CAAC,KAAKJ,KAAN,EAAa,KAAKC,MAAlB;AAD+B,OAApB,CAArB;AAGD;;;8BAES;AACR,WAAKI,OAAL,GAAe,KAAKF,aAAL,CAAmB,KAAKJ,WAAL,CAAiB,CAAjB,EAAoBM,OAAvC,EAAgD,KAAKN,WAAL,CAAiB,CAAjB,EAAoBM,OAApE,CAAf;AACD;;;0BAEKC,a,EAAeC,S,EAAW;AAC9B,WAAKC,MAAL,GAAcD,UAAUC,MAAxB;AACD;;;;;;kBA/BkBV,G;AAkCd,SAASD,OAAT,CAAiBY,OAAjB,EAA0BC,OAA1B,EAAmC;AACxC,SAAOD,QAAQ,KAAKE,MAAL,CAAYC,CAApB,EAAuB,KAAKD,MAAL,CAAYE,CAAnC,IAAwCH,QAAQ,KAAKC,MAAL,CAAYC,CAApB,EAAuB,KAAKD,MAAL,CAAYE,CAAnC,CAA/C;AACD","file":"add.js","sourcesContent":["import makeKernel from '../utilities/make-kernel';\nimport OperatorBase from './operator-base';\n\nexport default class Add extends OperatorBase {\n  constructor(inputLayers) {\n    super();\n    this.width = inputLayers[0].width;\n    this.height = inputLayers[0].height;\n\n    this.inputLayers = inputLayers;\n  }\n\n  validate() {\n    if (this.inputLayers[0].width !== this.inputLayers[1].width) {\n      throw new Error('Layer width mismatch');\n    }\n\n    if (this.inputLayers[0].height !== this.inputLayers[1].height) {\n      throw new Error('Layer height mismatch');\n    }\n  }\n\n  setupKernels() {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.width, this.height]\n    });\n  }\n\n  predict() {\n    this.weights = this.predictKernel(this.inputLayers[0].weights, this.inputLayers[1].weights);\n  }\n\n  learn(previousLayer, nextLayer) {\n    this.deltas = nextLayer.deltas;\n  }\n}\n\nexport function predict(inputs1, inputs2) {\n  return inputs1[this.thread.y][this.thread.x] + inputs2[this.thread.y][this.thread.x];\n}"]}
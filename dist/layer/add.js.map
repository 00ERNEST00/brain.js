{"version":3,"sources":["../../src/layer/add.js"],"names":["predict","Add","inputLayers","width","Error","height","predictKernel","output","outputs","previousLayer","nextLayer","deltas","inputs1","inputs2","thread","y","x"],"mappings":"AAAA;;;;;;;;QAsCgBA,O,GAAAA,O;;AApChB;;;;AACA;;;;;;;;;;;;IAEqBC,G;;;AACnB,eAAYC,WAAZ,EAAyB;AAAA;;AAAA;;AAGvB,QAAIA,YAAY,CAAZ,EAAeC,KAAf,KAAyBD,YAAY,CAAZ,EAAeC,KAA5C,EAAmD;AACjD,YAAM,IAAIC,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAED,QAAIF,YAAY,CAAZ,EAAeG,MAAf,KAA0BH,YAAY,CAAZ,EAAeG,MAA7C,EAAqD;AACnD,YAAM,IAAID,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,UAAKD,KAAL,GAAaD,YAAY,CAAZ,EAAeC,KAA5B;AACA,UAAKE,MAAL,GAAcH,YAAY,CAAZ,EAAeG,MAA7B;;AAEA,UAAKH,WAAL,GAAmBA,WAAnB;AAduB;AAexB;;;;mCAEc;AACb,WAAKI,aAAL,GAAqB,0BAAWN,OAAX,EAAoB;AACvCO,gBAAQ,CAAC,KAAKJ,KAAN,EAAa,KAAKE,MAAlB;AAD+B,OAApB,CAArB;AAGD;;;8BAES;AACR,WAAKG,OAAL,GAAe,KAAKF,aAAL,CAAmB,KAAKJ,WAAL,CAAiB,CAAjB,EAAoBM,OAAvC,EAAgD,KAAKN,WAAL,CAAiB,CAAjB,EAAoBM,OAApE,CAAf;AACD;;;0BAEKC,a,EAAeC,S,EAAW;AAC9B,WAAKC,MAAL,GAAcD,UAAUC,MAAxB;AACD;;;;;;kBA9BkBV,G;AAiCd,SAASD,OAAT,CAAiBY,OAAjB,EAA0BC,OAA1B,EAAmC;AACxC,SAAOD,QAAQ,KAAKE,MAAL,CAAYC,CAApB,EAAuB,KAAKD,MAAL,CAAYE,CAAnC,IAAwCH,QAAQ,KAAKC,MAAL,CAAYC,CAApB,EAAuB,KAAKD,MAAL,CAAYE,CAAnC,CAA/C;AACD","file":"add.js","sourcesContent":["'use strict';\n\nimport Base from './base';\nimport makeKernel from '../utilities/make-kernel';\n\nexport default class Add extends Base {\n  constructor(inputLayers) {\n    super();\n\n    if (inputLayers[0].width !== inputLayers[1].width) {\n      throw new Error('Layer width mismatch');\n    }\n\n    if (inputLayers[0].height !== inputLayers[1].height) {\n      throw new Error('Layer height mismatch');\n    }\n\n    this.width = inputLayers[0].width;\n    this.height = inputLayers[0].height;\n\n    this.inputLayers = inputLayers;\n  }\n\n  setupKernels() {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.width, this.height]\n    });\n  }\n\n  predict() {\n    this.outputs = this.predictKernel(this.inputLayers[0].outputs, this.inputLayers[1].outputs);\n  }\n\n  learn(previousLayer, nextLayer) {\n    this.deltas = nextLayer.deltas;\n  }\n}\n\nexport function predict(inputs1, inputs2) {\n  return inputs1[this.thread.y][this.thread.x] + inputs2[this.thread.y][this.thread.x];\n}"]}
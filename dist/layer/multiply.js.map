{"version":3,"sources":["../../src/layer/multiply.js"],"names":["predict","Multiply","inputLayers","width","height","Error","predictKernel","output","weights","inputLayer","previousLayer","nextLayer","deltas","inputs1","inputs2","sum","i","x","thread","y"],"mappings":";;;;;;;;QA8BgBA,O,GAAAA,O;;AA9BhB;;;;AACA;;;;;;;;;;;;IAEqBC,Q;;;AACnB,oBAAYC,WAAZ,EAAyB;AAAA;;AAAA;;AAGvB,QAAIA,YAAY,CAAZ,EAAeC,KAAf,KAAyBD,YAAY,CAAZ,EAAeE,MAA5C,EAAoD;AAClD,YAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD;AACD,UAAKH,WAAL,GAAmBA,WAAnB;AACA,UAAKC,KAAL,GAAaD,YAAY,CAAZ,EAAeC,KAA5B;AACA,UAAKC,MAAL,GAAcF,YAAY,CAAZ,EAAeE,MAA7B;AARuB;AASxB;;;;mCAEc;AACb,WAAKE,aAAL,GAAqB,0BAAWN,OAAX,EAAoB;AACvCO,gBAAQ,CAAC,KAAKJ,KAAN,EAAa,KAAKC,MAAlB;AAD+B,OAApB,CAArB;AAGD;;;8BAES;AACR,WAAKI,OAAL,GAAe,KAAKF,aAAL,CAAmB,KAAKG,UAAL,CAAgB,CAAhB,EAAmBD,OAAtC,EAA+C,KAAKC,UAAL,CAAgB,CAAhB,EAAmBD,OAAlE,CAAf;AACD;;;0BAEKE,a,EAAeC,S,EAAW;AAC9B,WAAKC,MAAL,GAAcD,UAAUC,MAAxB;AACD;;;;;;kBAxBkBX,Q;AA2Bd,SAASD,OAAT,CAAiBa,OAAjB,EAA0BC,OAA1B,EAAmC;AACxC,MAAIC,MAAM,CAAV;AACA,OAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAI,KAAKT,MAAL,CAAYU,CAA/B,EAAkCD,GAAlC,EAAuC;AACrCD,WAAOF,QAAQ,KAAKK,MAAL,CAAYC,CAApB,EAAuBH,CAAvB,IAA4BF,QAAQE,CAAR,EAAW,KAAKE,MAAL,CAAYD,CAAvB,CAAnC;AACD;AACD,SAAOF,GAAP;AACD","file":"multiply.js","sourcesContent":["import makeKernel from '../utilities/make-kernel';\nimport OperatorBase from './operator-base';\n\nexport default class Multiply extends OperatorBase {\n  constructor(inputLayers) {\n    super();\n\n    if (inputLayers[0].width !== inputLayers[1].height) {\n      throw new Error('Layer size mismatch');\n    }\n    this.inputLayers = inputLayers;\n    this.width = inputLayers[0].width;\n    this.height = inputLayers[1].height;\n  }\n\n  setupKernels() {\n    this.predictKernel = makeKernel(predict, {\n      output: [this.width, this.height]\n    });\n  }\n\n  predict() {\n    this.weights = this.predictKernel(this.inputLayer[0].weights, this.inputLayer[1].weights);\n  }\n\n  learn(previousLayer, nextLayer) {\n    this.deltas = nextLayer.deltas;\n  }\n}\n\nexport function predict(inputs1, inputs2) {\n  let sum = 0;\n  for(let i = 0; i < this.output.x; i++) {\n    sum += inputs1[this.thread.y][i] * inputs2[i][this.thread.x];\n  }\n  return sum;\n}"]}